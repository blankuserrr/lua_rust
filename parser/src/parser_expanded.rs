// This file was generated by rustylr 1.20.0
// This generated code is targeting rusty_lr version 3.28.0.
// There might be a build error if the version is not matched.
//
// ================================User Codes Begin================================
use crate::expression;
use crate::statement;
use crate::ChunkOrExpressions;
use crate::Expression;
use crate::ParseError;
use crate::Span;
use crate::SpannedString;
use crate::Statement;
use lua_tokenizer::Token;
use lua_tokenizer::TokenType;
macro_rules! new_binary_node {
    ($ variant : ident , $ op : ident , $ lhs : ident , $ rhs : ident) => {{
        let span = $lhs.span().merge_ordered(&$rhs.span());
        let span_op = $op.span();
        let binary_data = expression::ExprBinaryData::new($lhs, $rhs, span, span_op);
        Expression::Binary(expression::ExprBinary::$variant(binary_data))
    }};
}
macro_rules! new_unary_node {
    ($ variant : ident , $ op : ident , $ lhs : ident) => {{
        let span = $op.span().merge_ordered(&$lhs.span());
        let span_op = $op.span();
        let unary_data = expression::ExprUnaryData::new($lhs, span, span_op);
        Expression::Unary(expression::ExprUnary::$variant(unary_data))
    }};
}
fn filter(token: &Token) -> &TokenType {
    &token.token_type
}
// =================================User Codes End=================================
/*
====================================Grammar=====================================

# of terminal classes: 58
# of states: 226

ChunkOrExpressions -> Chunk
ChunkOrExpressions -> ExpList1
Block -> Statement* ReturnStatement?
Statement -> semicolon
Statement -> VarList equal ExpList1
Statement -> FunctionCall
Statement -> coloncolon ident coloncolon
Statement -> break_
Statement -> goto_ ident
Statement -> do_ Block end_
Statement -> while_ Exp do_ Block end_
Statement -> repeat_ Block until_ Exp
Statement -> if_ Exp then_ Block ElseIf* (else_, Block)? end_
Statement -> for_ ident equal Exp comma Exp (comma, Exp)? do_ Block end_
Statement -> for_ NameList in_ ExpList1 do_ Block end_
Statement -> function_ FuncName FuncBody
Statement -> local_ function_ ident FuncBody
Statement -> local_ AttNameList (equal, ExpList1)?
ElseIf -> elseif_ Exp then_ Block
ReturnStatement -> return_ ExpList0 semicolon?
Var -> ident
Var -> PrefixExp lbracket Exp rbracket
Var -> PrefixExp dot ident
PrefixExp -> FunctionCall
FunctionCall -> PrefixExp Args
FunctionCall -> PrefixExp colon ident Args
Args -> lparen ExpList0 rparen
Args -> TableConstructor
Args -> string_literal
VarList -> VarList comma Var
VarList -> Var
ExpList1 -> ExpList1 comma Exp
ExpList1 -> Exp
ExpList0 -> ExpList1
ExpList0 ->
NameList -> NameList comma ident
NameList -> ident
AttName -> ident Attrib
AttNameList -> AttNameList comma AttName
AttNameList -> AttName
Attrib -> less ident greater
Attrib ->
Exp -> numeric_literal
Exp -> nil
Exp -> string_literal
Exp -> bool_
Exp -> dotdotdot
Exp -> FunctionDef
Exp -> TableConstructor
Exp -> not_ Exp
Exp -> hash Exp
Exp -> minus Exp
Exp -> plus Exp
Exp -> tilde Exp
Exp -> Exp asterisk Exp
Exp -> Exp slash Exp
Exp -> Exp slashslash Exp
Exp -> Exp percent Exp
Exp -> Exp plus Exp
Exp -> Exp minus Exp
Exp -> Exp dotdot Exp
Exp -> Exp lessless Exp
Exp -> Exp greatergreater Exp
Exp -> Exp ampersand Exp
Exp -> Exp tilde Exp
Exp -> Exp pipe Exp
Exp -> Exp less Exp
Exp -> Exp lessequal Exp
Exp -> Exp greater Exp
Exp -> Exp greaterequal Exp
Exp -> Exp tildeequal Exp
Exp -> Exp equalequal Exp
Exp -> Exp and_ Exp
Exp -> Exp or_ Exp
Exp -> Exp caret Exp
TableConstructor -> lbrace FieldList rbrace
FieldList1 -> FieldList1 FieldSep Field
FieldList1 -> Field
FieldList -> FieldList1 FieldSep?
FieldList ->
Field -> lbracket Exp rbracket equal Exp
Field -> ident equal Exp
Field -> Exp
FunctionDef -> function_ FuncBody
FuncBody -> lparen ParList? rparen Block end_
FuncName1 -> FuncName1 dot ident
FuncName1 -> ident
FuncName -> FuncName1 colon ident
FuncName -> FuncName1
ParList -> NameList (comma, dotdotdot)?
ParList -> dotdotdot
Statement+ -> Statement
Statement+ -> Statement+ Statement
Statement* ->
ReturnStatement? -> ReturnStatement
ReturnStatement? ->
ElseIf+ -> ElseIf
ElseIf+ -> ElseIf+ ElseIf
ElseIf* ->
(else_, Block)? -> (else_, Block)
(else_, Block)? ->
(comma, Exp)? -> (comma, Exp)
(comma, Exp)? ->
(equal, ExpList1)? -> (equal, ExpList1)
(equal, ExpList1)? ->
semicolon? -> semicolon
semicolon? ->
ParList? -> ParList
ParList? ->
(comma, dotdotdot)? -> (comma, dotdotdot)
(comma, dotdotdot)? ->
Chunk -> Block
PrefixExp -> Var
Exp -> PrefixExp
Statement* -> Statement+
ElseIf* -> ElseIf+
(else_, Block) -> else_ Block
(comma, Exp) -> comma Exp
(equal, ExpList1) -> equal ExpList1
(comma, dotdotdot) -> comma dotdotdot
PrefixExp -> lparen Exp rparen
FieldSep -> comma
FieldSep -> semicolon
FieldSep? -> FieldSep
FieldSep? ->
Augmented -> ChunkOrExpressions eof

*/
// =============================Generated Codes Begin==============================
#[doc = r" type alias for `Context`"]
#[allow(non_camel_case_types, dead_code)]
pub type ChunkOrExpressionsContext =
    ::rusty_lr::parser::nondeterministic::Context<ChunkOrExpressionsTokenData, u8>;
#[doc = r" type alias for CFG production rule"]
#[allow(non_camel_case_types, dead_code)]
pub type ChunkOrExpressionsRule =
    ::rusty_lr::rule::ProductionRule<&'static str, ChunkOrExpressionsNonTerminals>;
#[doc = r" type alias for DFA state"]
#[allow(non_camel_case_types, dead_code)]
pub type ChunkOrExpressionsState = ::rusty_lr::parser::state::SparseState<
    u8,
    ChunkOrExpressionsNonTerminals,
    ::rusty_lr::parser::state::SmallVecU8,
    u8,
>;
#[doc = r" type alias for `InvalidTerminalError`"]
#[allow(non_camel_case_types, dead_code)]
pub type ChunkOrExpressionsParseError =
    ::rusty_lr::parser::nondeterministic::ParseError<ChunkOrExpressionsTokenData>;
#[doc = r" An enum that represents non-terminal symbols"]
#[allow(non_camel_case_types, dead_code)]
#[derive(
    Clone,
    Copy,
    std :: hash :: Hash,
    std :: cmp :: PartialEq,
    std :: cmp :: Eq,
    std :: cmp :: PartialOrd,
    std :: cmp :: Ord,
)]
pub enum ChunkOrExpressionsNonTerminals {
    ChunkOrExpressions,
    Chunk,
    Block,
    Statement,
    ElseIf,
    ReturnStatement,
    Var,
    PrefixExp,
    FunctionCall,
    Args,
    VarList,
    ExpList1,
    ExpList0,
    NameList,
    AttName,
    AttNameList,
    Attrib,
    Exp,
    TableConstructor,
    FieldList1,
    FieldList,
    Field,
    FieldSep,
    FunctionDef,
    FuncBody,
    FuncName1,
    FuncName,
    ParList,
    _StatementPlus28,
    _StatementStar29,
    _ReturnStatementQuestion30,
    _ElseIfPlus31,
    _ElseIfStar32,
    _Group33,
    __Group33Question34,
    _Group35,
    __Group35Question36,
    _Group37,
    __Group37Question38,
    _semicolonQuestion39,
    _FieldSepQuestion40,
    _ParListQuestion41,
    _Group42,
    __Group42Question43,
    Augmented,
}
impl std::fmt::Display for ChunkOrExpressionsNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use rusty_lr::nonterminal::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl std::fmt::Debug for ChunkOrExpressionsNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        use rusty_lr::nonterminal::NonTerminal;
        write!(f, "{}", self.as_str())
    }
}
impl ::rusty_lr::nonterminal::NonTerminal for ChunkOrExpressionsNonTerminals {
    fn as_str(&self) -> &'static str {
        match self {
            ChunkOrExpressionsNonTerminals::ChunkOrExpressions => "ChunkOrExpressions",
            ChunkOrExpressionsNonTerminals::Chunk => "Chunk",
            ChunkOrExpressionsNonTerminals::Block => "Block",
            ChunkOrExpressionsNonTerminals::Statement => "Statement",
            ChunkOrExpressionsNonTerminals::ElseIf => "ElseIf",
            ChunkOrExpressionsNonTerminals::ReturnStatement => "ReturnStatement",
            ChunkOrExpressionsNonTerminals::Var => "Var",
            ChunkOrExpressionsNonTerminals::PrefixExp => "PrefixExp",
            ChunkOrExpressionsNonTerminals::FunctionCall => "FunctionCall",
            ChunkOrExpressionsNonTerminals::Args => "Args",
            ChunkOrExpressionsNonTerminals::VarList => "VarList",
            ChunkOrExpressionsNonTerminals::ExpList1 => "ExpList1",
            ChunkOrExpressionsNonTerminals::ExpList0 => "ExpList0",
            ChunkOrExpressionsNonTerminals::NameList => "NameList",
            ChunkOrExpressionsNonTerminals::AttName => "AttName",
            ChunkOrExpressionsNonTerminals::AttNameList => "AttNameList",
            ChunkOrExpressionsNonTerminals::Attrib => "Attrib",
            ChunkOrExpressionsNonTerminals::Exp => "Exp",
            ChunkOrExpressionsNonTerminals::TableConstructor => "TableConstructor",
            ChunkOrExpressionsNonTerminals::FieldList1 => "FieldList1",
            ChunkOrExpressionsNonTerminals::FieldList => "FieldList",
            ChunkOrExpressionsNonTerminals::Field => "Field",
            ChunkOrExpressionsNonTerminals::FieldSep => "FieldSep",
            ChunkOrExpressionsNonTerminals::FunctionDef => "FunctionDef",
            ChunkOrExpressionsNonTerminals::FuncBody => "FuncBody",
            ChunkOrExpressionsNonTerminals::FuncName1 => "FuncName1",
            ChunkOrExpressionsNonTerminals::FuncName => "FuncName",
            ChunkOrExpressionsNonTerminals::ParList => "ParList",
            ChunkOrExpressionsNonTerminals::_StatementPlus28 => "Statement+",
            ChunkOrExpressionsNonTerminals::_StatementStar29 => "Statement*",
            ChunkOrExpressionsNonTerminals::_ReturnStatementQuestion30 => "ReturnStatement?",
            ChunkOrExpressionsNonTerminals::_ElseIfPlus31 => "ElseIf+",
            ChunkOrExpressionsNonTerminals::_ElseIfStar32 => "ElseIf*",
            ChunkOrExpressionsNonTerminals::_Group33 => "(else_, Block)",
            ChunkOrExpressionsNonTerminals::__Group33Question34 => "(else_, Block)?",
            ChunkOrExpressionsNonTerminals::_Group35 => "(comma, Exp)",
            ChunkOrExpressionsNonTerminals::__Group35Question36 => "(comma, Exp)?",
            ChunkOrExpressionsNonTerminals::_Group37 => "(equal, ExpList1)",
            ChunkOrExpressionsNonTerminals::__Group37Question38 => "(equal, ExpList1)?",
            ChunkOrExpressionsNonTerminals::_semicolonQuestion39 => "semicolon?",
            ChunkOrExpressionsNonTerminals::_FieldSepQuestion40 => "FieldSep?",
            ChunkOrExpressionsNonTerminals::_ParListQuestion41 => "ParList?",
            ChunkOrExpressionsNonTerminals::_Group42 => "(comma, dotdotdot)",
            ChunkOrExpressionsNonTerminals::__Group42Question43 => "(comma, dotdotdot)?",
            ChunkOrExpressionsNonTerminals::Augmented => "Augmented",
        }
    }
    fn is_trace(&self) -> bool {
        match self {
            ChunkOrExpressionsNonTerminals::ChunkOrExpressions => false,
            ChunkOrExpressionsNonTerminals::Chunk => false,
            ChunkOrExpressionsNonTerminals::Block => false,
            ChunkOrExpressionsNonTerminals::Statement => false,
            ChunkOrExpressionsNonTerminals::ElseIf => false,
            ChunkOrExpressionsNonTerminals::ReturnStatement => false,
            ChunkOrExpressionsNonTerminals::Var => false,
            ChunkOrExpressionsNonTerminals::PrefixExp => false,
            ChunkOrExpressionsNonTerminals::FunctionCall => false,
            ChunkOrExpressionsNonTerminals::Args => false,
            ChunkOrExpressionsNonTerminals::VarList => false,
            ChunkOrExpressionsNonTerminals::ExpList1 => false,
            ChunkOrExpressionsNonTerminals::ExpList0 => false,
            ChunkOrExpressionsNonTerminals::NameList => false,
            ChunkOrExpressionsNonTerminals::AttName => false,
            ChunkOrExpressionsNonTerminals::AttNameList => false,
            ChunkOrExpressionsNonTerminals::Attrib => false,
            ChunkOrExpressionsNonTerminals::Exp => false,
            ChunkOrExpressionsNonTerminals::TableConstructor => false,
            ChunkOrExpressionsNonTerminals::FieldList1 => false,
            ChunkOrExpressionsNonTerminals::FieldList => false,
            ChunkOrExpressionsNonTerminals::Field => false,
            ChunkOrExpressionsNonTerminals::FieldSep => false,
            ChunkOrExpressionsNonTerminals::FunctionDef => false,
            ChunkOrExpressionsNonTerminals::FuncBody => false,
            ChunkOrExpressionsNonTerminals::FuncName1 => false,
            ChunkOrExpressionsNonTerminals::FuncName => false,
            ChunkOrExpressionsNonTerminals::ParList => false,
            ChunkOrExpressionsNonTerminals::_StatementPlus28 => false,
            ChunkOrExpressionsNonTerminals::_StatementStar29 => false,
            ChunkOrExpressionsNonTerminals::_ReturnStatementQuestion30 => false,
            ChunkOrExpressionsNonTerminals::_ElseIfPlus31 => false,
            ChunkOrExpressionsNonTerminals::_ElseIfStar32 => false,
            ChunkOrExpressionsNonTerminals::_Group33 => false,
            ChunkOrExpressionsNonTerminals::__Group33Question34 => false,
            ChunkOrExpressionsNonTerminals::_Group35 => false,
            ChunkOrExpressionsNonTerminals::__Group35Question36 => false,
            ChunkOrExpressionsNonTerminals::_Group37 => false,
            ChunkOrExpressionsNonTerminals::__Group37Question38 => false,
            ChunkOrExpressionsNonTerminals::_semicolonQuestion39 => false,
            ChunkOrExpressionsNonTerminals::_FieldSepQuestion40 => false,
            ChunkOrExpressionsNonTerminals::_ParListQuestion41 => false,
            ChunkOrExpressionsNonTerminals::_Group42 => false,
            ChunkOrExpressionsNonTerminals::__Group42Question43 => false,
            ChunkOrExpressionsNonTerminals::Augmented => false,
        }
    }
    fn nonterm_type(&self) -> Option<::rusty_lr::nonterminal::NonTerminalType> {
        match self {
            ChunkOrExpressionsNonTerminals::ChunkOrExpressions => None,
            ChunkOrExpressionsNonTerminals::Chunk => None,
            ChunkOrExpressionsNonTerminals::Block => None,
            ChunkOrExpressionsNonTerminals::Statement => None,
            ChunkOrExpressionsNonTerminals::ElseIf => None,
            ChunkOrExpressionsNonTerminals::ReturnStatement => None,
            ChunkOrExpressionsNonTerminals::Var => None,
            ChunkOrExpressionsNonTerminals::PrefixExp => None,
            ChunkOrExpressionsNonTerminals::FunctionCall => None,
            ChunkOrExpressionsNonTerminals::Args => None,
            ChunkOrExpressionsNonTerminals::VarList => None,
            ChunkOrExpressionsNonTerminals::ExpList1 => None,
            ChunkOrExpressionsNonTerminals::ExpList0 => None,
            ChunkOrExpressionsNonTerminals::NameList => None,
            ChunkOrExpressionsNonTerminals::AttName => None,
            ChunkOrExpressionsNonTerminals::AttNameList => None,
            ChunkOrExpressionsNonTerminals::Attrib => None,
            ChunkOrExpressionsNonTerminals::Exp => None,
            ChunkOrExpressionsNonTerminals::TableConstructor => None,
            ChunkOrExpressionsNonTerminals::FieldList1 => None,
            ChunkOrExpressionsNonTerminals::FieldList => None,
            ChunkOrExpressionsNonTerminals::Field => None,
            ChunkOrExpressionsNonTerminals::FieldSep => None,
            ChunkOrExpressionsNonTerminals::FunctionDef => None,
            ChunkOrExpressionsNonTerminals::FuncBody => None,
            ChunkOrExpressionsNonTerminals::FuncName1 => None,
            ChunkOrExpressionsNonTerminals::FuncName => None,
            ChunkOrExpressionsNonTerminals::ParList => None,
            ChunkOrExpressionsNonTerminals::_StatementPlus28 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusLeft)
            }
            ChunkOrExpressionsNonTerminals::_StatementStar29 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Star)
            }
            ChunkOrExpressionsNonTerminals::_ReturnStatementQuestion30 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            ChunkOrExpressionsNonTerminals::_ElseIfPlus31 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::PlusLeft)
            }
            ChunkOrExpressionsNonTerminals::_ElseIfStar32 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Star)
            }
            ChunkOrExpressionsNonTerminals::_Group33 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Group)
            }
            ChunkOrExpressionsNonTerminals::__Group33Question34 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            ChunkOrExpressionsNonTerminals::_Group35 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Group)
            }
            ChunkOrExpressionsNonTerminals::__Group35Question36 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            ChunkOrExpressionsNonTerminals::_Group37 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Group)
            }
            ChunkOrExpressionsNonTerminals::__Group37Question38 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            ChunkOrExpressionsNonTerminals::_semicolonQuestion39 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            ChunkOrExpressionsNonTerminals::_FieldSepQuestion40 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            ChunkOrExpressionsNonTerminals::_ParListQuestion41 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            ChunkOrExpressionsNonTerminals::_Group42 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Group)
            }
            ChunkOrExpressionsNonTerminals::__Group42Question43 => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Optional)
            }
            ChunkOrExpressionsNonTerminals::Augmented => {
                Some(::rusty_lr::nonterminal::NonTerminalType::Augmented)
            }
        }
    }
    fn to_usize(&self) -> usize {
        *self as usize
    }
}
#[doc = r" enum for each non-terminal and terminal symbol, that actually hold data"]
#[allow(unused_braces, unused_parens, non_snake_case, non_camel_case_types)]
#[derive(Clone)]
pub enum ChunkOrExpressionsTokenData {
    Terminals(Token),
    Empty,
    Variant2(ChunkOrExpressions),
    Variant3(statement::Block),
    Variant4(Statement),
    Variant5(statement::StmtElseIf),
    Variant6(statement::ReturnStatement),
    Variant7(Expression),
    Variant8(expression::ExprFunctionCall),
    Variant9(expression::FunctionCallArguments),
    Variant10(Vec<Expression>),
    Variant11(Vec<SpannedString>),
    Variant12(statement::AttName),
    Variant13(Vec<statement::AttName>),
    Variant14(Option<statement::Attrib>),
    Variant15(expression::ExprTable),
    Variant16(Vec<expression::TableField>),
    Variant17(expression::TableField),
    Variant18(expression::ExprFunction),
    Variant19(statement::FunctionName),
    Variant20(expression::ParameterList),
    Variant21(Vec<Statement>),
    Variant22(Option<statement::ReturnStatement>),
    Variant23(Vec<statement::StmtElseIf>),
    Variant24(Option<statement::Block>),
    Variant25(Option<Expression>),
    Variant26(Option<Vec<Expression>>),
    Variant27(Option<Token>),
    Variant28(Option<expression::ParameterList>),
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
impl ChunkOrExpressionsTokenData {
    fn reduce_identity(
        args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        idx: usize,
    ) -> Self {
        let value = args.swap_remove(idx).0;
        args.clear();
        value
    }
    fn reduce_clear(args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>) -> Self {
        args.clear();
        ChunkOrExpressionsTokenData::Empty
    }
    #[doc = "ChunkOrExpressions -> Chunk"]
    #[inline]
    fn reduce_ChunkOrExpressions_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant3(mut Chunk), __rustylr_location_Chunk) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant2({
            ChunkOrExpressions::Chunk(Chunk)
        }))
    }
    #[doc = "ChunkOrExpressions -> ExpList1"]
    #[inline]
    fn reduce_ChunkOrExpressions_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant10(mut ExpList1), __rustylr_location_ExpList1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant2({
            ChunkOrExpressions::Expressions(ExpList1)
        }))
    }
    #[doc = "Block -> Statement* ReturnStatement?"]
    #[inline]
    fn reduce_Block_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant21(mut Statement), __rustylr_location_Statement) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (
            ChunkOrExpressionsTokenData::Variant22(mut ReturnStatement),
            __rustylr_location_ReturnStatement,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant3({
            let span0 = if let Some(first) = Statement.first() {
                first.span()
            } else {
                Span::new_none()
            };
            if let Some(ret) = ReturnStatement {
                let span1 = ret.span();
                let span = span0.merge_ordered(&span1);
                statement::Block::new(Statement, Some(ret), span)
            } else {
                let span1 = if let Some(last) = Statement.last() {
                    last.span()
                } else {
                    Span::new_none()
                };
                let span = span0.merge_ordered(&span1);
                statement::Block::new(Statement, None, span)
            }
        }))
    }
    #[doc = "Statement -> semicolon"]
    #[inline]
    fn reduce_Statement_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut semicolon), __rustylr_location_semicolon) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            Statement::None(statement::StmtNone::new(semicolon.span()))
        }))
    }
    #[doc = "Statement -> VarList equal ExpList1"]
    #[inline]
    fn reduce_Statement_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant10(mut VarList), __rustylr_location_VarList) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut equal), __rustylr_location_equal) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant10(mut ExpList1), __rustylr_location_ExpList1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = VarList
                .first()
                .unwrap()
                .span()
                .merge_ordered(&ExpList1.last().unwrap().span());
            let span_eq = equal.span();
            Statement::Assignment(statement::StmtAssignment::new(
                VarList, ExpList1, span, span_eq,
            ))
        }))
    }
    #[doc = "Statement -> FunctionCall"]
    #[inline]
    fn reduce_Statement_2(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (
            ChunkOrExpressionsTokenData::Variant8(mut FunctionCall),
            __rustylr_location_FunctionCall,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            Statement::FunctionCall(FunctionCall)
        }))
    }
    #[doc = "Statement -> coloncolon ident coloncolon"]
    #[inline]
    fn reduce_Statement_3(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut c1), __rustylr_location_c1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut c2), __rustylr_location_c2) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = c1.span().merge_ordered(&c2.span());
            Statement::Label(statement::StmtLabel::new(ident.into(), span))
        }))
    }
    #[doc = "Statement -> break_"]
    #[inline]
    fn reduce_Statement_4(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut break_), __rustylr_location_break_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            Statement::Break(statement::StmtBreak::new(break_.span()))
        }))
    }
    #[doc = "Statement -> goto_ ident"]
    #[inline]
    fn reduce_Statement_5(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut goto_), __rustylr_location_goto_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = goto_.span().merge_ordered(&ident.span());
            Statement::Goto(statement::StmtGoto::new(ident.into(), span))
        }))
    }
    #[doc = "Statement -> do_ Block end_"]
    #[inline]
    fn reduce_Statement_6(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut do_), __rustylr_location_do_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant3(mut Block), __rustylr_location_Block) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut end_), __rustylr_location_end_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = do_.span().merge_ordered(&end_.span());
            Statement::Do(statement::StmtDo::new(Block, span))
        }))
    }
    #[doc = "Statement -> while_ Exp do_ Block end_"]
    #[inline]
    fn reduce_Statement_7(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut while_), __rustylr_location_while_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut do_), __rustylr_location_do_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant3(mut Block), __rustylr_location_Block) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut end_), __rustylr_location_end_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = while_.span().merge_ordered(&end_.span());
            Statement::While(statement::StmtWhile::new(Exp, Block, span))
        }))
    }
    #[doc = "Statement -> repeat_ Block until_ Exp"]
    #[inline]
    fn reduce_Statement_8(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut repeat_), __rustylr_location_repeat_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant3(mut Block), __rustylr_location_Block) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut until_), __rustylr_location_until_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = repeat_.span().merge_ordered(&Exp.span());
            Statement::Repeat(statement::StmtRepeat::new(Block, Exp, span))
        }))
    }
    #[doc = "Statement -> if_ Exp then_ Block ElseIf* (else_, Block)? end_"]
    #[inline]
    fn reduce_Statement_9(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut if_), __rustylr_location_if_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut then_), __rustylr_location_then_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant3(mut Block), __rustylr_location_Block) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant23(mut elseifs), __rustylr_location_elseifs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant24(mut else_), __rustylr_location_else_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut end_), __rustylr_location_end_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = if_.span().merge_ordered(&end_.span());
            Statement::If(statement::StmtIf::new(Exp, Block, elseifs, else_, span))
        }))
    }
    #[doc = "Statement -> for_ ident equal Exp comma Exp (comma, Exp)? do_ Block end_"]
    #[inline]
    fn reduce_Statement_10(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut for_), __rustylr_location_for_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut equal), __rustylr_location_equal) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut start), __rustylr_location_start) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut comma), __rustylr_location_comma) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut end), __rustylr_location_end) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant25(mut step), __rustylr_location_step) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut do_), __rustylr_location_do_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant3(mut Block), __rustylr_location_Block) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut end_), __rustylr_location_end_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = for_.span().merge_ordered(&end_.span());
            Statement::For(statement::StmtFor::new(
                ident.token_type.into_ident().unwrap(),
                start,
                end,
                step.unwrap_or_else(|| {
                    Expression::Numeric(expression::ExprNumeric::new(1.into(), Span::new_none()))
                }),
                Block,
                span,
            ))
        }))
    }
    #[doc = "Statement -> for_ NameList in_ ExpList1 do_ Block end_"]
    #[inline]
    fn reduce_Statement_11(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut for_), __rustylr_location_for_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant11(mut NameList), __rustylr_location_NameList) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut in_), __rustylr_location_in_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant10(mut ExpList1), __rustylr_location_ExpList1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut do_), __rustylr_location_do_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant3(mut Block), __rustylr_location_Block) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut end_), __rustylr_location_end_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = for_.span().merge_ordered(&end_.span());
            Statement::ForGeneric(statement::StmtForGeneric::new(
                NameList, ExpList1, Block, span,
            ))
        }))
    }
    #[doc = "Statement -> function_ FuncName FuncBody"]
    #[inline]
    fn reduce_Statement_12(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut function_), __rustylr_location_function_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant19(mut FuncName), __rustylr_location_FuncName) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant18(mut FuncBody), __rustylr_location_FuncBody) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = function_.span().merge_ordered(&FuncBody.span());
            Statement::FunctionDefinition(statement::StmtFunctionDefinition::new(
                FuncName, FuncBody, span,
            ))
        }))
    }
    #[doc = "Statement -> local_ function_ ident FuncBody"]
    #[inline]
    fn reduce_Statement_13(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut local_), __rustylr_location_local_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut function_), __rustylr_location_function_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant18(mut FuncBody), __rustylr_location_FuncBody) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span = local_.span().merge_ordered(&FuncBody.span());
            Statement::FunctionDefinitionLocal(statement::StmtFunctionDefinitionLocal::new(
                ident.into(),
                FuncBody,
                span,
            ))
        }))
    }
    #[doc = "Statement -> local_ AttNameList (equal, ExpList1)?"]
    #[inline]
    fn reduce_Statement_14(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut local_), __rustylr_location_local_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (
            ChunkOrExpressionsTokenData::Variant13(mut AttNameList),
            __rustylr_location_AttNameList,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant26(mut rhs_list), __rustylr_location_rhs_list) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant4({
            let span0 = local_.span();
            if let Some(rhs) = rhs_list {
                let span = span0.merge_ordered(&rhs.last().unwrap().span());
                Statement::LocalDeclaration(statement::StmtLocalDeclaration::new(
                    AttNameList,
                    Some(rhs),
                    span,
                ))
            } else {
                let span = AttNameList.last().unwrap().span();
                Statement::LocalDeclaration(statement::StmtLocalDeclaration::new(
                    AttNameList,
                    None,
                    span,
                ))
            }
        }))
    }
    #[doc = "ElseIf -> elseif_ Exp then_ Block"]
    #[inline]
    fn reduce_ElseIf_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut elseif_), __rustylr_location_elseif_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut then_), __rustylr_location_then_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant3(mut Block), __rustylr_location_Block) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant5({
            let span = if Block.span().is_none() {
                elseif_.span().merge_ordered(&then_.span())
            } else {
                elseif_.span().merge_ordered(&Block.span())
            };
            statement::StmtElseIf::new(Exp, Block, span)
        }))
    }
    #[doc = "ReturnStatement -> return_ ExpList0 semicolon?"]
    #[inline]
    fn reduce_ReturnStatement_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut return_), __rustylr_location_return_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant10(mut ExpList0), __rustylr_location_ExpList0) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant27(mut semicolon), __rustylr_location_semicolon) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant6({
            let span0 = return_.span();
            let span = if let Some(last) = semicolon {
                span0.merge_ordered(&last.span())
            } else {
                if let Some(last) = ExpList0.last() {
                    span0.merge_ordered(&last.span())
                } else {
                    span0
                }
            };
            statement::ReturnStatement::new(ExpList0, span)
        }))
    }
    #[doc = "Var -> ident"]
    #[inline]
    fn reduce_Var_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            Expression::Ident(ident.into())
        }))
    }
    #[doc = "Var -> PrefixExp lbracket Exp rbracket"]
    #[inline]
    fn reduce_Var_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut PrefixExp), __rustylr_location_PrefixExp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut lbracket), __rustylr_location_lbracket) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut rbracket), __rustylr_location_rbracket) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            let span = PrefixExp.span().merge_ordered(&rbracket.span());
            Expression::TableIndex(expression::ExprTableIndex::new(PrefixExp, Exp, span))
        }))
    }
    #[doc = "Var -> PrefixExp dot ident"]
    #[inline]
    fn reduce_Var_2(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut PrefixExp), __rustylr_location_PrefixExp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut dot), __rustylr_location_dot) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            let span = PrefixExp.span().merge_ordered(&ident.span());
            let member = expression::ExprString::from(ident);
            Expression::TableIndex(expression::ExprTableIndex::new(
                PrefixExp,
                Expression::String(member),
                span,
            ))
        }))
    }
    #[doc = "PrefixExp -> FunctionCall"]
    #[inline]
    fn reduce_PrefixExp_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (
            ChunkOrExpressionsTokenData::Variant8(mut FunctionCall),
            __rustylr_location_FunctionCall,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            Expression::FunctionCall(FunctionCall)
        }))
    }
    #[doc = "FunctionCall -> PrefixExp Args"]
    #[inline]
    fn reduce_FunctionCall_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut PrefixExp), __rustylr_location_PrefixExp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant9(mut Args), __rustylr_location_Args) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant8({
            let span = PrefixExp.span().merge_ordered(&Args.span());
            expression::ExprFunctionCall::new(PrefixExp, None, Args, span)
        }))
    }
    #[doc = "FunctionCall -> PrefixExp colon ident Args"]
    #[inline]
    fn reduce_FunctionCall_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut PrefixExp), __rustylr_location_PrefixExp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut colon), __rustylr_location_colon) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant9(mut Args), __rustylr_location_Args) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant8({
            let span = PrefixExp.span().merge_ordered(&Args.span());
            expression::ExprFunctionCall::new(PrefixExp, Some(ident.into()), Args, span)
        }))
    }
    #[doc = "Args -> lparen ExpList0 rparen"]
    #[inline]
    fn reduce_Args_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut lparen), __rustylr_location_lparen) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant10(mut ExpList0), __rustylr_location_ExpList0) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut rparen), __rustylr_location_rparen) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant9({
            let span = lparen.span().merge_ordered(&rparen.span());
            expression::FunctionCallArguments::new(ExpList0, span)
        }))
    }
    #[doc = "Args -> TableConstructor"]
    #[inline]
    fn reduce_Args_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (
            ChunkOrExpressionsTokenData::Variant15(mut TableConstructor),
            __rustylr_location_TableConstructor,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant9({
            let span = TableConstructor.span();
            let table_expr = Expression::Table(TableConstructor);
            let exprs = vec![table_expr];
            expression::FunctionCallArguments::new(exprs, span)
        }))
    }
    #[doc = "Args -> string_literal"]
    #[inline]
    fn reduce_Args_2(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (
            ChunkOrExpressionsTokenData::Terminals(mut string_literal),
            __rustylr_location_string_literal,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant9({
            let span = string_literal.span();
            let exprs = vec![Expression::String(string_literal.into())];
            expression::FunctionCallArguments::new(exprs, span)
        }))
    }
    #[doc = "VarList -> VarList comma Var"]
    #[inline]
    fn reduce_VarList_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant10(mut VarList), __rustylr_location_VarList) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut comma), __rustylr_location_comma) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Var), __rustylr_location_Var) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant10({
            VarList.push(Var);
            VarList
        }))
    }
    #[doc = "VarList -> Var"]
    #[inline]
    fn reduce_VarList_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut Var), __rustylr_location_Var) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant10({ vec![Var] }))
    }
    #[doc = "ExpList1 -> ExpList1 comma Exp"]
    #[inline]
    fn reduce_ExpList1_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant10(mut ExpList1), __rustylr_location_ExpList1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut comma), __rustylr_location_comma) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant10({
            ExpList1.push(Exp);
            ExpList1
        }))
    }
    #[doc = "ExpList1 -> Exp"]
    #[inline]
    fn reduce_ExpList1_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant10({ vec![Exp] }))
    }
    #[doc = "ExpList0 -> ExpList1"]
    #[inline]
    fn reduce_ExpList0_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant10(mut ExpList1), __rustylr_location_ExpList1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant10({ ExpList1 }))
    }
    #[doc = "ExpList0 -> "]
    #[inline]
    fn reduce_ExpList0_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant10({ vec![] }))
    }
    #[doc = "NameList -> NameList comma ident"]
    #[inline]
    fn reduce_NameList_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant11(mut NameList), __rustylr_location_NameList) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut comma), __rustylr_location_comma) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant11({
            NameList.push(ident.into());
            NameList
        }))
    }
    #[doc = "NameList -> ident"]
    #[inline]
    fn reduce_NameList_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant11({
            vec![ident.into()]
        }))
    }
    #[doc = "AttName -> ident Attrib"]
    #[inline]
    fn reduce_AttName_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant14(mut Attrib), __rustylr_location_Attrib) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant12({
            let span = ident.span();
            statement::AttName::new(ident.into(), Attrib, span)
        }))
    }
    #[doc = "AttNameList -> AttNameList comma AttName"]
    #[inline]
    fn reduce_AttNameList_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (
            ChunkOrExpressionsTokenData::Variant13(mut AttNameList),
            __rustylr_location_AttNameList,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut comma), __rustylr_location_comma) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant12(mut AttName), __rustylr_location_AttName) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant13({
            AttNameList.push(AttName);
            AttNameList
        }))
    }
    #[doc = "AttNameList -> AttName"]
    #[inline]
    fn reduce_AttNameList_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant12(mut AttName), __rustylr_location_AttName) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant13({ vec![AttName] }))
    }
    #[doc = "Attrib -> less ident greater"]
    #[inline]
    fn reduce_Attrib_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut less), __rustylr_location_less) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut greater), __rustylr_location_greater) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant14({
            let s: SpannedString = ident.into();
            match s.as_str() {
                "const" => Some(statement::Attrib::Const),
                "close" => Some(statement::Attrib::Close),
                _ => {
                    return Err(ParseError::UnknownAttribute(s));
                }
            }
        }))
    }
    #[doc = "Attrib -> "]
    #[inline]
    fn reduce_Attrib_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant14({ None }))
    }
    #[doc = "Exp -> numeric_literal"]
    #[inline]
    fn reduce_Exp_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (
            ChunkOrExpressionsTokenData::Terminals(mut numeric_literal),
            __rustylr_location_numeric_literal,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            Expression::Numeric(numeric_literal.into())
        }))
    }
    #[doc = "Exp -> nil"]
    #[inline]
    fn reduce_Exp_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut nil), __rustylr_location_nil) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            Expression::Nil(nil.into())
        }))
    }
    #[doc = "Exp -> string_literal"]
    #[inline]
    fn reduce_Exp_2(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (
            ChunkOrExpressionsTokenData::Terminals(mut string_literal),
            __rustylr_location_string_literal,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            Expression::String(string_literal.into())
        }))
    }
    #[doc = "Exp -> bool_"]
    #[inline]
    fn reduce_Exp_3(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut bool_), __rustylr_location_bool_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            Expression::Bool(bool_.into())
        }))
    }
    #[doc = "Exp -> dotdotdot"]
    #[inline]
    fn reduce_Exp_4(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut dotdotdot), __rustylr_location_dotdotdot) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            Expression::Variadic(dotdotdot.into())
        }))
    }
    #[doc = "Exp -> FunctionDef"]
    #[inline]
    fn reduce_Exp_5(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (
            ChunkOrExpressionsTokenData::Variant18(mut FunctionDef),
            __rustylr_location_FunctionDef,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            Expression::Function(FunctionDef)
        }))
    }
    #[doc = "Exp -> TableConstructor"]
    #[inline]
    fn reduce_Exp_7(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (
            ChunkOrExpressionsTokenData::Variant15(mut TableConstructor),
            __rustylr_location_TableConstructor,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            Expression::Table(TableConstructor)
        }))
    }
    #[doc = "Exp -> not_ Exp"]
    #[inline]
    fn reduce_Exp_8(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut not_), __rustylr_location_not_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_unary_node!(LogicalNot, not_, Exp)
        }))
    }
    #[doc = "Exp -> hash Exp"]
    #[inline]
    fn reduce_Exp_9(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut hash), __rustylr_location_hash) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_unary_node!(Length, hash, Exp)
        }))
    }
    #[doc = "Exp -> minus Exp"]
    #[inline]
    fn reduce_Exp_10(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut minus), __rustylr_location_minus) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_unary_node!(Minus, minus, Exp)
        }))
    }
    #[doc = "Exp -> plus Exp"]
    #[inline]
    fn reduce_Exp_11(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut plus), __rustylr_location_plus) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_unary_node!(Plus, plus, Exp)
        }))
    }
    #[doc = "Exp -> tilde Exp"]
    #[inline]
    fn reduce_Exp_12(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut tilde), __rustylr_location_tilde) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_unary_node!(BitwiseNot, tilde, Exp)
        }))
    }
    #[doc = "Exp -> Exp asterisk Exp"]
    #[inline]
    fn reduce_Exp_13(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut asterisk), __rustylr_location_asterisk) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(Mul, asterisk, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp slash Exp"]
    #[inline]
    fn reduce_Exp_14(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut slash), __rustylr_location_slash) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(Div, slash, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp slashslash Exp"]
    #[inline]
    fn reduce_Exp_15(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut slashslash), __rustylr_location_slashslash) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(FloorDiv, slashslash, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp percent Exp"]
    #[inline]
    fn reduce_Exp_16(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut percent), __rustylr_location_percent) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(Mod, percent, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp plus Exp"]
    #[inline]
    fn reduce_Exp_17(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut plus), __rustylr_location_plus) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(Add, plus, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp minus Exp"]
    #[inline]
    fn reduce_Exp_18(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut minus), __rustylr_location_minus) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(Sub, minus, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp dotdot Exp"]
    #[inline]
    fn reduce_Exp_19(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut dotdot), __rustylr_location_dotdot) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(Concat, dotdot, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp lessless Exp"]
    #[inline]
    fn reduce_Exp_20(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut lessless), __rustylr_location_lessless) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(ShiftLeft, lessless, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp greatergreater Exp"]
    #[inline]
    fn reduce_Exp_21(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (
            ChunkOrExpressionsTokenData::Terminals(mut greatergreater),
            __rustylr_location_greatergreater,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(ShiftRight, greatergreater, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp ampersand Exp"]
    #[inline]
    fn reduce_Exp_22(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ampersand), __rustylr_location_ampersand) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(BitwiseAnd, ampersand, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp tilde Exp"]
    #[inline]
    fn reduce_Exp_23(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut tilde), __rustylr_location_tilde) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(BitwiseXor, tilde, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp pipe Exp"]
    #[inline]
    fn reduce_Exp_24(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut pipe), __rustylr_location_pipe) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(BitwiseOr, pipe, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp less Exp"]
    #[inline]
    fn reduce_Exp_25(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut less), __rustylr_location_less) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(LessThan, less, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp lessequal Exp"]
    #[inline]
    fn reduce_Exp_26(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut lessequal), __rustylr_location_lessequal) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(LessEqual, lessequal, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp greater Exp"]
    #[inline]
    fn reduce_Exp_27(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut greater), __rustylr_location_greater) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(GreaterThan, greater, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp greaterequal Exp"]
    #[inline]
    fn reduce_Exp_28(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (
            ChunkOrExpressionsTokenData::Terminals(mut greaterequal),
            __rustylr_location_greaterequal,
        ) = __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(GreaterEqual, greaterequal, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp tildeequal Exp"]
    #[inline]
    fn reduce_Exp_29(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut tildeequal), __rustylr_location_tildeequal) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(NotEqual, tildeequal, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp equalequal Exp"]
    #[inline]
    fn reduce_Exp_30(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut equalequal), __rustylr_location_equalequal) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(Equal, equalequal, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp and_ Exp"]
    #[inline]
    fn reduce_Exp_31(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut and_), __rustylr_location_and_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(LogicalAnd, and_, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp or_ Exp"]
    #[inline]
    fn reduce_Exp_32(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut or_), __rustylr_location_or_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(LogicalOr, or_, lhs, rhs)
        }))
    }
    #[doc = "Exp -> Exp caret Exp"]
    #[inline]
    fn reduce_Exp_33(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut lhs), __rustylr_location_lhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut caret), __rustylr_location_caret) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut rhs), __rustylr_location_rhs) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant7({
            new_binary_node!(Pow, caret, lhs, rhs)
        }))
    }
    #[doc = "TableConstructor -> lbrace FieldList rbrace"]
    #[inline]
    fn reduce_TableConstructor_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut lbrace), __rustylr_location_lbrace) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant16(mut FieldList), __rustylr_location_FieldList) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut rbrace), __rustylr_location_rbrace) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant15({
            let span = lbrace.span().merge_ordered(&rbrace.span());
            expression::ExprTable::new(FieldList, span)
        }))
    }
    #[doc = "FieldList1 -> FieldList1 FieldSep Field"]
    #[inline]
    fn reduce_FieldList1_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant16(mut FieldList1), __rustylr_location_FieldList1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (_, __rustylr_location_FieldSep) = __rustylr_args.pop().unwrap();
        let (ChunkOrExpressionsTokenData::Variant17(mut Field), __rustylr_location_Field) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant16({
            FieldList1.push(Field);
            FieldList1
        }))
    }
    #[doc = "FieldList1 -> Field"]
    #[inline]
    fn reduce_FieldList1_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant17(mut Field), __rustylr_location_Field) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant16({ vec![Field] }))
    }
    #[doc = "FieldList -> FieldList1 FieldSep?"]
    #[inline]
    fn reduce_FieldList_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant16(mut FieldList1), __rustylr_location_FieldList1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (_, __rustylr_location_FieldSep) = __rustylr_args.pop().unwrap();
        Ok(ChunkOrExpressionsTokenData::Variant16({ FieldList1 }))
    }
    #[doc = "FieldList -> "]
    #[inline]
    fn reduce_FieldList_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant16({ vec![] }))
    }
    #[doc = "Field -> lbracket Exp rbracket equal Exp"]
    #[inline]
    fn reduce_Field_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut lbracket), __rustylr_location_lbracket) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut k), __rustylr_location_k) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut rbracket), __rustylr_location_rbracket) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut equal), __rustylr_location_equal) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut v), __rustylr_location_v) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant17({
            let span = lbracket.span().merge_ordered(&v.span());
            expression::TableField::KeyValue(expression::TableFieldKeyValue::new(k, v, span))
        }))
    }
    #[doc = "Field -> ident equal Exp"]
    #[inline]
    fn reduce_Field_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut equal), __rustylr_location_equal) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant17({
            let span = ident.span().merge_ordered(&Exp.span());
            expression::TableField::NameValue(expression::TableFieldNameValue::new(
                ident.into(),
                Exp,
                span,
            ))
        }))
    }
    #[doc = "Field -> Exp"]
    #[inline]
    fn reduce_Field_2(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut Exp), __rustylr_location_Exp) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant17({
            expression::TableField::Value(expression::TableFieldValue::new(Exp))
        }))
    }
    #[doc = "FunctionDef -> function_ FuncBody"]
    #[inline]
    fn reduce_FunctionDef_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut function_), __rustylr_location_function_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant18(mut FuncBody), __rustylr_location_FuncBody) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant18({
            let span = function_.span().merge_ordered(&FuncBody.span());
            FuncBody.span = span;
            FuncBody
        }))
    }
    #[doc = "FuncBody -> lparen ParList? rparen Block end_"]
    #[inline]
    fn reduce_FuncBody_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut lparen), __rustylr_location_lparen) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant28(mut ParList), __rustylr_location_ParList) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut rparen), __rustylr_location_rparen) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant3(mut Block), __rustylr_location_Block) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut end_), __rustylr_location_end_) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant18({
            let span = lparen.span().merge_ordered(&end_.span());
            expression::ExprFunction::new(ParList, Block, span)
        }))
    }
    #[doc = "FuncName1 -> FuncName1 dot ident"]
    #[inline]
    fn reduce_FuncName1_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant11(mut FuncName1), __rustylr_location_FuncName1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut dot), __rustylr_location_dot) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant11({
            FuncName1.push(ident.into());
            FuncName1
        }))
    }
    #[doc = "FuncName1 -> ident"]
    #[inline]
    fn reduce_FuncName1_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant11({
            vec![ident.into()]
        }))
    }
    #[doc = "FuncName -> FuncName1 colon ident"]
    #[inline]
    fn reduce_FuncName_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant11(mut FuncName1), __rustylr_location_FuncName1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut colon), __rustylr_location_colon) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Terminals(mut ident), __rustylr_location_ident) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant19({
            let span = FuncName1
                .first()
                .unwrap()
                .span()
                .merge_ordered(&ident.span());
            statement::FunctionName::new(FuncName1, Some(ident.into()), span)
        }))
    }
    #[doc = "FuncName -> FuncName1"]
    #[inline]
    fn reduce_FuncName_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant11(mut FuncName1), __rustylr_location_FuncName1) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant19({
            let span = FuncName1
                .first()
                .unwrap()
                .span()
                .merge_ordered(&FuncName1.last().unwrap().span());
            statement::FunctionName::new(FuncName1, None, span)
        }))
    }
    #[doc = "ParList -> NameList (comma, dotdotdot)?"]
    #[inline]
    fn reduce_ParList_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant11(mut NameList), __rustylr_location_NameList) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant27(mut var), __rustylr_location_var) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant20({
            if let Some(var) = var {
                let span = NameList.first().unwrap().span().merge_ordered(&var.span());
                expression::ParameterList::new(NameList, true, span)
            } else {
                let span = NameList.first().unwrap().span();
                expression::ParameterList::new(NameList, false, span)
            }
        }))
    }
    #[doc = "ParList -> dotdotdot"]
    #[inline]
    fn reduce_ParList_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut dotdotdot), __rustylr_location_dotdotdot) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant20({
            expression::ParameterList::new(Vec::new(), true, dotdotdot.span())
        }))
    }
    #[doc = "Statement+ -> Statement"]
    #[inline]
    fn reduce__StatementPlus28_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant4(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant21({ vec![A] }))
    }
    #[doc = "Statement+ -> Statement+ Statement"]
    #[inline]
    fn reduce__StatementPlus28_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant21(mut Ap), __rustylr_location_Ap) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant4(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant21({
            Ap.push(A);
            Ap
        }))
    }
    #[doc = "Statement* -> "]
    #[inline]
    fn reduce__StatementStar29_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant21({ vec![] }))
    }
    #[doc = "ReturnStatement? -> ReturnStatement"]
    #[inline]
    fn reduce__ReturnStatementQuestion30_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant6(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant22(Some(A)))
    }
    #[doc = "ReturnStatement? -> "]
    #[inline]
    fn reduce__ReturnStatementQuestion30_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant22({ None }))
    }
    #[doc = "ElseIf+ -> ElseIf"]
    #[inline]
    fn reduce__ElseIfPlus31_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant5(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant23({ vec![A] }))
    }
    #[doc = "ElseIf+ -> ElseIf+ ElseIf"]
    #[inline]
    fn reduce__ElseIfPlus31_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant23(mut Ap), __rustylr_location_Ap) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        let (ChunkOrExpressionsTokenData::Variant5(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant23({
            Ap.push(A);
            Ap
        }))
    }
    #[doc = "ElseIf* -> "]
    #[inline]
    fn reduce__ElseIfStar32_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant23({ vec![] }))
    }
    #[doc = "(else_, Block)? -> (else_, Block)"]
    #[inline]
    fn reduce___Group33Question34_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant3(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant24(Some(A)))
    }
    #[doc = "(else_, Block)? -> "]
    #[inline]
    fn reduce___Group33Question34_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant24({ None }))
    }
    #[doc = "(comma, Exp)? -> (comma, Exp)"]
    #[inline]
    fn reduce___Group35Question36_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant7(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant25(Some(A)))
    }
    #[doc = "(comma, Exp)? -> "]
    #[inline]
    fn reduce___Group35Question36_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant25({ None }))
    }
    #[doc = "(equal, ExpList1)? -> (equal, ExpList1)"]
    #[inline]
    fn reduce___Group37Question38_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant10(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant26(Some(A)))
    }
    #[doc = "(equal, ExpList1)? -> "]
    #[inline]
    fn reduce___Group37Question38_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant26({ None }))
    }
    #[doc = "semicolon? -> semicolon"]
    #[inline]
    fn reduce__semicolonQuestion39_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant27(Some(A)))
    }
    #[doc = "semicolon? -> "]
    #[inline]
    fn reduce__semicolonQuestion39_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant27({ None }))
    }
    #[doc = "ParList? -> ParList"]
    #[inline]
    fn reduce__ParListQuestion41_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Variant20(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant28(Some(A)))
    }
    #[doc = "ParList? -> "]
    #[inline]
    fn reduce__ParListQuestion41_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant28({ None }))
    }
    #[doc = "(comma, dotdotdot)? -> (comma, dotdotdot)"]
    #[inline]
    fn reduce___Group42Question43_0(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        let (ChunkOrExpressionsTokenData::Terminals(mut A), __rustylr_location_A) =
            __rustylr_args.pop().unwrap()
        else {
            unreachable!()
        };
        Ok(ChunkOrExpressionsTokenData::Variant27(Some(A)))
    }
    #[doc = "(comma, dotdotdot)? -> "]
    #[inline]
    fn reduce___Group42Question43_1(
        __rustylr_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Token>,
        data: &mut (),
        __rustylr_location0: &mut ::rusty_lr::DefaultLocation,
    ) -> Result<ChunkOrExpressionsTokenData, ParseError> {
        Ok(ChunkOrExpressionsTokenData::Variant27({ None }))
    }
}
#[allow(
    unused_braces,
    unused_parens,
    non_snake_case,
    non_camel_case_types,
    unused_variables
)]
impl ::rusty_lr::nonterminal::TokenData for ChunkOrExpressionsTokenData {
    type Term = Token;
    type NonTerm = ChunkOrExpressionsNonTerminals;
    type ReduceActionError = ParseError;
    type UserData = ();
    type StartType = ChunkOrExpressions;
    type Location = ::rusty_lr::DefaultLocation;
    fn reduce_action(
        rule_index: usize,
        reduce_args: &mut ::rusty_lr::nonterminal::ReduceArgsStack<Self>,
        shift: &mut bool,
        lookahead: &::rusty_lr::TerminalSymbol<Self::Term>,
        user_data: &mut Self::UserData,
        location0: &mut Self::Location,
    ) -> Result<Self, Self::ReduceActionError> {
        match rule_index {
            0usize => Self::reduce_ChunkOrExpressions_0(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            1usize => Self::reduce_ChunkOrExpressions_1(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            2usize => Self::reduce_Block_0(reduce_args, shift, lookahead, user_data, location0),
            3usize => Self::reduce_Statement_0(reduce_args, shift, lookahead, user_data, location0),
            4usize => Self::reduce_Statement_1(reduce_args, shift, lookahead, user_data, location0),
            5usize => Self::reduce_Statement_2(reduce_args, shift, lookahead, user_data, location0),
            6usize => Self::reduce_Statement_3(reduce_args, shift, lookahead, user_data, location0),
            7usize => Self::reduce_Statement_4(reduce_args, shift, lookahead, user_data, location0),
            8usize => Self::reduce_Statement_5(reduce_args, shift, lookahead, user_data, location0),
            9usize => Self::reduce_Statement_6(reduce_args, shift, lookahead, user_data, location0),
            10usize => {
                Self::reduce_Statement_7(reduce_args, shift, lookahead, user_data, location0)
            }
            11usize => {
                Self::reduce_Statement_8(reduce_args, shift, lookahead, user_data, location0)
            }
            12usize => {
                Self::reduce_Statement_9(reduce_args, shift, lookahead, user_data, location0)
            }
            13usize => {
                Self::reduce_Statement_10(reduce_args, shift, lookahead, user_data, location0)
            }
            14usize => {
                Self::reduce_Statement_11(reduce_args, shift, lookahead, user_data, location0)
            }
            15usize => {
                Self::reduce_Statement_12(reduce_args, shift, lookahead, user_data, location0)
            }
            16usize => {
                Self::reduce_Statement_13(reduce_args, shift, lookahead, user_data, location0)
            }
            17usize => {
                Self::reduce_Statement_14(reduce_args, shift, lookahead, user_data, location0)
            }
            18usize => Self::reduce_ElseIf_0(reduce_args, shift, lookahead, user_data, location0),
            19usize => {
                Self::reduce_ReturnStatement_0(reduce_args, shift, lookahead, user_data, location0)
            }
            20usize => Self::reduce_Var_0(reduce_args, shift, lookahead, user_data, location0),
            21usize => Self::reduce_Var_1(reduce_args, shift, lookahead, user_data, location0),
            22usize => Self::reduce_Var_2(reduce_args, shift, lookahead, user_data, location0),
            23usize => {
                Self::reduce_PrefixExp_1(reduce_args, shift, lookahead, user_data, location0)
            }
            24usize => {
                Self::reduce_FunctionCall_0(reduce_args, shift, lookahead, user_data, location0)
            }
            25usize => {
                Self::reduce_FunctionCall_1(reduce_args, shift, lookahead, user_data, location0)
            }
            26usize => Self::reduce_Args_0(reduce_args, shift, lookahead, user_data, location0),
            27usize => Self::reduce_Args_1(reduce_args, shift, lookahead, user_data, location0),
            28usize => Self::reduce_Args_2(reduce_args, shift, lookahead, user_data, location0),
            29usize => Self::reduce_VarList_0(reduce_args, shift, lookahead, user_data, location0),
            30usize => Self::reduce_VarList_1(reduce_args, shift, lookahead, user_data, location0),
            31usize => Self::reduce_ExpList1_0(reduce_args, shift, lookahead, user_data, location0),
            32usize => Self::reduce_ExpList1_1(reduce_args, shift, lookahead, user_data, location0),
            33usize => Self::reduce_ExpList0_0(reduce_args, shift, lookahead, user_data, location0),
            34usize => Self::reduce_ExpList0_1(reduce_args, shift, lookahead, user_data, location0),
            35usize => Self::reduce_NameList_0(reduce_args, shift, lookahead, user_data, location0),
            36usize => Self::reduce_NameList_1(reduce_args, shift, lookahead, user_data, location0),
            37usize => Self::reduce_AttName_0(reduce_args, shift, lookahead, user_data, location0),
            38usize => {
                Self::reduce_AttNameList_0(reduce_args, shift, lookahead, user_data, location0)
            }
            39usize => {
                Self::reduce_AttNameList_1(reduce_args, shift, lookahead, user_data, location0)
            }
            40usize => Self::reduce_Attrib_0(reduce_args, shift, lookahead, user_data, location0),
            41usize => Self::reduce_Attrib_1(reduce_args, shift, lookahead, user_data, location0),
            42usize => Self::reduce_Exp_0(reduce_args, shift, lookahead, user_data, location0),
            43usize => Self::reduce_Exp_1(reduce_args, shift, lookahead, user_data, location0),
            44usize => Self::reduce_Exp_2(reduce_args, shift, lookahead, user_data, location0),
            45usize => Self::reduce_Exp_3(reduce_args, shift, lookahead, user_data, location0),
            46usize => Self::reduce_Exp_4(reduce_args, shift, lookahead, user_data, location0),
            47usize => Self::reduce_Exp_5(reduce_args, shift, lookahead, user_data, location0),
            48usize => Self::reduce_Exp_7(reduce_args, shift, lookahead, user_data, location0),
            49usize => Self::reduce_Exp_8(reduce_args, shift, lookahead, user_data, location0),
            50usize => Self::reduce_Exp_9(reduce_args, shift, lookahead, user_data, location0),
            51usize => Self::reduce_Exp_10(reduce_args, shift, lookahead, user_data, location0),
            52usize => Self::reduce_Exp_11(reduce_args, shift, lookahead, user_data, location0),
            53usize => Self::reduce_Exp_12(reduce_args, shift, lookahead, user_data, location0),
            54usize => Self::reduce_Exp_13(reduce_args, shift, lookahead, user_data, location0),
            55usize => Self::reduce_Exp_14(reduce_args, shift, lookahead, user_data, location0),
            56usize => Self::reduce_Exp_15(reduce_args, shift, lookahead, user_data, location0),
            57usize => Self::reduce_Exp_16(reduce_args, shift, lookahead, user_data, location0),
            58usize => Self::reduce_Exp_17(reduce_args, shift, lookahead, user_data, location0),
            59usize => Self::reduce_Exp_18(reduce_args, shift, lookahead, user_data, location0),
            60usize => Self::reduce_Exp_19(reduce_args, shift, lookahead, user_data, location0),
            61usize => Self::reduce_Exp_20(reduce_args, shift, lookahead, user_data, location0),
            62usize => Self::reduce_Exp_21(reduce_args, shift, lookahead, user_data, location0),
            63usize => Self::reduce_Exp_22(reduce_args, shift, lookahead, user_data, location0),
            64usize => Self::reduce_Exp_23(reduce_args, shift, lookahead, user_data, location0),
            65usize => Self::reduce_Exp_24(reduce_args, shift, lookahead, user_data, location0),
            66usize => Self::reduce_Exp_25(reduce_args, shift, lookahead, user_data, location0),
            67usize => Self::reduce_Exp_26(reduce_args, shift, lookahead, user_data, location0),
            68usize => Self::reduce_Exp_27(reduce_args, shift, lookahead, user_data, location0),
            69usize => Self::reduce_Exp_28(reduce_args, shift, lookahead, user_data, location0),
            70usize => Self::reduce_Exp_29(reduce_args, shift, lookahead, user_data, location0),
            71usize => Self::reduce_Exp_30(reduce_args, shift, lookahead, user_data, location0),
            72usize => Self::reduce_Exp_31(reduce_args, shift, lookahead, user_data, location0),
            73usize => Self::reduce_Exp_32(reduce_args, shift, lookahead, user_data, location0),
            74usize => Self::reduce_Exp_33(reduce_args, shift, lookahead, user_data, location0),
            75usize => {
                Self::reduce_TableConstructor_0(reduce_args, shift, lookahead, user_data, location0)
            }
            76usize => {
                Self::reduce_FieldList1_0(reduce_args, shift, lookahead, user_data, location0)
            }
            77usize => {
                Self::reduce_FieldList1_1(reduce_args, shift, lookahead, user_data, location0)
            }
            78usize => {
                Self::reduce_FieldList_0(reduce_args, shift, lookahead, user_data, location0)
            }
            79usize => {
                Self::reduce_FieldList_1(reduce_args, shift, lookahead, user_data, location0)
            }
            80usize => Self::reduce_Field_0(reduce_args, shift, lookahead, user_data, location0),
            81usize => Self::reduce_Field_1(reduce_args, shift, lookahead, user_data, location0),
            82usize => Self::reduce_Field_2(reduce_args, shift, lookahead, user_data, location0),
            83usize => {
                Self::reduce_FunctionDef_0(reduce_args, shift, lookahead, user_data, location0)
            }
            84usize => Self::reduce_FuncBody_0(reduce_args, shift, lookahead, user_data, location0),
            85usize => {
                Self::reduce_FuncName1_0(reduce_args, shift, lookahead, user_data, location0)
            }
            86usize => {
                Self::reduce_FuncName1_1(reduce_args, shift, lookahead, user_data, location0)
            }
            87usize => Self::reduce_FuncName_0(reduce_args, shift, lookahead, user_data, location0),
            88usize => Self::reduce_FuncName_1(reduce_args, shift, lookahead, user_data, location0),
            89usize => Self::reduce_ParList_0(reduce_args, shift, lookahead, user_data, location0),
            90usize => Self::reduce_ParList_1(reduce_args, shift, lookahead, user_data, location0),
            91usize => {
                Self::reduce__StatementPlus28_0(reduce_args, shift, lookahead, user_data, location0)
            }
            92usize => {
                Self::reduce__StatementPlus28_1(reduce_args, shift, lookahead, user_data, location0)
            }
            93usize => {
                Self::reduce__StatementStar29_1(reduce_args, shift, lookahead, user_data, location0)
            }
            94usize => Self::reduce__ReturnStatementQuestion30_0(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            95usize => Self::reduce__ReturnStatementQuestion30_1(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            96usize => {
                Self::reduce__ElseIfPlus31_0(reduce_args, shift, lookahead, user_data, location0)
            }
            97usize => {
                Self::reduce__ElseIfPlus31_1(reduce_args, shift, lookahead, user_data, location0)
            }
            98usize => {
                Self::reduce__ElseIfStar32_1(reduce_args, shift, lookahead, user_data, location0)
            }
            99usize => Self::reduce___Group33Question34_0(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            100usize => Self::reduce___Group33Question34_1(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            101usize => Self::reduce___Group35Question36_0(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            102usize => Self::reduce___Group35Question36_1(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            103usize => Self::reduce___Group37Question38_0(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            104usize => Self::reduce___Group37Question38_1(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            105usize => Self::reduce__semicolonQuestion39_0(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            106usize => Self::reduce__semicolonQuestion39_1(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            107usize => Self::reduce__ParListQuestion41_0(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            108usize => Self::reduce__ParListQuestion41_1(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            109usize => Self::reduce___Group42Question43_0(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            110usize => Self::reduce___Group42Question43_1(
                reduce_args,
                shift,
                lookahead,
                user_data,
                location0,
            ),
            111usize..=119usize => Ok(Self::reduce_identity(reduce_args, 0usize)),
            120usize => Ok(Self::reduce_identity(reduce_args, 1usize)),
            121usize..=125usize => Ok(Self::reduce_clear(reduce_args)),
            _ => {
                unreachable!("Invalid Rule: {}", rule_index);
            }
        }
    }
    fn new_error() -> Self {
        ChunkOrExpressionsTokenData::Empty
    }
    fn new_terminal(term: Token) -> Self {
        ChunkOrExpressionsTokenData::Terminals(term)
    }
}
#[allow(
    unused_braces,
    unused_parens,
    non_snake_case,
    non_camel_case_types,
    unused_variables
)]
impl TryFrom<ChunkOrExpressionsTokenData> for ChunkOrExpressions {
    type Error = ();
    fn try_from(token: ChunkOrExpressionsTokenData) -> Result<Self, Self::Error> {
        match token {
            ChunkOrExpressionsTokenData::Variant2(data) => Ok(data),
            _ => Err(()),
        }
    }
}
#[doc = r" A struct that holds the entire parser table and production rules."]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct ChunkOrExpressionsParser {
    #[doc = r" production rules"]
    pub rules: Vec<ChunkOrExpressionsRule>,
    #[doc = r" states"]
    pub states: Vec<ChunkOrExpressionsState>,
    #[doc = r" terminal classes"]
    pub classes: Vec<Vec<&'static str>>,
}
impl ::rusty_lr::parser::Parser for ChunkOrExpressionsParser {
    type Term = Token;
    type NonTerm = ChunkOrExpressionsNonTerminals;
    type State = ChunkOrExpressionsState;
    type TerminalClassElement = &'static str;
    const ERROR_USED: bool = false;
    fn class_precedence(
        &self,
        class: ::rusty_lr::TerminalSymbol<usize>,
    ) -> ::rusty_lr::parser::Precedence {
        match class {
            ::rusty_lr::TerminalSymbol::Term(class) =>
            {
                #[allow(unreachable_patterns)]
                match class {
                    51 => ::rusty_lr::parser::Precedence::new(0),
                    38 => ::rusty_lr::parser::Precedence::new(1),
                    18..=23 => ::rusty_lr::parser::Precedence::new(2),
                    14 => ::rusty_lr::parser::Precedence::new(3),
                    13 => ::rusty_lr::parser::Precedence::new(4),
                    12 => ::rusty_lr::parser::Precedence::new(5),
                    15..=16 => ::rusty_lr::parser::Precedence::new(6),
                    36 => ::rusty_lr::parser::Precedence::new(7),
                    5..=6 => ::rusty_lr::parser::Precedence::new(8),
                    7..=9 | 17 => ::rusty_lr::parser::Precedence::new(9),
                    10 => ::rusty_lr::parser::Precedence::new(10),
                    _ => ::rusty_lr::parser::Precedence::none(),
                }
            }
            ::rusty_lr::TerminalSymbol::Error => ::rusty_lr::parser::Precedence::none(),
            ::rusty_lr::TerminalSymbol::Eof => {
                unreachable!("eof token cannot be used in precedence levels")
            }
        }
    }
    fn precedence_types(&self, level: u8) -> Option<::rusty_lr::builder::ReduceType> {
        #[allow(unreachable_patterns)]
        match level {
            0..=6 | 8..=9 => Some(::rusty_lr::builder::ReduceType::Left),
            7 | 10 => Some(::rusty_lr::builder::ReduceType::Right),
            _ => None,
        }
    }
    fn get_rules(&self) -> &[ChunkOrExpressionsRule] {
        &self.rules
    }
    fn get_states(&self) -> &[ChunkOrExpressionsState] {
        &self.states
    }
    fn get_terminals(
        &self,
        i: usize,
    ) -> Option<impl IntoIterator<Item = Self::TerminalClassElement> + '_> {
        self.classes.get(i).map(|class| class.iter().copied())
    }
    fn to_terminal_class(&self, terminal: &Self::Term) -> usize {
        #[allow(unreachable_patterns)]
        match filter(terminal) {
            TokenType::Ident(_) => 0,
            TokenType::String(_) => 1,
            TokenType::Numeric(_) => 2,
            TokenType::Nil => 3,
            TokenType::Bool(_) => 4,
            TokenType::Plus => 5,
            TokenType::Minus => 6,
            TokenType::Asterisk => 7,
            TokenType::Slash => 8,
            TokenType::Percent => 9,
            TokenType::Caret => 10,
            TokenType::Hash => 11,
            TokenType::Ampersand => 12,
            TokenType::Tilde => 13,
            TokenType::Pipe => 14,
            TokenType::LessLess => 15,
            TokenType::GreaterGreater => 16,
            TokenType::SlashSlash => 17,
            TokenType::EqualEqual => 18,
            TokenType::TildeEqual => 19,
            TokenType::LessEqual => 20,
            TokenType::GreaterEqual => 21,
            TokenType::Less => 22,
            TokenType::Greater => 23,
            TokenType::Equal => 24,
            TokenType::LParen => 25,
            TokenType::RParen => 26,
            TokenType::LBrace => 27,
            TokenType::RBrace => 28,
            TokenType::LBracket => 29,
            TokenType::RBracket => 30,
            TokenType::ColonColon => 31,
            TokenType::Semicolon => 32,
            TokenType::Colon => 33,
            TokenType::Comma => 34,
            TokenType::Dot => 35,
            TokenType::DotDot => 36,
            TokenType::DotDotDot => 37,
            TokenType::And => 38,
            TokenType::Break => 39,
            TokenType::Do => 40,
            TokenType::Else => 41,
            TokenType::Elseif => 42,
            TokenType::End => 43,
            TokenType::For => 44,
            TokenType::Function => 45,
            TokenType::Goto => 46,
            TokenType::If => 47,
            TokenType::In => 48,
            TokenType::Local => 49,
            TokenType::Not => 50,
            TokenType::Or => 51,
            TokenType::Repeat => 52,
            TokenType::Return => 53,
            TokenType::Then => 54,
            TokenType::Until => 55,
            TokenType::While => 56,
            _ => 57,
        }
    }
}
#[doc = r" A struct that holds the whole parser table."]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl ChunkOrExpressionsParser {
    #[doc = r" Calculates the states and parser tables from the grammar."]
    #[allow(clippy::clone_on_copy)]
    pub fn new() -> Self {
        let rules: Vec<::rusty_lr::rule::ProductionRule<::rusty_lr::TerminalSymbol<u8>, _>> = vec![
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::ChunkOrExpressions,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::Chunk,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::ChunkOrExpressions,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::ExpList1,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Block,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::_StatementStar29),
                    ::rusty_lr::Token::NonTerm(
                        ChunkOrExpressionsNonTerminals::_ReturnStatementQuestion30,
                    ),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(
                    32,
                ))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::VarList),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::ExpList1),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::FunctionCall,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(31)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(31)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(
                    39,
                ))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(46)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(40)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Block),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(43)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(56)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(40)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Block),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(43)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(52)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Block),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(55)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(47)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(54)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Block),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::_ElseIfStar32),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::__Group33Question34),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(43)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(44)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(34)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::__Group35Question36),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(40)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Block),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(43)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(44)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::NameList),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(48)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::ExpList1),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(40)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Block),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(43)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(45)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::FuncName),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::FuncBody),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(49)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(45)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::FuncBody),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Statement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(49)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::AttNameList),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::__Group37Question38),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::ElseIf,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(42)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(54)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Block),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::ReturnStatement,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(53)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::ExpList0),
                    ::rusty_lr::Token::NonTerm(
                        ChunkOrExpressionsNonTerminals::_semicolonQuestion39,
                    ),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Var,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Var,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::PrefixExp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(29)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(30)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Var,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::PrefixExp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(35)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::PrefixExp,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::FunctionCall,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FunctionCall,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::PrefixExp),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Args),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FunctionCall,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::PrefixExp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(33)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Args),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Args,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(25)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::ExpList0),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(26)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Args,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::TableConstructor,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Args,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::VarList,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::VarList),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(34)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Var),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::VarList,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::Var,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::ExpList1,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::ExpList1),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(34)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::ExpList1,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::Exp,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::ExpList0,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::ExpList1,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::ExpList0,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::NameList,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::NameList),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(34)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::NameList,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::AttName,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Attrib),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::AttNameList,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::AttNameList),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(34)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::AttName),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::AttNameList,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::AttName,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Attrib,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(22)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(23)),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(2usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Attrib,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(2))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(3))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(1))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(4))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(
                    37,
                ))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::FunctionDef,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::TableConstructor,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(50)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(11usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(11)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(11usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(6)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(11usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(5)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(11usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(13)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(11usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(7)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(9usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(8)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(9usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(17)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(9usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(9)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(9usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(5)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(8usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(6)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(8usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(36)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(7usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(15)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(6usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(16)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(6usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(12)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(5usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(13)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(4usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(14)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(3usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(22)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(2usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(20)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(2usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(23)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(2usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(21)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(2usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(19)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(2usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(18)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(2usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(38)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(1usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(51)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(0usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(10)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(10usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::TableConstructor,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(27)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::FieldList),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(28)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FieldList1,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::FieldList1),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::FieldSep),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Field),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FieldList1,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::Field,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FieldList,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::FieldList1),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::_FieldSepQuestion40),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FieldList,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Field,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(29)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(30)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Field,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Field,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::Exp,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FunctionDef,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(45)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::FuncBody),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FuncBody,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(25)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::_ParListQuestion41),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(26)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Block),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(43)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FuncName1,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::FuncName1),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(35)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FuncName1,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FuncName,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::FuncName1),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(33)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(0)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FuncName,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::FuncName1,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::ParList,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::NameList),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::__Group42Question43),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::ParList,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(
                    37,
                ))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_StatementPlus28,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::Statement,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_StatementPlus28,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::_StatementPlus28),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Statement),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_StatementStar29,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_ReturnStatementQuestion30,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::ReturnStatement,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_ReturnStatementQuestion30,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_ElseIfPlus31,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::ElseIf,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_ElseIfPlus31,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::_ElseIfPlus31),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::ElseIf),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_ElseIfStar32,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::__Group33Question34,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::_Group33,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::__Group33Question34,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::__Group35Question36,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::_Group35,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::__Group35Question36,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::__Group37Question38,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::_Group37,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::__Group37Question38,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_semicolonQuestion39,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(
                    32,
                ))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_semicolonQuestion39,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_ParListQuestion41,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::ParList,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_ParListQuestion41,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::__Group42Question43,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::_Group42,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::__Group42Question43,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Chunk,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::Block,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::PrefixExp,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::Var,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Exp,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::PrefixExp,
                )],
                precedence: Some(::rusty_lr::rule::Precedence::Fixed(12usize)),
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_StatementStar29,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::_StatementPlus28,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_ElseIfStar32,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::_ElseIfPlus31,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_Group33,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(41)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Block),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_Group35,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(34)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_Group37,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(24)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::ExpList1),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_Group42,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(34)),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(37)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::PrefixExp,
                rule: vec![
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(25)),
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::Exp),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(26)),
                ],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FieldSep,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(
                    34,
                ))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::FieldSep,
                rule: vec![::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Term(
                    32,
                ))],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_FieldSepQuestion40,
                rule: vec![::rusty_lr::Token::NonTerm(
                    ChunkOrExpressionsNonTerminals::FieldSep,
                )],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::_FieldSepQuestion40,
                rule: vec![],
                precedence: None,
            },
            ::rusty_lr::rule::ProductionRule {
                name: ChunkOrExpressionsNonTerminals::Augmented,
                rule: vec![
                    ::rusty_lr::Token::NonTerm(ChunkOrExpressionsNonTerminals::ChunkOrExpressions),
                    ::rusty_lr::Token::Term(::rusty_lr::TerminalSymbol::Eof),
                ],
                precedence: None,
            },
        ];
        let terminal_class_names = vec![
            "ident",
            "string_literal",
            "numeric_literal",
            "nil",
            "bool_",
            "plus",
            "minus",
            "asterisk",
            "slash",
            "percent",
            "caret",
            "hash",
            "ampersand",
            "tilde",
            "pipe",
            "lessless",
            "greatergreater",
            "slashslash",
            "equalequal",
            "tildeequal",
            "lessequal",
            "greaterequal",
            "less",
            "greater",
            "equal",
            "lparen",
            "rparen",
            "lbrace",
            "rbrace",
            "lbracket",
            "rbracket",
            "coloncolon",
            "semicolon",
            "colon",
            "comma",
            "dot",
            "dotdot",
            "dotdotdot",
            "and_",
            "break_",
            "do_",
            "else_",
            "elseif_",
            "end_",
            "for_",
            "function_",
            "goto_",
            "if_",
            "in_",
            "local_",
            "not_",
            "or_",
            "repeat_",
            "return_",
            "then_",
            "until_",
            "while_",
            "<Others>",
        ];
        let rules = rules
            .into_iter()
            .map(move |rule| {
                rule.map(
                    |term| match term {
                        ::rusty_lr::TerminalSymbol::Term(term) => {
                            terminal_class_names[term as usize]
                        }
                        ::rusty_lr::TerminalSymbol::Error => "error",
                        ::rusty_lr::TerminalSymbol::Eof => "eof",
                    },
                    |nonterm| nonterm,
                )
            })
            .collect();
        let __rustylr_tset24: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(1),
                ::rusty_lr::TerminalSymbol::Term(2),
                ::rusty_lr::TerminalSymbol::Term(3),
                ::rusty_lr::TerminalSymbol::Term(4),
                ::rusty_lr::TerminalSymbol::Term(5),
                ::rusty_lr::TerminalSymbol::Term(6),
                ::rusty_lr::TerminalSymbol::Term(11),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(27),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(29),
                ::rusty_lr::TerminalSymbol::Term(37),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(50),
            ]);
        let __rustylr_tset1: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(1),
                ::rusty_lr::TerminalSymbol::Term(5),
                ::rusty_lr::TerminalSymbol::Term(6),
                ::rusty_lr::TerminalSymbol::Term(7),
                ::rusty_lr::TerminalSymbol::Term(8),
                ::rusty_lr::TerminalSymbol::Term(9),
                ::rusty_lr::TerminalSymbol::Term(10),
                ::rusty_lr::TerminalSymbol::Term(12),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(15),
                ::rusty_lr::TerminalSymbol::Term(16),
                ::rusty_lr::TerminalSymbol::Term(17),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(24),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(27),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(29),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(33),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(35),
                ::rusty_lr::TerminalSymbol::Term(36),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset9: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(1),
                ::rusty_lr::TerminalSymbol::Term(5),
                ::rusty_lr::TerminalSymbol::Term(6),
                ::rusty_lr::TerminalSymbol::Term(7),
                ::rusty_lr::TerminalSymbol::Term(8),
                ::rusty_lr::TerminalSymbol::Term(9),
                ::rusty_lr::TerminalSymbol::Term(10),
                ::rusty_lr::TerminalSymbol::Term(12),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(15),
                ::rusty_lr::TerminalSymbol::Term(16),
                ::rusty_lr::TerminalSymbol::Term(17),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(27),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(29),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(33),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(35),
                ::rusty_lr::TerminalSymbol::Term(36),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset2: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(5),
                ::rusty_lr::TerminalSymbol::Term(6),
                ::rusty_lr::TerminalSymbol::Term(7),
                ::rusty_lr::TerminalSymbol::Term(8),
                ::rusty_lr::TerminalSymbol::Term(9),
                ::rusty_lr::TerminalSymbol::Term(10),
                ::rusty_lr::TerminalSymbol::Term(12),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(15),
                ::rusty_lr::TerminalSymbol::Term(16),
                ::rusty_lr::TerminalSymbol::Term(17),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(36),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset11: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(5),
                ::rusty_lr::TerminalSymbol::Term(6),
                ::rusty_lr::TerminalSymbol::Term(7),
                ::rusty_lr::TerminalSymbol::Term(8),
                ::rusty_lr::TerminalSymbol::Term(9),
                ::rusty_lr::TerminalSymbol::Term(12),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(15),
                ::rusty_lr::TerminalSymbol::Term(16),
                ::rusty_lr::TerminalSymbol::Term(17),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(36),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset10: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(5),
                ::rusty_lr::TerminalSymbol::Term(6),
                ::rusty_lr::TerminalSymbol::Term(12),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(15),
                ::rusty_lr::TerminalSymbol::Term(16),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(36),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset13: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(12),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(15),
                ::rusty_lr::TerminalSymbol::Term(16),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset12: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(12),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset14: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset15: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset16: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset25: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(24),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset17: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset18: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(30),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(54),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset31: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset19: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset32: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(0),
                ::rusty_lr::TerminalSymbol::Term(31),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(39),
                ::rusty_lr::TerminalSymbol::Term(40),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(44),
                ::rusty_lr::TerminalSymbol::Term(45),
                ::rusty_lr::TerminalSymbol::Term(46),
                ::rusty_lr::TerminalSymbol::Term(47),
                ::rusty_lr::TerminalSymbol::Term(49),
                ::rusty_lr::TerminalSymbol::Term(52),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Term(56),
            ]);
        let __rustylr_tset4: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(1),
                ::rusty_lr::TerminalSymbol::Term(5),
                ::rusty_lr::TerminalSymbol::Term(6),
                ::rusty_lr::TerminalSymbol::Term(7),
                ::rusty_lr::TerminalSymbol::Term(8),
                ::rusty_lr::TerminalSymbol::Term(9),
                ::rusty_lr::TerminalSymbol::Term(10),
                ::rusty_lr::TerminalSymbol::Term(12),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(15),
                ::rusty_lr::TerminalSymbol::Term(16),
                ::rusty_lr::TerminalSymbol::Term(17),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(27),
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(29),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(33),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(35),
                ::rusty_lr::TerminalSymbol::Term(36),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(51),
            ]);
        let __rustylr_tset29: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(1),
                ::rusty_lr::TerminalSymbol::Term(5),
                ::rusty_lr::TerminalSymbol::Term(6),
                ::rusty_lr::TerminalSymbol::Term(7),
                ::rusty_lr::TerminalSymbol::Term(8),
                ::rusty_lr::TerminalSymbol::Term(9),
                ::rusty_lr::TerminalSymbol::Term(10),
                ::rusty_lr::TerminalSymbol::Term(12),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(15),
                ::rusty_lr::TerminalSymbol::Term(16),
                ::rusty_lr::TerminalSymbol::Term(17),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(27),
                ::rusty_lr::TerminalSymbol::Term(29),
                ::rusty_lr::TerminalSymbol::Term(33),
                ::rusty_lr::TerminalSymbol::Term(35),
                ::rusty_lr::TerminalSymbol::Term(36),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(51),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset34: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(1),
                ::rusty_lr::TerminalSymbol::Term(5),
                ::rusty_lr::TerminalSymbol::Term(6),
                ::rusty_lr::TerminalSymbol::Term(7),
                ::rusty_lr::TerminalSymbol::Term(8),
                ::rusty_lr::TerminalSymbol::Term(9),
                ::rusty_lr::TerminalSymbol::Term(10),
                ::rusty_lr::TerminalSymbol::Term(12),
                ::rusty_lr::TerminalSymbol::Term(13),
                ::rusty_lr::TerminalSymbol::Term(14),
                ::rusty_lr::TerminalSymbol::Term(15),
                ::rusty_lr::TerminalSymbol::Term(16),
                ::rusty_lr::TerminalSymbol::Term(17),
                ::rusty_lr::TerminalSymbol::Term(18),
                ::rusty_lr::TerminalSymbol::Term(19),
                ::rusty_lr::TerminalSymbol::Term(20),
                ::rusty_lr::TerminalSymbol::Term(21),
                ::rusty_lr::TerminalSymbol::Term(22),
                ::rusty_lr::TerminalSymbol::Term(23),
                ::rusty_lr::TerminalSymbol::Term(27),
                ::rusty_lr::TerminalSymbol::Term(29),
                ::rusty_lr::TerminalSymbol::Term(33),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(35),
                ::rusty_lr::TerminalSymbol::Term(36),
                ::rusty_lr::TerminalSymbol::Term(38),
                ::rusty_lr::TerminalSymbol::Term(51),
            ]);
        let __rustylr_tset36: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(1),
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(27),
                ::rusty_lr::TerminalSymbol::Term(29),
                ::rusty_lr::TerminalSymbol::Term(33),
                ::rusty_lr::TerminalSymbol::Term(35),
            ]);
        let __rustylr_tset27: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([::rusty_lr::TerminalSymbol::Term(24)]);
        let __rustylr_tset35: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(24),
                ::rusty_lr::TerminalSymbol::Term(34),
            ]);
        let __rustylr_tset22: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([::rusty_lr::TerminalSymbol::Term(25)]);
        let __rustylr_tset21: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Term(33),
                ::rusty_lr::TerminalSymbol::Term(35),
            ]);
        let __rustylr_tset33: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(25),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset5: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([::rusty_lr::TerminalSymbol::Term(26)]);
        let __rustylr_tset30: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset6: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(34),
            ]);
        let __rustylr_tset7: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(26),
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(48),
            ]);
        let __rustylr_tset3: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([::rusty_lr::TerminalSymbol::Term(28)]);
        let __rustylr_tset23: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(28),
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(34),
            ]);
        let __rustylr_tset39: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(32),
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset28: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([::rusty_lr::TerminalSymbol::Term(34)]);
        let __rustylr_tset20: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(34),
                ::rusty_lr::TerminalSymbol::Term(48),
            ]);
        let __rustylr_tset40: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([::rusty_lr::TerminalSymbol::Term(40)]);
        let __rustylr_tset43: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
            ]);
        let __rustylr_tset41: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(53),
            ]);
        let __rustylr_tset37: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset38: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(42),
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(55),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset42: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(41),
                ::rusty_lr::TerminalSymbol::Term(43),
            ]);
        let __rustylr_tset44: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([::rusty_lr::TerminalSymbol::Term(43)]);
        let __rustylr_tset8: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(43),
                ::rusty_lr::TerminalSymbol::Term(53),
            ]);
        let __rustylr_tset26: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Term(55),
            ]);
        let __rustylr_tset0: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([
                ::rusty_lr::TerminalSymbol::Term(53),
                ::rusty_lr::TerminalSymbol::Eof,
            ]);
        let __rustylr_tset45: std::collections::BTreeSet<::rusty_lr::TerminalSymbol<u8>> =
            std::collections::BTreeSet::from([::rusty_lr::TerminalSymbol::Eof]);
        let states: Vec<::rusty_lr::builder::State<::rusty_lr::TerminalSymbol<u8>, _, u8, u8>> = vec![
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 220),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::ChunkOrExpressions, 221),
                    (ChunkOrExpressionsNonTerminals::Chunk, 223),
                    (ChunkOrExpressionsNonTerminals::Block, 224),
                    (ChunkOrExpressionsNonTerminals::Statement, 127),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                    (ChunkOrExpressionsNonTerminals::ExpList1, 225),
                    (ChunkOrExpressionsNonTerminals::Exp, 135),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                    (ChunkOrExpressionsNonTerminals::_StatementPlus28, 153),
                    (ChunkOrExpressionsNonTerminals::_StatementStar29, 155),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([93]);
                    __reduce_map.extend(
                        __rustylr_tset0
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22,
                        23, 24, 25, 29, 30, 31, 32, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 91, 92, 93, 111, 112, 113, 114, 120, 125,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([20]);
                    __reduce_map.extend(
                        __rustylr_tset1
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[20];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([44]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[44];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([42]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[42];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([43]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[43];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([45]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[45];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 161),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 160),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 159),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 158),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 34),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                        74, 75, 83, 112, 113, 120, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 12),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(29), 80),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 101),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FieldList1, 102),
                    (ChunkOrExpressionsNonTerminals::FieldList, 108),
                    (ChunkOrExpressionsNonTerminals::Field, 110),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([79]);
                    __reduce_map.extend(
                        __rustylr_tset3
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                        74, 75, 75, 76, 77, 78, 79, 80, 81, 82, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(24),
                    13,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([20]);
                    __reduce_map.extend(
                        __rustylr_tset4
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[20, 81];
                    let shifted: &'static [u8] = &[1, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 219),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                        74, 75, 81, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([46]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[46];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(25),
                    16,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([(
                    ChunkOrExpressionsNonTerminals::FuncBody,
                    157,
                )]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[83, 84];
                    let shifted: &'static [u8] = &[1, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 17),
                    (::rusty_lr::TerminalSymbol::Term(37), 18),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::NameList, 19),
                    (ChunkOrExpressionsNonTerminals::ParList, 25),
                    (ChunkOrExpressionsNonTerminals::_ParListQuestion41, 26),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([108]);
                    __reduce_map.extend(
                        __rustylr_tset5
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[35, 36, 84, 89, 90, 107, 108];
                    let shifted: &'static [u8] = &[0, 0, 1, 0, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([36]);
                    __reduce_map.extend(
                        __rustylr_tset6
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[36];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([90]);
                    __reduce_map.extend(
                        __rustylr_tset5
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[90];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(34),
                    20,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::_Group42, 23),
                    (ChunkOrExpressionsNonTerminals::__Group42Question43, 24),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([110]);
                    __reduce_map.extend(
                        __rustylr_tset5
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[35, 89, 109, 110, 119];
                    let shifted: &'static [u8] = &[1, 1, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 21),
                    (::rusty_lr::TerminalSymbol::Term(37), 22),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[35, 119];
                    let shifted: &'static [u8] = &[2, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([35]);
                    __reduce_map.extend(
                        __rustylr_tset7
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[35];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([119]);
                    __reduce_map.extend(
                        __rustylr_tset5
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[119];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([109]);
                    __reduce_map.extend(
                        __rustylr_tset5
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[109];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([89]);
                    __reduce_map.extend(
                        __rustylr_tset5
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[89];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([107]);
                    __reduce_map.extend(
                        __rustylr_tset5
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[107];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(26),
                    27,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[84];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 90),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Block, 125),
                    (ChunkOrExpressionsNonTerminals::Statement, 127),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                    (ChunkOrExpressionsNonTerminals::_StatementPlus28, 153),
                    (ChunkOrExpressionsNonTerminals::_StatementStar29, 155),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([93]);
                    __reduce_map.extend(
                        __rustylr_tset8
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24,
                        25, 29, 30, 84, 91, 92, 93, 112, 114, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3,
                        0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 149),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([112]);
                    __reduce_map.extend(
                        __rustylr_tset9
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[112];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(1), 31),
                    (::rusty_lr::TerminalSymbol::Term(25), 32),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(29), 136),
                    (::rusty_lr::TerminalSymbol::Term(33), 142),
                    (::rusty_lr::TerminalSymbol::Term(35), 146),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Args, 148),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 145),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([113]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[21, 22, 24, 25, 26, 27, 28, 75, 113];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 0, 0, 0, 0, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([28]);
                    __reduce_map.extend(
                        __rustylr_tset9
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[28];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::ExpList1, 130),
                    (ChunkOrExpressionsNonTerminals::ExpList0, 133),
                    (ChunkOrExpressionsNonTerminals::Exp, 135),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([34]);
                    __reduce_map.extend(
                        __rustylr_tset5
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 26, 31, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 49,
                        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
                        69, 70, 71, 72, 73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([23]);
                    __reduce_map.extend(
                        __rustylr_tset9
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[23];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(26), 75),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 36),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([58]);
                    __reduce_map.extend(
                        __rustylr_tset10
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[54, 55, 56, 57, 58, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 38),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(10),
                    39,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([54]);
                    __reduce_map.extend(
                        __rustylr_tset11
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[54, 74];
                    let shifted: &'static [u8] = &[3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 40),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                        74, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(10),
                    39,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([74]);
                    __reduce_map.extend(
                        __rustylr_tset11
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[74, 74];
                    let shifted: &'static [u8] = &[1, 3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([48]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[48];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([47]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[47];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 44),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(10),
                    39,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([55]);
                    __reduce_map.extend(
                        __rustylr_tset11
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[55, 74];
                    let shifted: &'static [u8] = &[3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 46),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(10),
                    39,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([57]);
                    __reduce_map.extend(
                        __rustylr_tset11
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[57, 74];
                    let shifted: &'static [u8] = &[3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 48),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(10),
                    39,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([56]);
                    __reduce_map.extend(
                        __rustylr_tset11
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[56, 74];
                    let shifted: &'static [u8] = &[3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 50),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([59]);
                    __reduce_map.extend(
                        __rustylr_tset10
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[54, 55, 56, 57, 59, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 52),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([63]);
                    __reduce_map.extend(
                        __rustylr_tset12
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 54),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([61]);
                    __reduce_map.extend(
                        __rustylr_tset13
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[54, 55, 56, 57, 58, 59, 60, 61, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 56),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([60]);
                    __reduce_map.extend(
                        __rustylr_tset13
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[54, 55, 56, 57, 58, 59, 60, 60, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 58),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([62]);
                    __reduce_map.extend(
                        __rustylr_tset13
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[54, 55, 56, 57, 58, 59, 60, 62, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 60),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([64]);
                    __reduce_map.extend(
                        __rustylr_tset14
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 62),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([65]);
                    __reduce_map.extend(
                        __rustylr_tset15
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] =
                        &[54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 64),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([71]);
                    __reduce_map.extend(
                        __rustylr_tset16
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] =
                        &[54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 71, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 66),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([70]);
                    __reduce_map.extend(
                        __rustylr_tset16
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] =
                        &[54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 70, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 68),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([67]);
                    __reduce_map.extend(
                        __rustylr_tset16
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] =
                        &[54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 67, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 70),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([69]);
                    __reduce_map.extend(
                        __rustylr_tset16
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] =
                        &[54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 69, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 72),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([66]);
                    __reduce_map.extend(
                        __rustylr_tset16
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] =
                        &[54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 74),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([68]);
                    __reduce_map.extend(
                        __rustylr_tset16
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] =
                        &[54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 68, 74];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([120]);
                    __reduce_map.extend(
                        __rustylr_tset9
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[120];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 77),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([72]);
                    __reduce_map.extend(
                        __rustylr_tset17
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        74,
                    ];
                    let shifted: &'static [u8] =
                        &[1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 79),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([73]);
                    __reduce_map.extend(
                        __rustylr_tset18
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 215),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                        74, 75, 80, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    82,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[6];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(31),
                    83,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[6];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([6]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[6];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([3]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[3];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([7]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[7];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 90),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Block, 171),
                    (ChunkOrExpressionsNonTerminals::Statement, 127),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                    (ChunkOrExpressionsNonTerminals::_StatementPlus28, 153),
                    (ChunkOrExpressionsNonTerminals::_StatementStar29, 155),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([93]);
                    __reduce_map.extend(
                        __rustylr_tset8
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        2, 3, 4, 5, 6, 7, 8, 9, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23,
                        24, 25, 29, 30, 91, 92, 93, 112, 114, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    88,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([(
                    ChunkOrExpressionsNonTerminals::NameList,
                    183,
                )]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[13, 14, 35, 36];
                    let shifted: &'static [u8] = &[1, 1, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(24),
                    89,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([36]);
                    __reduce_map.extend(
                        __rustylr_tset20
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[13, 36];
                    let shifted: &'static [u8] = &[2, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 173),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        13, 20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    91,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::FuncName1, 92),
                    (ChunkOrExpressionsNonTerminals::FuncName, 97),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[15, 85, 86, 87, 88];
                    let shifted: &'static [u8] = &[1, 0, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([86]);
                    __reduce_map.extend(
                        __rustylr_tset21
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[86];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(33), 93),
                    (::rusty_lr::TerminalSymbol::Term(35), 95),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([88]);
                    __reduce_map.extend(
                        __rustylr_tset22
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[85, 87, 88];
                    let shifted: &'static [u8] = &[1, 1, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    94,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[87];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([87]);
                    __reduce_map.extend(
                        __rustylr_tset22
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[87];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    96,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[85];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([85]);
                    __reduce_map.extend(
                        __rustylr_tset21
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[85];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(25),
                    16,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([(
                    ChunkOrExpressionsNonTerminals::FuncBody,
                    190,
                )]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[15, 84];
                    let shifted: &'static [u8] = &[2, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    99,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[8];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([8]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[8];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 191),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        12, 20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([82]);
                    __reduce_map.extend(
                        __rustylr_tset23
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 82,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(32), 103),
                    (::rusty_lr::TerminalSymbol::Term(34), 104),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::FieldSep, 105),
                    (ChunkOrExpressionsNonTerminals::_FieldSepQuestion40, 107),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([124]);
                    __reduce_map.extend(
                        __rustylr_tset3
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[76, 78, 121, 122, 123, 124];
                    let shifted: &'static [u8] = &[1, 1, 0, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([122]);
                    __reduce_map.extend(
                        __rustylr_tset24
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[122];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([121]);
                    __reduce_map.extend(
                        __rustylr_tset24
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[121];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 12),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(29), 80),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 101),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::Field, 106),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([123]);
                    __reduce_map.extend(
                        __rustylr_tset3
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                        74, 75, 76, 80, 81, 82, 83, 112, 113, 120, 123,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([76]);
                    __reduce_map.extend(
                        __rustylr_tset23
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[76];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([78]);
                    __reduce_map.extend(
                        __rustylr_tset3
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[78];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(28),
                    109,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[75];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([75]);
                    __reduce_map.extend(
                        __rustylr_tset9
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[75];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([77]);
                    __reduce_map.extend(
                        __rustylr_tset23
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[77];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 112),
                    (::rusty_lr::TerminalSymbol::Term(45), 117),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::AttName, 120),
                    (ChunkOrExpressionsNonTerminals::AttNameList, 121),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[16, 17, 37, 38, 39];
                    let shifted: &'static [u8] = &[1, 1, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(22),
                    113,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([(
                    ChunkOrExpressionsNonTerminals::Attrib,
                    116,
                )]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([41]);
                    __reduce_map.extend(
                        __rustylr_tset25
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[37, 40, 41];
                    let shifted: &'static [u8] = &[1, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    114,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[40];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(23),
                    115,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[40];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([40]);
                    __reduce_map.extend(
                        __rustylr_tset25
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[40];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([37]);
                    __reduce_map.extend(
                        __rustylr_tset25
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[37];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    118,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[16];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(25),
                    16,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([(
                    ChunkOrExpressionsNonTerminals::FuncBody,
                    119,
                )]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[16, 84];
                    let shifted: &'static [u8] = &[3, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([16]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[16];
                    let shifted: &'static [u8] = &[4];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([39]);
                    __reduce_map.extend(
                        __rustylr_tset25
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[39];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(24), 122),
                    (::rusty_lr::TerminalSymbol::Term(34), 194),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::_Group37, 196),
                    (ChunkOrExpressionsNonTerminals::__Group37Question38, 197),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([104]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[17, 38, 103, 104, 118];
                    let shifted: &'static [u8] = &[2, 1, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::ExpList1, 193),
                    (ChunkOrExpressionsNonTerminals::Exp, 135),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 31, 32, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
                        53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                        72, 73, 74, 75, 83, 112, 113, 118, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 90),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Block, 198),
                    (ChunkOrExpressionsNonTerminals::Statement, 127),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                    (ChunkOrExpressionsNonTerminals::_StatementPlus28, 153),
                    (ChunkOrExpressionsNonTerminals::_StatementStar29, 155),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([93]);
                    __reduce_map.extend(
                        __rustylr_tset26
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23,
                        24, 25, 29, 30, 91, 92, 93, 112, 114, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 167),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        10, 20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(43),
                    126,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[84];
                    let shifted: &'static [u8] = &[4];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([84]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[84];
                    let shifted: &'static [u8] = &[5];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([91]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[91];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([30]);
                    __reduce_map.extend(
                        __rustylr_tset27
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    let reduce_rules = std::collections::BTreeSet::from([30, 112]);
                    __reduce_map.extend(
                        __rustylr_tset28
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    let reduce_rules = std::collections::BTreeSet::from([112]);
                    __reduce_map.extend(
                        __rustylr_tset29
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[30, 112];
                    let shifted: &'static [u8] = &[1, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(1), 31),
                    (::rusty_lr::TerminalSymbol::Term(25), 32),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(29), 136),
                    (::rusty_lr::TerminalSymbol::Term(33), 142),
                    (::rusty_lr::TerminalSymbol::Term(35), 146),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Args, 148),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 145),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[21, 22, 24, 25, 26, 27, 28, 75];
                    let shifted: &'static [u8] = &[1, 1, 1, 1, 0, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(34),
                    131,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([33]);
                    __reduce_map.extend(
                        __rustylr_tset30
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[31, 33];
                    let shifted: &'static [u8] = &[1, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 132),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 31, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([31]);
                    __reduce_map.extend(
                        __rustylr_tset31
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        31, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                        72, 73, 74,
                    ];
                    let shifted: &'static [u8] = &[
                        3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(26),
                    134,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[26];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([26]);
                    __reduce_map.extend(
                        __rustylr_tset9
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[26];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([32]);
                    __reduce_map.extend(
                        __rustylr_tset31
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        32, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                        72, 73, 74,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 140),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([5]);
                    __reduce_map.extend(
                        __rustylr_tset32
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    let reduce_rules = std::collections::BTreeSet::from([5, 23]);
                    __reduce_map.extend(
                        __rustylr_tset33
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    let reduce_rules = std::collections::BTreeSet::from([23]);
                    __reduce_map.extend(
                        __rustylr_tset34
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[5, 23];
                    let shifted: &'static [u8] = &[1, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(24), 139),
                    (::rusty_lr::TerminalSymbol::Term(34), 151),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[4, 29];
                    let shifted: &'static [u8] = &[1, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::ExpList1, 150),
                    (ChunkOrExpressionsNonTerminals::Exp, 135),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        4, 20, 21, 22, 23, 24, 25, 31, 32, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
                        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
                        71, 72, 73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(30), 141),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        21, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                        72, 73, 74,
                    ];
                    let shifted: &'static [u8] = &[
                        3, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([21]);
                    __reduce_map.extend(
                        __rustylr_tset1
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[21];
                    let shifted: &'static [u8] = &[4];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    143,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[25];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(1), 31),
                    (::rusty_lr::TerminalSymbol::Term(25), 32),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Args, 144),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 145),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[25, 26, 27, 28, 75];
                    let shifted: &'static [u8] = &[3, 0, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([25]);
                    __reduce_map.extend(
                        __rustylr_tset9
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[25];
                    let shifted: &'static [u8] = &[4];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([27]);
                    __reduce_map.extend(
                        __rustylr_tset9
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[27];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    147,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[22];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([22]);
                    __reduce_map.extend(
                        __rustylr_tset1
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[22];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([24]);
                    __reduce_map.extend(
                        __rustylr_tset9
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[24];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([49]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[49];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(34),
                    131,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([4]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[4, 31];
                    let shifted: &'static [u8] = &[3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 152),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[20, 21, 22, 23, 24, 25, 29, 112, 120];
                    let shifted: &'static [u8] = &[0, 0, 0, 0, 0, 0, 2, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([29]);
                    __reduce_map.extend(
                        __rustylr_tset35
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    let reduce_rules = std::collections::BTreeSet::from([112]);
                    __reduce_map.extend(
                        __rustylr_tset36
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[29, 112];
                    let shifted: &'static [u8] = &[3, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 90),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Statement, 154),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([114]);
                    __reduce_map.extend(
                        __rustylr_tset37
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24,
                        25, 29, 30, 92, 112, 114, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                        1, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([92]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[92];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(53),
                    156,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::ReturnStatement, 165),
                    (
                        ChunkOrExpressionsNonTerminals::_ReturnStatementQuestion30,
                        166,
                    ),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([95]);
                    __reduce_map.extend(
                        __rustylr_tset38
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[2, 19, 94, 95];
                    let shifted: &'static [u8] = &[1, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::ExpList1, 130),
                    (ChunkOrExpressionsNonTerminals::ExpList0, 162),
                    (ChunkOrExpressionsNonTerminals::Exp, 135),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([34]);
                    __reduce_map.extend(
                        __rustylr_tset39
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 49,
                        50, 51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68,
                        69, 70, 71, 72, 73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([83]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[83];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([53]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[53];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([50]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[50];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([51]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[51];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([52]);
                    __reduce_map.extend(
                        __rustylr_tset2
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[52];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(32),
                    163,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([(
                    ChunkOrExpressionsNonTerminals::_semicolonQuestion39,
                    164,
                )]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([106]);
                    __reduce_map.extend(
                        __rustylr_tset38
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[19, 105, 106];
                    let shifted: &'static [u8] = &[2, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([105]);
                    __reduce_map.extend(
                        __rustylr_tset38
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[105];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([19]);
                    __reduce_map.extend(
                        __rustylr_tset38
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[19];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([94]);
                    __reduce_map.extend(
                        __rustylr_tset38
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[94];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([2]);
                    __reduce_map.extend(
                        __rustylr_tset38
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[2];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(40), 168),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        10, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                        72, 73, 74,
                    ];
                    let shifted: &'static [u8] = &[
                        2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 90),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Block, 169),
                    (ChunkOrExpressionsNonTerminals::Statement, 127),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                    (ChunkOrExpressionsNonTerminals::_StatementPlus28, 153),
                    (ChunkOrExpressionsNonTerminals::_StatementStar29, 155),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([93]);
                    __reduce_map.extend(
                        __rustylr_tset8
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        2, 3, 4, 5, 6, 7, 8, 9, 10, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23,
                        24, 25, 29, 30, 91, 92, 93, 112, 114, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(43),
                    170,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[10];
                    let shifted: &'static [u8] = &[4];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([10]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[10];
                    let shifted: &'static [u8] = &[5];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(43),
                    172,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[9];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([9]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[9];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(34), 174),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        13, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                        72, 73, 74,
                    ];
                    let shifted: &'static [u8] = &[
                        4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 175),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        13, 20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(34), 176),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::_Group35, 178),
                    (ChunkOrExpressionsNonTerminals::__Group35Question36, 179),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([102]);
                    __reduce_map.extend(
                        __rustylr_tset40
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        13, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                        72, 73, 74, 101, 102, 117,
                    ];
                    let shifted: &'static [u8] = &[
                        6, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 177),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                        74, 75, 83, 112, 113, 117, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([117]);
                    __reduce_map.extend(
                        __rustylr_tset40
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 117,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([101]);
                    __reduce_map.extend(
                        __rustylr_tset40
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[101];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(40),
                    180,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[13];
                    let shifted: &'static [u8] = &[7];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 90),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Block, 181),
                    (ChunkOrExpressionsNonTerminals::Statement, 127),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                    (ChunkOrExpressionsNonTerminals::_StatementPlus28, 153),
                    (ChunkOrExpressionsNonTerminals::_StatementStar29, 155),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([93]);
                    __reduce_map.extend(
                        __rustylr_tset8
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 13, 14, 15, 16, 17, 20, 21, 22, 23,
                        24, 25, 29, 30, 91, 92, 93, 112, 114, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 8, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(43),
                    182,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[13];
                    let shifted: &'static [u8] = &[9];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([13]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[13];
                    let shifted: &'static [u8] = &[10];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(34), 184),
                    (::rusty_lr::TerminalSymbol::Term(48), 185),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[14, 35];
                    let shifted: &'static [u8] = &[2, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    21,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[35];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::ExpList1, 186),
                    (ChunkOrExpressionsNonTerminals::Exp, 135),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        14, 20, 21, 22, 23, 24, 25, 31, 32, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51,
                        52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70,
                        71, 72, 73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(34), 131),
                    (::rusty_lr::TerminalSymbol::Term(40), 187),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[14, 31];
                    let shifted: &'static [u8] = &[4, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 90),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Block, 188),
                    (ChunkOrExpressionsNonTerminals::Statement, 127),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                    (ChunkOrExpressionsNonTerminals::_StatementPlus28, 153),
                    (ChunkOrExpressionsNonTerminals::_StatementStar29, 155),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([93]);
                    __reduce_map.extend(
                        __rustylr_tset8
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 14, 15, 16, 17, 20, 21, 22, 23,
                        24, 25, 29, 30, 91, 92, 93, 112, 114, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 5, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(43),
                    189,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[14];
                    let shifted: &'static [u8] = &[6];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([14]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[14];
                    let shifted: &'static [u8] = &[7];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([15]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[15];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                    (::rusty_lr::TerminalSymbol::Term(54), 192),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        12, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                        72, 73, 74,
                    ];
                    let shifted: &'static [u8] = &[
                        2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 90),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Block, 201),
                    (ChunkOrExpressionsNonTerminals::Statement, 127),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                    (ChunkOrExpressionsNonTerminals::_StatementPlus28, 153),
                    (ChunkOrExpressionsNonTerminals::_StatementStar29, 155),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([93]);
                    __reduce_map.extend(
                        __rustylr_tset41
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23,
                        24, 25, 29, 30, 91, 92, 93, 112, 114, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(34),
                    131,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([118]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[31, 118];
                    let shifted: &'static [u8] = &[1, 2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(0),
                    112,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([(
                    ChunkOrExpressionsNonTerminals::AttName,
                    195,
                )]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[37, 38];
                    let shifted: &'static [u8] = &[0, 2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([38]);
                    __reduce_map.extend(
                        __rustylr_tset25
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[38];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([103]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[103];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([17]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[17];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(55),
                    199,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[11];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 200),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        11, 20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        3, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([11]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        11, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                        72, 73, 74,
                    ];
                    let shifted: &'static [u8] = &[
                        4, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(42),
                    202,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::ElseIf, 206),
                    (ChunkOrExpressionsNonTerminals::_ElseIfPlus31, 207),
                    (ChunkOrExpressionsNonTerminals::_ElseIfStar32, 209),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([98]);
                    __reduce_map.extend(
                        __rustylr_tset42
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[12, 18, 96, 97, 98, 115];
                    let shifted: &'static [u8] = &[4, 0, 0, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 203),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        18, 20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53,
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 75, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                    (::rusty_lr::TerminalSymbol::Term(54), 204),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        18, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                        72, 73, 74,
                    ];
                    let shifted: &'static [u8] = &[
                        2, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 90),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Block, 205),
                    (ChunkOrExpressionsNonTerminals::Statement, 127),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                    (ChunkOrExpressionsNonTerminals::_StatementPlus28, 153),
                    (ChunkOrExpressionsNonTerminals::_StatementStar29, 155),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([93]);
                    __reduce_map.extend(
                        __rustylr_tset41
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 20, 21, 22, 23,
                        24, 25, 29, 30, 91, 92, 93, 112, 114, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([18]);
                    __reduce_map.extend(
                        __rustylr_tset43
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[18];
                    let shifted: &'static [u8] = &[4];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([96]);
                    __reduce_map.extend(
                        __rustylr_tset43
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[96];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(42),
                    202,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([(
                    ChunkOrExpressionsNonTerminals::ElseIf,
                    208,
                )]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([115]);
                    __reduce_map.extend(
                        __rustylr_tset42
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[18, 97, 115];
                    let shifted: &'static [u8] = &[0, 1, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([97]);
                    __reduce_map.extend(
                        __rustylr_tset43
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[97];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(41),
                    210,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::_Group33, 212),
                    (ChunkOrExpressionsNonTerminals::__Group33Question34, 213),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([100]);
                    __reduce_map.extend(
                        __rustylr_tset44
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[12, 99, 100, 116];
                    let shifted: &'static [u8] = &[5, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(31), 81),
                    (::rusty_lr::TerminalSymbol::Term(32), 84),
                    (::rusty_lr::TerminalSymbol::Term(39), 85),
                    (::rusty_lr::TerminalSymbol::Term(40), 86),
                    (::rusty_lr::TerminalSymbol::Term(44), 87),
                    (::rusty_lr::TerminalSymbol::Term(45), 90),
                    (::rusty_lr::TerminalSymbol::Term(46), 98),
                    (::rusty_lr::TerminalSymbol::Term(47), 100),
                    (::rusty_lr::TerminalSymbol::Term(49), 111),
                    (::rusty_lr::TerminalSymbol::Term(52), 123),
                    (::rusty_lr::TerminalSymbol::Term(56), 124),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Block, 211),
                    (ChunkOrExpressionsNonTerminals::Statement, 127),
                    (ChunkOrExpressionsNonTerminals::Var, 128),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 129),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 137),
                    (ChunkOrExpressionsNonTerminals::VarList, 138),
                    (ChunkOrExpressionsNonTerminals::_StatementPlus28, 153),
                    (ChunkOrExpressionsNonTerminals::_StatementStar29, 155),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([93]);
                    __reduce_map.extend(
                        __rustylr_tset8
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 20, 21, 22, 23, 24,
                        25, 29, 30, 91, 92, 93, 112, 114, 116, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 1, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([116]);
                    __reduce_map.extend(
                        __rustylr_tset44
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[116];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([99]);
                    __reduce_map.extend(
                        __rustylr_tset44
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[99];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(43),
                    214,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[12];
                    let shifted: &'static [u8] = &[6];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([12]);
                    __reduce_map.extend(
                        __rustylr_tset19
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[12];
                    let shifted: &'static [u8] = &[7];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(30), 216),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 80,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(24),
                    217,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[80];
                    let shifted: &'static [u8] = &[3];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 1),
                    (::rusty_lr::TerminalSymbol::Term(1), 2),
                    (::rusty_lr::TerminalSymbol::Term(2), 3),
                    (::rusty_lr::TerminalSymbol::Term(3), 4),
                    (::rusty_lr::TerminalSymbol::Term(4), 5),
                    (::rusty_lr::TerminalSymbol::Term(5), 6),
                    (::rusty_lr::TerminalSymbol::Term(6), 7),
                    (::rusty_lr::TerminalSymbol::Term(11), 8),
                    (::rusty_lr::TerminalSymbol::Term(13), 9),
                    (::rusty_lr::TerminalSymbol::Term(25), 10),
                    (::rusty_lr::TerminalSymbol::Term(27), 11),
                    (::rusty_lr::TerminalSymbol::Term(37), 14),
                    (::rusty_lr::TerminalSymbol::Term(45), 15),
                    (::rusty_lr::TerminalSymbol::Term(50), 28),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::Var, 29),
                    (ChunkOrExpressionsNonTerminals::PrefixExp, 30),
                    (ChunkOrExpressionsNonTerminals::FunctionCall, 33),
                    (ChunkOrExpressionsNonTerminals::Exp, 218),
                    (ChunkOrExpressionsNonTerminals::TableConstructor, 41),
                    (ChunkOrExpressionsNonTerminals::FunctionDef, 42),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                        55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                        74, 75, 80, 83, 112, 113, 120,
                    ];
                    let shifted: &'static [u8] = &[
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
                        0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 4, 0, 0, 0, 0,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([80]);
                    __reduce_map.extend(
                        __rustylr_tset23
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 80,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 5,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(5), 35),
                    (::rusty_lr::TerminalSymbol::Term(6), 49),
                    (::rusty_lr::TerminalSymbol::Term(7), 37),
                    (::rusty_lr::TerminalSymbol::Term(8), 43),
                    (::rusty_lr::TerminalSymbol::Term(9), 45),
                    (::rusty_lr::TerminalSymbol::Term(10), 39),
                    (::rusty_lr::TerminalSymbol::Term(12), 51),
                    (::rusty_lr::TerminalSymbol::Term(13), 59),
                    (::rusty_lr::TerminalSymbol::Term(14), 61),
                    (::rusty_lr::TerminalSymbol::Term(15), 53),
                    (::rusty_lr::TerminalSymbol::Term(16), 57),
                    (::rusty_lr::TerminalSymbol::Term(17), 47),
                    (::rusty_lr::TerminalSymbol::Term(18), 63),
                    (::rusty_lr::TerminalSymbol::Term(19), 65),
                    (::rusty_lr::TerminalSymbol::Term(20), 67),
                    (::rusty_lr::TerminalSymbol::Term(21), 69),
                    (::rusty_lr::TerminalSymbol::Term(22), 71),
                    (::rusty_lr::TerminalSymbol::Term(23), 73),
                    (::rusty_lr::TerminalSymbol::Term(36), 55),
                    (::rusty_lr::TerminalSymbol::Term(38), 76),
                    (::rusty_lr::TerminalSymbol::Term(51), 78),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([81]);
                    __reduce_map.extend(
                        __rustylr_tset23
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[
                        54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72,
                        73, 74, 81,
                    ];
                    let shifted: &'static [u8] = &[
                        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 3,
                    ];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([
                    (::rusty_lr::TerminalSymbol::Term(0), 91),
                    (::rusty_lr::TerminalSymbol::Term(25), 16),
                ]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([
                    (ChunkOrExpressionsNonTerminals::FuncBody, 157),
                    (ChunkOrExpressionsNonTerminals::FuncName1, 92),
                    (ChunkOrExpressionsNonTerminals::FuncName, 97),
                ]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[15, 83, 84, 85, 86, 87, 88];
                    let shifted: &'static [u8] = &[1, 1, 0, 0, 0, 0, 0];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Eof,
                    222,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[125];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[125];
                    let shifted: &'static [u8] = &[2];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([0]);
                    __reduce_map.extend(
                        __rustylr_tset45
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[0];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([111]);
                    __reduce_map.extend(
                        __rustylr_tset45
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[111];
                    let shifted: &'static [u8] = &[1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
            ::rusty_lr::builder::State {
                shift_goto_map_term: std::collections::BTreeMap::from([(
                    ::rusty_lr::TerminalSymbol::Term(34),
                    131,
                )]),
                shift_goto_map_nonterm: std::collections::BTreeMap::from([]),
                reduce_map: {
                    let mut __reduce_map = std::collections::BTreeMap::new();
                    let reduce_rules = std::collections::BTreeSet::from([1]);
                    __reduce_map.extend(
                        __rustylr_tset45
                            .iter()
                            .map(|term| (*term, reduce_rules.clone())),
                    );
                    __reduce_map
                },
                ruleset: {
                    let rules: &'static [u8] = &[1, 31];
                    let shifted: &'static [u8] = &[1, 1];
                    rules
                        .iter()
                        .zip(shifted.iter())
                        .map(|(&rule, &shifted)| ::rusty_lr::rule::ShiftedRuleRef {
                            rule: rule as usize,
                            shifted: shifted as usize,
                        })
                        .collect()
                },
            },
        ];
        let states: Vec<ChunkOrExpressionsState> =
            states.into_iter().map(|state| state.into()).collect();
        Self {
            rules,
            states,
            classes: vec![
                vec!["ident"],
                vec!["string_literal"],
                vec!["numeric_literal"],
                vec!["nil"],
                vec!["bool_"],
                vec!["plus"],
                vec!["minus"],
                vec!["asterisk"],
                vec!["slash"],
                vec!["percent"],
                vec!["caret"],
                vec!["hash"],
                vec!["ampersand"],
                vec!["tilde"],
                vec!["pipe"],
                vec!["lessless"],
                vec!["greatergreater"],
                vec!["slashslash"],
                vec!["equalequal"],
                vec!["tildeequal"],
                vec!["lessequal"],
                vec!["greaterequal"],
                vec!["less"],
                vec!["greater"],
                vec!["equal"],
                vec!["lparen"],
                vec!["rparen"],
                vec!["lbrace"],
                vec!["rbrace"],
                vec!["lbracket"],
                vec!["rbracket"],
                vec!["coloncolon"],
                vec!["semicolon"],
                vec!["colon"],
                vec!["comma"],
                vec!["dot"],
                vec!["dotdot"],
                vec!["dotdotdot"],
                vec!["and_"],
                vec!["break_"],
                vec!["do_"],
                vec!["else_"],
                vec!["elseif_"],
                vec!["end_"],
                vec!["for_"],
                vec!["function_"],
                vec!["goto_"],
                vec!["if_"],
                vec!["in_"],
                vec!["local_"],
                vec!["not_"],
                vec!["or_"],
                vec!["repeat_"],
                vec!["return_"],
                vec!["then_"],
                vec!["until_"],
                vec!["while_"],
            ],
        }
    }
}
// ==============================Generated Codes End===============================
