// This file was generated by rustylr 1.0.2
//
// Input file: parser/src/parser.rs
// Output file: parser_expanded.rs
// ================================User Codes Begin================================
use crate::expression;
use crate::statement;
use crate::Expression;
use crate::IntType;
use crate::Statement;
use lua_tokenizer::IntOrFloat;
use lua_tokenizer::Token;
use lua_tokenizer::TokenType;
// =================================User Codes End=================================
/*
====================================Grammar=====================================
Chunk -> Block
Block -> Statement* ReturnStatement?
Statement -> semicolon
Statement -> VarList equal ExpList1
Statement -> FunctionCall
Statement -> coloncolon ident coloncolon
Statement -> break_
Statement -> goto_ ident
Statement -> do_ Block end_
Statement -> while_ Exp do_ Block end_
Statement -> repeat_ Block until_ Exp
Statement -> if_ Exp then_ Block (elseif_, Exp, then_, Block)* (else_, Block)? end_
Statement -> for_ ident equal Exp comma Exp (comma, Exp)? do_ Block end_
Statement -> for_ NameList in_ ExpList1 do_ Block end_
Statement -> function_ FuncName FuncBody
Statement -> local_ function_ ident FuncBody
Statement -> local_ AttNameList (equal, ExpList1)?
ReturnStatement -> return_ ExpList0 semicolon?
Var -> ident
Var -> PrefixExp lbracket Exp rbracket
Var -> PrefixExp dot ident
PrefixExp -> Var
PrefixExp -> FunctionCall
PrefixExp -> lparen Exp rparen
FunctionCall -> PrefixExp Args
FunctionCall -> PrefixExp colon ident Args
Args -> lparen ExpList0 rparen
Args -> TableConstructor
Args -> string_literal
VarList -> VarList comma Var
VarList -> Var
ExpList1 -> ExpList1 comma Exp
ExpList1 -> Exp
ExpList0 -> ExpList1
ExpList0 ->
NameList -> NameList comma ident
NameList -> ident
AttName -> ident Attrib
AttNameList -> AttNameList comma AttName
AttNameList -> AttName
Attrib -> less ident greater
Attrib ->
Exp -> Exp12
Exp0 -> numeric_literal
Exp0 -> nil
Exp0 -> string_literal
Exp0 -> bool_
Exp0 -> dotdotdot
Exp0 -> FunctionDef
Exp0 -> PrefixExp
Exp0 -> TableConstructor
Exp1 -> Exp0 caret Exp1
Exp1 -> Exp0
Exp2 -> not_ Exp2
Exp2 -> hash Exp2
Exp2 -> minus Exp2
Exp2 -> tilde Exp2
Exp2 -> Exp1
Exp3 -> Exp3 asterisk Exp2
Exp3 -> Exp3 slash Exp2
Exp3 -> Exp3 slashslash Exp2
Exp3 -> Exp3 percent Exp2
Exp3 -> Exp2
Exp4 -> Exp4 plus Exp3
Exp4 -> Exp4 minus Exp3
Exp4 -> Exp3
Exp5 -> Exp4 dotdot Exp5
Exp5 -> Exp4
Exp6 -> Exp6 lessless Exp5
Exp6 -> Exp6 greatergreater Exp5
Exp6 -> Exp5
Exp7 -> Exp7 ampersand Exp6
Exp7 -> Exp6
Exp8 -> Exp8 tilde Exp7
Exp8 -> Exp7
Exp9 -> Exp9 pipe Exp8
Exp9 -> Exp8
Exp10 -> Exp10 less Exp9
Exp10 -> Exp10 lessequal Exp9
Exp10 -> Exp10 greater Exp9
Exp10 -> Exp10 greaterequal Exp9
Exp10 -> Exp10 tildeequal Exp9
Exp10 -> Exp10 equalequal Exp9
Exp10 -> Exp9
Exp11 -> Exp11 and_ Exp10
Exp11 -> Exp10
Exp12 -> Exp12 or_ Exp11
Exp12 -> Exp11
TableConstructor -> lbrace FieldList rbrace
FieldList1 -> FieldList1 FieldSep Field
FieldList1 -> Field
FieldList -> FieldList1 FieldSep?
FieldList ->
Field -> lbracket Exp rbracket equal Exp
Field -> ident equal Exp
Field -> Exp
FieldSep -> comma
FieldSep -> semicolon
FunctionDef -> function_ FuncBody
FuncBody -> lparen ParList? rparen Block end_
FuncName1 -> FuncName1 dot ident
FuncName1 -> ident
FuncName -> FuncName1 colon ident
FuncName -> FuncName1
ParList -> NameList (comma, dotdotdot)?
ParList -> dotdotdot
Statement+ -> Statement
Statement+ -> Statement+ Statement
Statement* -> Statement+
Statement* ->
ReturnStatement? -> ReturnStatement
ReturnStatement? ->
(elseif_, Exp, then_, Block) -> elseif_ Exp then_ Block
(elseif_, Exp, then_, Block)+ -> (elseif_, Exp, then_, Block)
(elseif_, Exp, then_, Block)+ -> (elseif_, Exp, then_, Block)+ (elseif_, Exp, then_, Block)
(elseif_, Exp, then_, Block)* -> (elseif_, Exp, then_, Block)+
(elseif_, Exp, then_, Block)* ->
(else_, Block) -> else_ Block
(else_, Block)? -> (else_, Block)
(else_, Block)? ->
(comma, Exp) -> comma Exp
(comma, Exp)? -> (comma, Exp)
(comma, Exp)? ->
(equal, ExpList1) -> equal ExpList1
(equal, ExpList1)? -> (equal, ExpList1)
(equal, ExpList1)? ->
semicolon? -> semicolon
semicolon? ->
FieldSep? -> FieldSep
FieldSep? ->
ParList? -> ParList
ParList? ->
(comma, dotdotdot) -> comma dotdotdot
(comma, dotdotdot)? -> (comma, dotdotdot)
(comma, dotdotdot)? ->
Augmented -> Chunk eof

*/
// =============================Generated Codes Begin==============================
#[doc = r" type alias for `Context`"]
#[allow(non_camel_case_types, dead_code)]
pub type ChunkContext = ::rusty_lr::glr::Context<ChunkNodeEnum>;
#[doc = r" type alias for CFG production rule"]
#[allow(non_camel_case_types, dead_code)]
pub type ChunkRule = ::rusty_lr::ProductionRule<Token, ChunkNonTerminals>;
#[doc = r" type alias for DFA state"]
#[allow(non_camel_case_types, dead_code)]
pub type ChunkState = ::rusty_lr::glr::State<Token, ChunkNonTerminals>;
#[doc = r" type alias for `InvalidTerminalError`"]
#[allow(non_camel_case_types, dead_code)]
pub type ChunkInvalidTerminalError = ::rusty_lr::glr::InvalidTerminalError<
    Token,
    ChunkNonTerminals,
    ::rusty_lr::DefaultReduceActionError,
>;
#[doc = r" type alias for `MultiplePathError`"]
#[allow(non_camel_case_types, dead_code)]
pub type ChunkMultiplePathError = ::rusty_lr::glr::MultiplePathError<Token, ChunkNonTerminals>;
#[doc = r" An enum that represents non-terminal symbols"]
#[allow(non_camel_case_types)]
#[derive(
    Clone,
    Copy,
    std :: hash :: Hash,
    std :: cmp :: PartialEq,
    std :: cmp :: Eq,
    std :: cmp :: PartialOrd,
    std :: cmp :: Ord,
)]
pub enum ChunkNonTerminals {
    Chunk,
    Block,
    Statement,
    ReturnStatement,
    Var,
    PrefixExp,
    FunctionCall,
    Args,
    VarList,
    ExpList1,
    ExpList0,
    NameList,
    AttName,
    AttNameList,
    Attrib,
    Exp,
    Exp0,
    Exp1,
    Exp2,
    Exp3,
    Exp4,
    Exp5,
    Exp6,
    Exp7,
    Exp8,
    Exp9,
    Exp10,
    Exp11,
    Exp12,
    TableConstructor,
    FieldList1,
    FieldList,
    Field,
    FieldSep,
    FunctionDef,
    FuncBody,
    FuncName1,
    FuncName,
    ParList,
    _Statement_Plus39,
    _Statement_Star40,
    _ReturnStatement_Question41,
    _Group42,
    __Group42_Plus43,
    __Group42_Star44,
    _Group45,
    __Group45_Question46,
    _Group47,
    __Group47_Question48,
    _Group49,
    __Group49_Question50,
    _semicolon_Question51,
    _FieldSep_Question52,
    _ParList_Question53,
    _Group54,
    __Group54_Question55,
    Augmented,
}
impl std::fmt::Display for ChunkNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ChunkNonTerminals::Chunk => write!(f, "Chunk"),
            ChunkNonTerminals::Block => write!(f, "Block"),
            ChunkNonTerminals::Statement => write!(f, "Statement"),
            ChunkNonTerminals::ReturnStatement => write!(f, "ReturnStatement"),
            ChunkNonTerminals::Var => write!(f, "Var"),
            ChunkNonTerminals::PrefixExp => write!(f, "PrefixExp"),
            ChunkNonTerminals::FunctionCall => write!(f, "FunctionCall"),
            ChunkNonTerminals::Args => write!(f, "Args"),
            ChunkNonTerminals::VarList => write!(f, "VarList"),
            ChunkNonTerminals::ExpList1 => write!(f, "ExpList1"),
            ChunkNonTerminals::ExpList0 => write!(f, "ExpList0"),
            ChunkNonTerminals::NameList => write!(f, "NameList"),
            ChunkNonTerminals::AttName => write!(f, "AttName"),
            ChunkNonTerminals::AttNameList => write!(f, "AttNameList"),
            ChunkNonTerminals::Attrib => write!(f, "Attrib"),
            ChunkNonTerminals::Exp => write!(f, "Exp"),
            ChunkNonTerminals::Exp0 => write!(f, "Exp0"),
            ChunkNonTerminals::Exp1 => write!(f, "Exp1"),
            ChunkNonTerminals::Exp2 => write!(f, "Exp2"),
            ChunkNonTerminals::Exp3 => write!(f, "Exp3"),
            ChunkNonTerminals::Exp4 => write!(f, "Exp4"),
            ChunkNonTerminals::Exp5 => write!(f, "Exp5"),
            ChunkNonTerminals::Exp6 => write!(f, "Exp6"),
            ChunkNonTerminals::Exp7 => write!(f, "Exp7"),
            ChunkNonTerminals::Exp8 => write!(f, "Exp8"),
            ChunkNonTerminals::Exp9 => write!(f, "Exp9"),
            ChunkNonTerminals::Exp10 => write!(f, "Exp10"),
            ChunkNonTerminals::Exp11 => write!(f, "Exp11"),
            ChunkNonTerminals::Exp12 => write!(f, "Exp12"),
            ChunkNonTerminals::TableConstructor => write!(f, "TableConstructor"),
            ChunkNonTerminals::FieldList1 => write!(f, "FieldList1"),
            ChunkNonTerminals::FieldList => write!(f, "FieldList"),
            ChunkNonTerminals::Field => write!(f, "Field"),
            ChunkNonTerminals::FieldSep => write!(f, "FieldSep"),
            ChunkNonTerminals::FunctionDef => write!(f, "FunctionDef"),
            ChunkNonTerminals::FuncBody => write!(f, "FuncBody"),
            ChunkNonTerminals::FuncName1 => write!(f, "FuncName1"),
            ChunkNonTerminals::FuncName => write!(f, "FuncName"),
            ChunkNonTerminals::ParList => write!(f, "ParList"),
            ChunkNonTerminals::_Statement_Plus39 => write!(f, "Statement+"),
            ChunkNonTerminals::_Statement_Star40 => write!(f, "Statement*"),
            ChunkNonTerminals::_ReturnStatement_Question41 => write!(f, "ReturnStatement?"),
            ChunkNonTerminals::_Group42 => write!(f, "(elseif_, Exp, then_, Block)"),
            ChunkNonTerminals::__Group42_Plus43 => write!(f, "(elseif_, Exp, then_, Block)+"),
            ChunkNonTerminals::__Group42_Star44 => write!(f, "(elseif_, Exp, then_, Block)*"),
            ChunkNonTerminals::_Group45 => write!(f, "(else_, Block)"),
            ChunkNonTerminals::__Group45_Question46 => write!(f, "(else_, Block)?"),
            ChunkNonTerminals::_Group47 => write!(f, "(comma, Exp)"),
            ChunkNonTerminals::__Group47_Question48 => write!(f, "(comma, Exp)?"),
            ChunkNonTerminals::_Group49 => write!(f, "(equal, ExpList1)"),
            ChunkNonTerminals::__Group49_Question50 => write!(f, "(equal, ExpList1)?"),
            ChunkNonTerminals::_semicolon_Question51 => write!(f, "semicolon?"),
            ChunkNonTerminals::_FieldSep_Question52 => write!(f, "FieldSep?"),
            ChunkNonTerminals::_ParList_Question53 => write!(f, "ParList?"),
            ChunkNonTerminals::_Group54 => write!(f, "(comma, dotdotdot)"),
            ChunkNonTerminals::__Group54_Question55 => write!(f, "(comma, dotdotdot)?"),
            ChunkNonTerminals::Augmented => write!(f, "Augmented"),
        }
    }
}
impl std::fmt::Debug for ChunkNonTerminals {
    fn fmt(&self, f: &mut std::fmt::Formatter<'_>) -> std::fmt::Result {
        match self {
            ChunkNonTerminals::Chunk => write!(f, "Chunk"),
            ChunkNonTerminals::Block => write!(f, "Block"),
            ChunkNonTerminals::Statement => write!(f, "Statement"),
            ChunkNonTerminals::ReturnStatement => write!(f, "ReturnStatement"),
            ChunkNonTerminals::Var => write!(f, "Var"),
            ChunkNonTerminals::PrefixExp => write!(f, "PrefixExp"),
            ChunkNonTerminals::FunctionCall => write!(f, "FunctionCall"),
            ChunkNonTerminals::Args => write!(f, "Args"),
            ChunkNonTerminals::VarList => write!(f, "VarList"),
            ChunkNonTerminals::ExpList1 => write!(f, "ExpList1"),
            ChunkNonTerminals::ExpList0 => write!(f, "ExpList0"),
            ChunkNonTerminals::NameList => write!(f, "NameList"),
            ChunkNonTerminals::AttName => write!(f, "AttName"),
            ChunkNonTerminals::AttNameList => write!(f, "AttNameList"),
            ChunkNonTerminals::Attrib => write!(f, "Attrib"),
            ChunkNonTerminals::Exp => write!(f, "Exp"),
            ChunkNonTerminals::Exp0 => write!(f, "Exp0"),
            ChunkNonTerminals::Exp1 => write!(f, "Exp1"),
            ChunkNonTerminals::Exp2 => write!(f, "Exp2"),
            ChunkNonTerminals::Exp3 => write!(f, "Exp3"),
            ChunkNonTerminals::Exp4 => write!(f, "Exp4"),
            ChunkNonTerminals::Exp5 => write!(f, "Exp5"),
            ChunkNonTerminals::Exp6 => write!(f, "Exp6"),
            ChunkNonTerminals::Exp7 => write!(f, "Exp7"),
            ChunkNonTerminals::Exp8 => write!(f, "Exp8"),
            ChunkNonTerminals::Exp9 => write!(f, "Exp9"),
            ChunkNonTerminals::Exp10 => write!(f, "Exp10"),
            ChunkNonTerminals::Exp11 => write!(f, "Exp11"),
            ChunkNonTerminals::Exp12 => write!(f, "Exp12"),
            ChunkNonTerminals::TableConstructor => write!(f, "TableConstructor"),
            ChunkNonTerminals::FieldList1 => write!(f, "FieldList1"),
            ChunkNonTerminals::FieldList => write!(f, "FieldList"),
            ChunkNonTerminals::Field => write!(f, "Field"),
            ChunkNonTerminals::FieldSep => write!(f, "FieldSep"),
            ChunkNonTerminals::FunctionDef => write!(f, "FunctionDef"),
            ChunkNonTerminals::FuncBody => write!(f, "FuncBody"),
            ChunkNonTerminals::FuncName1 => write!(f, "FuncName1"),
            ChunkNonTerminals::FuncName => write!(f, "FuncName"),
            ChunkNonTerminals::ParList => write!(f, "ParList"),
            ChunkNonTerminals::_Statement_Plus39 => write!(f, "Statement+"),
            ChunkNonTerminals::_Statement_Star40 => write!(f, "Statement*"),
            ChunkNonTerminals::_ReturnStatement_Question41 => write!(f, "ReturnStatement?"),
            ChunkNonTerminals::_Group42 => write!(f, "(elseif_, Exp, then_, Block)"),
            ChunkNonTerminals::__Group42_Plus43 => write!(f, "(elseif_, Exp, then_, Block)+"),
            ChunkNonTerminals::__Group42_Star44 => write!(f, "(elseif_, Exp, then_, Block)*"),
            ChunkNonTerminals::_Group45 => write!(f, "(else_, Block)"),
            ChunkNonTerminals::__Group45_Question46 => write!(f, "(else_, Block)?"),
            ChunkNonTerminals::_Group47 => write!(f, "(comma, Exp)"),
            ChunkNonTerminals::__Group47_Question48 => write!(f, "(comma, Exp)?"),
            ChunkNonTerminals::_Group49 => write!(f, "(equal, ExpList1)"),
            ChunkNonTerminals::__Group49_Question50 => write!(f, "(equal, ExpList1)?"),
            ChunkNonTerminals::_semicolon_Question51 => write!(f, "semicolon?"),
            ChunkNonTerminals::_FieldSep_Question52 => write!(f, "FieldSep?"),
            ChunkNonTerminals::_ParList_Question53 => write!(f, "ParList?"),
            ChunkNonTerminals::_Group54 => write!(f, "(comma, dotdotdot)"),
            ChunkNonTerminals::__Group54_Question55 => write!(f, "(comma, dotdotdot)?"),
            ChunkNonTerminals::Augmented => write!(f, "Augmented"),
        }
    }
}
#[doc = r" enum for each non-terminal and terminal symbol, that actually hold data"]
#[allow(unused_braces, unused_parens, non_snake_case, non_camel_case_types)]
#[derive(Clone)]
pub enum ChunkNodeEnum {
    NonTerminals,
    Terminals(Token),
    Variant2(statement::Block),
    Variant3(Statement),
    Variant4(statement::ReturnStatement),
    Variant5(Expression),
    Variant6((Expression, Vec<Expression>)),
    Variant7(Vec<Expression>),
    Variant8(Vec<String>),
    Variant9(statement::AttName),
    Variant10(Vec<statement::AttName>),
    Variant11(Option<statement::Attrib>),
    Variant12(expression::ExprTable),
    Variant13(Vec<expression::TableConstructorFieldBuilder>),
    Variant14(expression::TableConstructorFieldBuilder),
    Variant15(expression::ExprFunction),
    Variant16(statement::FunctionName),
    Variant17(expression::ParameterList),
    Variant18(Vec<Statement>),
    Variant19(Option<statement::ReturnStatement>),
    Variant20((Expression, statement::Block)),
    Variant21(Vec<(Expression, statement::Block)>),
    Variant22(Option<statement::Block>),
    Variant23(Option<Expression>),
    Variant24(Option<Vec<Expression>>),
    Variant25(Option<Token>),
    Variant26(Option<expression::ParameterList>),
}
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut,
    dead_code
)]
impl ChunkNodeEnum {
    fn reduce_Chunk_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Block = if let ChunkNodeEnum::Variant2(Block) = __rustylr_args.pop().unwrap() {
            Block
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant2(Block))
    }
    fn reduce_Block_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Statement =
            if let ChunkNodeEnum::Variant18(Statement) = __rustylr_args.pop().unwrap() {
                Statement
            } else {
                unreachable!()
            };
        let mut ReturnStatement =
            if let ChunkNodeEnum::Variant19(ReturnStatement) = __rustylr_args.pop().unwrap() {
                ReturnStatement
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant2({
            statement::Block::new(Statement, ReturnStatement)
        }))
    }
    fn reduce_Statement_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant3({ Statement::None }))
    }
    fn reduce_Statement_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut VarList = if let ChunkNodeEnum::Variant7(VarList) = __rustylr_args.pop().unwrap() {
            VarList
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut ExpList1 = if let ChunkNodeEnum::Variant7(ExpList1) = __rustylr_args.pop().unwrap()
        {
            ExpList1
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant3({
            Statement::Assignment(statement::StmtAssignment::new(VarList, ExpList1))
        }))
    }
    fn reduce_Statement_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut FunctionCall =
            if let ChunkNodeEnum::Variant6(FunctionCall) = __rustylr_args.pop().unwrap() {
                FunctionCall
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant3({
            Statement::FunctionCall(statement::StmtFunctionCall::new(
                FunctionCall.0,
                FunctionCall.1,
            ))
        }))
    }
    fn reduce_Statement_3(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant3({
            Statement::Label(statement::StmtLabel::new(
                ident.token_type.into_ident().unwrap(),
            ))
        }))
    }
    fn reduce_Statement_4(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant3({
            Statement::Break(statement::StmtBreak {})
        }))
    }
    fn reduce_Statement_5(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant3({
            Statement::Goto(statement::StmtGoto::new(
                ident.token_type.into_ident().unwrap(),
            ))
        }))
    }
    fn reduce_Statement_6(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut Block = if let ChunkNodeEnum::Variant2(Block) = __rustylr_args.pop().unwrap() {
            Block
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant3({
            Statement::Do(statement::StmtDo::new(Block))
        }))
    }
    fn reduce_Statement_7(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut Exp = if let ChunkNodeEnum::Variant5(Exp) = __rustylr_args.pop().unwrap() {
            Exp
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut Block = if let ChunkNodeEnum::Variant2(Block) = __rustylr_args.pop().unwrap() {
            Block
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant3({
            Statement::While(statement::StmtWhile::new(Exp, Block))
        }))
    }
    fn reduce_Statement_8(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut Block = if let ChunkNodeEnum::Variant2(Block) = __rustylr_args.pop().unwrap() {
            Block
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut Exp = if let ChunkNodeEnum::Variant5(Exp) = __rustylr_args.pop().unwrap() {
            Exp
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant3({
            Statement::Repeat(statement::StmtRepeat::new(Block, Exp))
        }))
    }
    fn reduce_Statement_9(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut Exp = if let ChunkNodeEnum::Variant5(Exp) = __rustylr_args.pop().unwrap() {
            Exp
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut Block = if let ChunkNodeEnum::Variant2(Block) = __rustylr_args.pop().unwrap() {
            Block
        } else {
            unreachable!()
        };
        let mut elseifs = if let ChunkNodeEnum::Variant21(elseifs) = __rustylr_args.pop().unwrap() {
            elseifs
        } else {
            unreachable!()
        };
        let mut else_ = if let ChunkNodeEnum::Variant22(else_) = __rustylr_args.pop().unwrap() {
            else_
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant3({
            Statement::If(statement::StmtIf::new(Exp, Block, elseifs, else_))
        }))
    }
    fn reduce_Statement_10(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut start = if let ChunkNodeEnum::Variant5(start) = __rustylr_args.pop().unwrap() {
            start
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut end = if let ChunkNodeEnum::Variant5(end) = __rustylr_args.pop().unwrap() {
            end
        } else {
            unreachable!()
        };
        let mut step = if let ChunkNodeEnum::Variant23(step) = __rustylr_args.pop().unwrap() {
            step
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut Block = if let ChunkNodeEnum::Variant2(Block) = __rustylr_args.pop().unwrap() {
            Block
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant3({
            Statement::For(statement::StmtFor::new(
                ident.token_type.into_ident().unwrap(),
                start,
                end,
                step.unwrap_or_else(|| Expression::from(1)),
                Block,
            ))
        }))
    }
    fn reduce_Statement_11(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut NameList = if let ChunkNodeEnum::Variant8(NameList) = __rustylr_args.pop().unwrap()
        {
            NameList
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut ExpList1 = if let ChunkNodeEnum::Variant7(ExpList1) = __rustylr_args.pop().unwrap()
        {
            ExpList1
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut Block = if let ChunkNodeEnum::Variant2(Block) = __rustylr_args.pop().unwrap() {
            Block
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant3({
            Statement::ForGeneric(statement::StmtForGeneric::new(NameList, ExpList1, Block))
        }))
    }
    fn reduce_Statement_12(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut FuncName = if let ChunkNodeEnum::Variant16(FuncName) = __rustylr_args.pop().unwrap()
        {
            FuncName
        } else {
            unreachable!()
        };
        let mut FuncBody = if let ChunkNodeEnum::Variant15(FuncBody) = __rustylr_args.pop().unwrap()
        {
            FuncBody
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant3({
            Statement::FunctionDefinition(statement::StmtFunctionDefinition::new(
                FuncName, FuncBody,
            ))
        }))
    }
    fn reduce_Statement_13(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        __rustylr_args.pop();
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        let mut FuncBody = if let ChunkNodeEnum::Variant15(FuncBody) = __rustylr_args.pop().unwrap()
        {
            FuncBody
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant3({
            Statement::FunctionDefinitionLocal(statement::StmtFunctionDefinitionLocal::new(
                ident.token_type.into_ident().unwrap(),
                FuncBody,
            ))
        }))
    }
    fn reduce_Statement_14(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut AttNameList =
            if let ChunkNodeEnum::Variant10(AttNameList) = __rustylr_args.pop().unwrap() {
                AttNameList
            } else {
                unreachable!()
            };
        let mut rhs_list = if let ChunkNodeEnum::Variant24(rhs_list) = __rustylr_args.pop().unwrap()
        {
            rhs_list
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant3({
            Statement::LocalDeclaration(statement::StmtLocalDeclaration::new(AttNameList, rhs_list))
        }))
    }
    fn reduce_ReturnStatement_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut ExpList0 = if let ChunkNodeEnum::Variant7(ExpList0) = __rustylr_args.pop().unwrap()
        {
            ExpList0
        } else {
            unreachable!()
        };
        let mut semicolon =
            if let ChunkNodeEnum::Variant25(semicolon) = __rustylr_args.pop().unwrap() {
                semicolon
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant4({
            statement::ReturnStatement::new(ExpList0)
        }))
    }
    fn reduce_Var_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::new_ident(ident.token_type.into_ident().unwrap())
        }))
    }
    fn reduce_Var_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut PrefixExp =
            if let ChunkNodeEnum::Variant5(PrefixExp) = __rustylr_args.pop().unwrap() {
                PrefixExp
            } else {
                unreachable!()
            };
        __rustylr_args.pop();
        let mut Exp = if let ChunkNodeEnum::Variant5(Exp) = __rustylr_args.pop().unwrap() {
            Exp
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant5({
            Expression::TableIndex(expression::ExprTableIndex {
                table: Box::new(PrefixExp),
                index: Box::new(Exp),
            })
        }))
    }
    fn reduce_Var_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut PrefixExp =
            if let ChunkNodeEnum::Variant5(PrefixExp) = __rustylr_args.pop().unwrap() {
                PrefixExp
            } else {
                unreachable!()
            };
        __rustylr_args.pop();
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            let member = ident.token_type.into_ident().unwrap();
            Expression::TableIndex(expression::ExprTableIndex {
                table: Box::new(PrefixExp),
                index: Box::new(Expression::from(member)),
            })
        }))
    }
    fn reduce_PrefixExp_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Var = if let ChunkNodeEnum::Variant5(Var) = __rustylr_args.pop().unwrap() {
            Var
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Var))
    }
    fn reduce_PrefixExp_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut FunctionCall =
            if let ChunkNodeEnum::Variant6(FunctionCall) = __rustylr_args.pop().unwrap() {
                FunctionCall
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant5({
            Expression::FunctionCall(expression::ExprFunctionCall::new(
                FunctionCall.0,
                FunctionCall.1,
            ))
        }))
    }
    fn reduce_PrefixExp_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut Exp = if let ChunkNodeEnum::Variant5(Exp) = __rustylr_args.pop().unwrap() {
            Exp
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant5(Exp))
    }
    fn reduce_FunctionCall_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut PrefixExp =
            if let ChunkNodeEnum::Variant5(PrefixExp) = __rustylr_args.pop().unwrap() {
                PrefixExp
            } else {
                unreachable!()
            };
        let mut Args = if let ChunkNodeEnum::Variant7(Args) = __rustylr_args.pop().unwrap() {
            Args
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant6({ (PrefixExp, Args) }))
    }
    fn reduce_FunctionCall_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut PrefixExp =
            if let ChunkNodeEnum::Variant5(PrefixExp) = __rustylr_args.pop().unwrap() {
                PrefixExp
            } else {
                unreachable!()
            };
        __rustylr_args.pop();
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        let mut Args = if let ChunkNodeEnum::Variant7(Args) = __rustylr_args.pop().unwrap() {
            Args
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant6({
            let arg0 = PrefixExp.clone();
            let mut args = Vec::with_capacity(Args.len() + 1);
            args.push(arg0);
            args.extend(Args);
            let member = Expression::TableIndex(expression::ExprTableIndex::new(
                PrefixExp,
                Expression::from(ident.token_type.into_ident().unwrap()),
            ));
            (member, args)
        }))
    }
    fn reduce_Args_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut ExpList0 = if let ChunkNodeEnum::Variant7(ExpList0) = __rustylr_args.pop().unwrap()
        {
            ExpList0
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant7(ExpList0))
    }
    fn reduce_Args_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut TableConstructor =
            if let ChunkNodeEnum::Variant12(TableConstructor) = __rustylr_args.pop().unwrap() {
                TableConstructor
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant7({
            let table_expr = Expression::Table(TableConstructor);
            vec![table_expr]
        }))
    }
    fn reduce_Args_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut string_literal =
            if let ChunkNodeEnum::Terminals(string_literal) = __rustylr_args.pop().unwrap() {
                string_literal
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant7({
            vec![Expression::from(
                string_literal.token_type.into_string().unwrap(),
            )]
        }))
    }
    fn reduce_VarList_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut VarList = if let ChunkNodeEnum::Variant7(VarList) = __rustylr_args.pop().unwrap() {
            VarList
        } else {
            unreachable!()
        };
        let mut comma = if let ChunkNodeEnum::Terminals(comma) = __rustylr_args.pop().unwrap() {
            comma
        } else {
            unreachable!()
        };
        let mut Var = if let ChunkNodeEnum::Variant5(Var) = __rustylr_args.pop().unwrap() {
            Var
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant7({
            VarList.push(Var);
            VarList
        }))
    }
    fn reduce_VarList_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Var = if let ChunkNodeEnum::Variant5(Var) = __rustylr_args.pop().unwrap() {
            Var
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant7({ vec![Var] }))
    }
    fn reduce_ExpList1_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut ExpList1 = if let ChunkNodeEnum::Variant7(ExpList1) = __rustylr_args.pop().unwrap()
        {
            ExpList1
        } else {
            unreachable!()
        };
        let mut comma = if let ChunkNodeEnum::Terminals(comma) = __rustylr_args.pop().unwrap() {
            comma
        } else {
            unreachable!()
        };
        let mut Exp = if let ChunkNodeEnum::Variant5(Exp) = __rustylr_args.pop().unwrap() {
            Exp
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant7({
            ExpList1.push(Exp);
            ExpList1
        }))
    }
    fn reduce_ExpList1_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp = if let ChunkNodeEnum::Variant5(Exp) = __rustylr_args.pop().unwrap() {
            Exp
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant7({ vec![Exp] }))
    }
    fn reduce_ExpList0_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut ExpList1 = if let ChunkNodeEnum::Variant7(ExpList1) = __rustylr_args.pop().unwrap()
        {
            ExpList1
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant7({ ExpList1 }))
    }
    fn reduce_ExpList0_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant7({ vec![] }))
    }
    fn reduce_NameList_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut NameList = if let ChunkNodeEnum::Variant8(NameList) = __rustylr_args.pop().unwrap()
        {
            NameList
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant8({
            NameList.push(ident.token_type.into_ident().unwrap());
            NameList
        }))
    }
    fn reduce_NameList_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant8({
            vec![ident.token_type.into_ident().unwrap()]
        }))
    }
    fn reduce_AttName_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        let mut Attrib = if let ChunkNodeEnum::Variant11(Attrib) = __rustylr_args.pop().unwrap() {
            Attrib
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant9({
            statement::AttName::new(ident.token_type.into_ident().unwrap(), Attrib)
        }))
    }
    fn reduce_AttNameList_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut AttNameList =
            if let ChunkNodeEnum::Variant10(AttNameList) = __rustylr_args.pop().unwrap() {
                AttNameList
            } else {
                unreachable!()
            };
        __rustylr_args.pop();
        let mut AttName = if let ChunkNodeEnum::Variant9(AttName) = __rustylr_args.pop().unwrap() {
            AttName
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant10({
            AttNameList.push(AttName);
            AttNameList
        }))
    }
    fn reduce_AttNameList_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut AttName = if let ChunkNodeEnum::Variant9(AttName) = __rustylr_args.pop().unwrap() {
            AttName
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant10({ vec![AttName] }))
    }
    fn reduce_Attrib_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant11({
            let s = ident.token_type.into_ident().unwrap();
            match s.as_str() {
                "const" => Some(statement::Attrib::Const),
                "close" => Some(statement::Attrib::Close),
                _ => Some(statement::Attrib::Const),
            }
        }))
    }
    fn reduce_Attrib_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant11({ None }))
    }
    fn reduce_Exp_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp12 = if let ChunkNodeEnum::Variant5(Exp12) = __rustylr_args.pop().unwrap() {
            Exp12
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp12))
    }
    fn reduce_Exp0_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut numeric_literal =
            if let ChunkNodeEnum::Terminals(numeric_literal) = __rustylr_args.pop().unwrap() {
                numeric_literal
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant5({
            Expression::from(numeric_literal.token_type.into_numeric().unwrap())
        }))
    }
    fn reduce_Exp0_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut nil = if let ChunkNodeEnum::Terminals(nil) = __rustylr_args.pop().unwrap() {
            nil
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Nil(expression::ExprNil)
        }))
    }
    fn reduce_Exp0_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut string_literal =
            if let ChunkNodeEnum::Terminals(string_literal) = __rustylr_args.pop().unwrap() {
                string_literal
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant5({
            Expression::from(string_literal.token_type.into_string().unwrap())
        }))
    }
    fn reduce_Exp0_3(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut bool_ = if let ChunkNodeEnum::Terminals(bool_) = __rustylr_args.pop().unwrap() {
            bool_
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::from(bool_.token_type.into_bool().unwrap())
        }))
    }
    fn reduce_Exp0_4(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut dotdotdot =
            if let ChunkNodeEnum::Terminals(dotdotdot) = __rustylr_args.pop().unwrap() {
                dotdotdot
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant5({ Expression::Variadic }))
    }
    fn reduce_Exp0_5(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut FunctionDef =
            if let ChunkNodeEnum::Variant15(FunctionDef) = __rustylr_args.pop().unwrap() {
                FunctionDef
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Function(FunctionDef)
        }))
    }
    fn reduce_Exp0_6(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut PrefixExp =
            if let ChunkNodeEnum::Variant5(PrefixExp) = __rustylr_args.pop().unwrap() {
                PrefixExp
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant5(PrefixExp))
    }
    fn reduce_Exp0_7(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut TableConstructor =
            if let ChunkNodeEnum::Variant12(TableConstructor) = __rustylr_args.pop().unwrap() {
                TableConstructor
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Table(TableConstructor)
        }))
    }
    fn reduce_Exp1_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp0 = if let ChunkNodeEnum::Variant5(Exp0) = __rustylr_args.pop().unwrap() {
            Exp0
        } else {
            unreachable!()
        };
        let mut caret = if let ChunkNodeEnum::Terminals(caret) = __rustylr_args.pop().unwrap() {
            caret
        } else {
            unreachable!()
        };
        let mut Exp1 = if let ChunkNodeEnum::Variant5(Exp1) = __rustylr_args.pop().unwrap() {
            Exp1
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::Pow(Box::new(Exp0), Box::new(Exp1)))
        }))
    }
    fn reduce_Exp1_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp0 = if let ChunkNodeEnum::Variant5(Exp0) = __rustylr_args.pop().unwrap() {
            Exp0
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp0))
    }
    fn reduce_Exp2_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut not_ = if let ChunkNodeEnum::Terminals(not_) = __rustylr_args.pop().unwrap() {
            not_
        } else {
            unreachable!()
        };
        let mut Exp2 = if let ChunkNodeEnum::Variant5(Exp2) = __rustylr_args.pop().unwrap() {
            Exp2
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Unary(expression::ExprUnary::LogicalNot(Box::new(Exp2)))
        }))
    }
    fn reduce_Exp2_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut hash = if let ChunkNodeEnum::Terminals(hash) = __rustylr_args.pop().unwrap() {
            hash
        } else {
            unreachable!()
        };
        let mut Exp2 = if let ChunkNodeEnum::Variant5(Exp2) = __rustylr_args.pop().unwrap() {
            Exp2
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Unary(expression::ExprUnary::Length(Box::new(Exp2)))
        }))
    }
    fn reduce_Exp2_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut minus = if let ChunkNodeEnum::Terminals(minus) = __rustylr_args.pop().unwrap() {
            minus
        } else {
            unreachable!()
        };
        let mut Exp2 = if let ChunkNodeEnum::Variant5(Exp2) = __rustylr_args.pop().unwrap() {
            Exp2
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Unary(expression::ExprUnary::Minus(Box::new(Exp2)))
        }))
    }
    fn reduce_Exp2_3(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut tilde = if let ChunkNodeEnum::Terminals(tilde) = __rustylr_args.pop().unwrap() {
            tilde
        } else {
            unreachable!()
        };
        let mut Exp2 = if let ChunkNodeEnum::Variant5(Exp2) = __rustylr_args.pop().unwrap() {
            Exp2
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Unary(expression::ExprUnary::BitwiseNot(Box::new(Exp2)))
        }))
    }
    fn reduce_Exp2_4(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp1 = if let ChunkNodeEnum::Variant5(Exp1) = __rustylr_args.pop().unwrap() {
            Exp1
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp1))
    }
    fn reduce_Exp3_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp3 = if let ChunkNodeEnum::Variant5(Exp3) = __rustylr_args.pop().unwrap() {
            Exp3
        } else {
            unreachable!()
        };
        let mut asterisk = if let ChunkNodeEnum::Terminals(asterisk) = __rustylr_args.pop().unwrap()
        {
            asterisk
        } else {
            unreachable!()
        };
        let mut Exp2 = if let ChunkNodeEnum::Variant5(Exp2) = __rustylr_args.pop().unwrap() {
            Exp2
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::Mul(Box::new(Exp3), Box::new(Exp2)))
        }))
    }
    fn reduce_Exp3_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp3 = if let ChunkNodeEnum::Variant5(Exp3) = __rustylr_args.pop().unwrap() {
            Exp3
        } else {
            unreachable!()
        };
        let mut slash = if let ChunkNodeEnum::Terminals(slash) = __rustylr_args.pop().unwrap() {
            slash
        } else {
            unreachable!()
        };
        let mut Exp2 = if let ChunkNodeEnum::Variant5(Exp2) = __rustylr_args.pop().unwrap() {
            Exp2
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::Div(Box::new(Exp3), Box::new(Exp2)))
        }))
    }
    fn reduce_Exp3_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp3 = if let ChunkNodeEnum::Variant5(Exp3) = __rustylr_args.pop().unwrap() {
            Exp3
        } else {
            unreachable!()
        };
        let mut slashslash =
            if let ChunkNodeEnum::Terminals(slashslash) = __rustylr_args.pop().unwrap() {
                slashslash
            } else {
                unreachable!()
            };
        let mut Exp2 = if let ChunkNodeEnum::Variant5(Exp2) = __rustylr_args.pop().unwrap() {
            Exp2
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::FloorDiv(
                Box::new(Exp3),
                Box::new(Exp2),
            ))
        }))
    }
    fn reduce_Exp3_3(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp3 = if let ChunkNodeEnum::Variant5(Exp3) = __rustylr_args.pop().unwrap() {
            Exp3
        } else {
            unreachable!()
        };
        let mut percent = if let ChunkNodeEnum::Terminals(percent) = __rustylr_args.pop().unwrap() {
            percent
        } else {
            unreachable!()
        };
        let mut Exp2 = if let ChunkNodeEnum::Variant5(Exp2) = __rustylr_args.pop().unwrap() {
            Exp2
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::Mod(Box::new(Exp3), Box::new(Exp2)))
        }))
    }
    fn reduce_Exp3_4(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp2 = if let ChunkNodeEnum::Variant5(Exp2) = __rustylr_args.pop().unwrap() {
            Exp2
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp2))
    }
    fn reduce_Exp4_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp4 = if let ChunkNodeEnum::Variant5(Exp4) = __rustylr_args.pop().unwrap() {
            Exp4
        } else {
            unreachable!()
        };
        let mut plus = if let ChunkNodeEnum::Terminals(plus) = __rustylr_args.pop().unwrap() {
            plus
        } else {
            unreachable!()
        };
        let mut Exp3 = if let ChunkNodeEnum::Variant5(Exp3) = __rustylr_args.pop().unwrap() {
            Exp3
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::Add(Box::new(Exp4), Box::new(Exp3)))
        }))
    }
    fn reduce_Exp4_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp4 = if let ChunkNodeEnum::Variant5(Exp4) = __rustylr_args.pop().unwrap() {
            Exp4
        } else {
            unreachable!()
        };
        let mut minus = if let ChunkNodeEnum::Terminals(minus) = __rustylr_args.pop().unwrap() {
            minus
        } else {
            unreachable!()
        };
        let mut Exp3 = if let ChunkNodeEnum::Variant5(Exp3) = __rustylr_args.pop().unwrap() {
            Exp3
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::Sub(Box::new(Exp4), Box::new(Exp3)))
        }))
    }
    fn reduce_Exp4_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp3 = if let ChunkNodeEnum::Variant5(Exp3) = __rustylr_args.pop().unwrap() {
            Exp3
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp3))
    }
    fn reduce_Exp5_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp4 = if let ChunkNodeEnum::Variant5(Exp4) = __rustylr_args.pop().unwrap() {
            Exp4
        } else {
            unreachable!()
        };
        let mut dotdot = if let ChunkNodeEnum::Terminals(dotdot) = __rustylr_args.pop().unwrap() {
            dotdot
        } else {
            unreachable!()
        };
        let mut Exp5 = if let ChunkNodeEnum::Variant5(Exp5) = __rustylr_args.pop().unwrap() {
            Exp5
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::Concat(
                Box::new(Exp4),
                Box::new(Exp5),
            ))
        }))
    }
    fn reduce_Exp5_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp4 = if let ChunkNodeEnum::Variant5(Exp4) = __rustylr_args.pop().unwrap() {
            Exp4
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp4))
    }
    fn reduce_Exp6_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp6 = if let ChunkNodeEnum::Variant5(Exp6) = __rustylr_args.pop().unwrap() {
            Exp6
        } else {
            unreachable!()
        };
        let mut lessless = if let ChunkNodeEnum::Terminals(lessless) = __rustylr_args.pop().unwrap()
        {
            lessless
        } else {
            unreachable!()
        };
        let mut Exp5 = if let ChunkNodeEnum::Variant5(Exp5) = __rustylr_args.pop().unwrap() {
            Exp5
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::ShiftLeft(
                Box::new(Exp6),
                Box::new(Exp5),
            ))
        }))
    }
    fn reduce_Exp6_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp6 = if let ChunkNodeEnum::Variant5(Exp6) = __rustylr_args.pop().unwrap() {
            Exp6
        } else {
            unreachable!()
        };
        let mut greatergreater =
            if let ChunkNodeEnum::Terminals(greatergreater) = __rustylr_args.pop().unwrap() {
                greatergreater
            } else {
                unreachable!()
            };
        let mut Exp5 = if let ChunkNodeEnum::Variant5(Exp5) = __rustylr_args.pop().unwrap() {
            Exp5
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::ShiftRight(
                Box::new(Exp6),
                Box::new(Exp5),
            ))
        }))
    }
    fn reduce_Exp6_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp5 = if let ChunkNodeEnum::Variant5(Exp5) = __rustylr_args.pop().unwrap() {
            Exp5
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp5))
    }
    fn reduce_Exp7_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp7 = if let ChunkNodeEnum::Variant5(Exp7) = __rustylr_args.pop().unwrap() {
            Exp7
        } else {
            unreachable!()
        };
        let mut ampersand =
            if let ChunkNodeEnum::Terminals(ampersand) = __rustylr_args.pop().unwrap() {
                ampersand
            } else {
                unreachable!()
            };
        let mut Exp6 = if let ChunkNodeEnum::Variant5(Exp6) = __rustylr_args.pop().unwrap() {
            Exp6
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::BitwiseAnd(
                Box::new(Exp7),
                Box::new(Exp6),
            ))
        }))
    }
    fn reduce_Exp7_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp6 = if let ChunkNodeEnum::Variant5(Exp6) = __rustylr_args.pop().unwrap() {
            Exp6
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp6))
    }
    fn reduce_Exp8_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp8 = if let ChunkNodeEnum::Variant5(Exp8) = __rustylr_args.pop().unwrap() {
            Exp8
        } else {
            unreachable!()
        };
        let mut tilde = if let ChunkNodeEnum::Terminals(tilde) = __rustylr_args.pop().unwrap() {
            tilde
        } else {
            unreachable!()
        };
        let mut Exp7 = if let ChunkNodeEnum::Variant5(Exp7) = __rustylr_args.pop().unwrap() {
            Exp7
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::BitwiseXor(
                Box::new(Exp8),
                Box::new(Exp7),
            ))
        }))
    }
    fn reduce_Exp8_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp7 = if let ChunkNodeEnum::Variant5(Exp7) = __rustylr_args.pop().unwrap() {
            Exp7
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp7))
    }
    fn reduce_Exp9_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp9 = if let ChunkNodeEnum::Variant5(Exp9) = __rustylr_args.pop().unwrap() {
            Exp9
        } else {
            unreachable!()
        };
        let mut pipe = if let ChunkNodeEnum::Terminals(pipe) = __rustylr_args.pop().unwrap() {
            pipe
        } else {
            unreachable!()
        };
        let mut Exp8 = if let ChunkNodeEnum::Variant5(Exp8) = __rustylr_args.pop().unwrap() {
            Exp8
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::BitwiseOr(
                Box::new(Exp9),
                Box::new(Exp8),
            ))
        }))
    }
    fn reduce_Exp9_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp8 = if let ChunkNodeEnum::Variant5(Exp8) = __rustylr_args.pop().unwrap() {
            Exp8
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp8))
    }
    fn reduce_Exp10_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp10 = if let ChunkNodeEnum::Variant5(Exp10) = __rustylr_args.pop().unwrap() {
            Exp10
        } else {
            unreachable!()
        };
        let mut less = if let ChunkNodeEnum::Terminals(less) = __rustylr_args.pop().unwrap() {
            less
        } else {
            unreachable!()
        };
        let mut Exp9 = if let ChunkNodeEnum::Variant5(Exp9) = __rustylr_args.pop().unwrap() {
            Exp9
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::LessThan(
                Box::new(Exp10),
                Box::new(Exp9),
            ))
        }))
    }
    fn reduce_Exp10_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp10 = if let ChunkNodeEnum::Variant5(Exp10) = __rustylr_args.pop().unwrap() {
            Exp10
        } else {
            unreachable!()
        };
        let mut lessequal =
            if let ChunkNodeEnum::Terminals(lessequal) = __rustylr_args.pop().unwrap() {
                lessequal
            } else {
                unreachable!()
            };
        let mut Exp9 = if let ChunkNodeEnum::Variant5(Exp9) = __rustylr_args.pop().unwrap() {
            Exp9
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::LessEqual(
                Box::new(Exp10),
                Box::new(Exp9),
            ))
        }))
    }
    fn reduce_Exp10_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp10 = if let ChunkNodeEnum::Variant5(Exp10) = __rustylr_args.pop().unwrap() {
            Exp10
        } else {
            unreachable!()
        };
        let mut greater = if let ChunkNodeEnum::Terminals(greater) = __rustylr_args.pop().unwrap() {
            greater
        } else {
            unreachable!()
        };
        let mut Exp9 = if let ChunkNodeEnum::Variant5(Exp9) = __rustylr_args.pop().unwrap() {
            Exp9
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::GreaterThan(
                Box::new(Exp10),
                Box::new(Exp9),
            ))
        }))
    }
    fn reduce_Exp10_3(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp10 = if let ChunkNodeEnum::Variant5(Exp10) = __rustylr_args.pop().unwrap() {
            Exp10
        } else {
            unreachable!()
        };
        let mut greaterequal =
            if let ChunkNodeEnum::Terminals(greaterequal) = __rustylr_args.pop().unwrap() {
                greaterequal
            } else {
                unreachable!()
            };
        let mut Exp9 = if let ChunkNodeEnum::Variant5(Exp9) = __rustylr_args.pop().unwrap() {
            Exp9
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::GreaterEqual(
                Box::new(Exp10),
                Box::new(Exp9),
            ))
        }))
    }
    fn reduce_Exp10_4(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp10 = if let ChunkNodeEnum::Variant5(Exp10) = __rustylr_args.pop().unwrap() {
            Exp10
        } else {
            unreachable!()
        };
        let mut tildeequal =
            if let ChunkNodeEnum::Terminals(tildeequal) = __rustylr_args.pop().unwrap() {
                tildeequal
            } else {
                unreachable!()
            };
        let mut Exp9 = if let ChunkNodeEnum::Variant5(Exp9) = __rustylr_args.pop().unwrap() {
            Exp9
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::NotEqual(
                Box::new(Exp10),
                Box::new(Exp9),
            ))
        }))
    }
    fn reduce_Exp10_5(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp10 = if let ChunkNodeEnum::Variant5(Exp10) = __rustylr_args.pop().unwrap() {
            Exp10
        } else {
            unreachable!()
        };
        let mut equalequal =
            if let ChunkNodeEnum::Terminals(equalequal) = __rustylr_args.pop().unwrap() {
                equalequal
            } else {
                unreachable!()
            };
        let mut Exp9 = if let ChunkNodeEnum::Variant5(Exp9) = __rustylr_args.pop().unwrap() {
            Exp9
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::Equal(
                Box::new(Exp10),
                Box::new(Exp9),
            ))
        }))
    }
    fn reduce_Exp10_6(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp9 = if let ChunkNodeEnum::Variant5(Exp9) = __rustylr_args.pop().unwrap() {
            Exp9
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp9))
    }
    fn reduce_Exp11_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp11 = if let ChunkNodeEnum::Variant5(Exp11) = __rustylr_args.pop().unwrap() {
            Exp11
        } else {
            unreachable!()
        };
        let mut and_ = if let ChunkNodeEnum::Terminals(and_) = __rustylr_args.pop().unwrap() {
            and_
        } else {
            unreachable!()
        };
        let mut Exp10 = if let ChunkNodeEnum::Variant5(Exp10) = __rustylr_args.pop().unwrap() {
            Exp10
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::LogicalAnd(
                Box::new(Exp11),
                Box::new(Exp10),
            ))
        }))
    }
    fn reduce_Exp11_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp10 = if let ChunkNodeEnum::Variant5(Exp10) = __rustylr_args.pop().unwrap() {
            Exp10
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp10))
    }
    fn reduce_Exp12_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp12 = if let ChunkNodeEnum::Variant5(Exp12) = __rustylr_args.pop().unwrap() {
            Exp12
        } else {
            unreachable!()
        };
        let mut or_ = if let ChunkNodeEnum::Terminals(or_) = __rustylr_args.pop().unwrap() {
            or_
        } else {
            unreachable!()
        };
        let mut Exp11 = if let ChunkNodeEnum::Variant5(Exp11) = __rustylr_args.pop().unwrap() {
            Exp11
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5({
            Expression::Binary(expression::ExprBinary::LogicalOr(
                Box::new(Exp12),
                Box::new(Exp11),
            ))
        }))
    }
    fn reduce_Exp12_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp11 = if let ChunkNodeEnum::Variant5(Exp11) = __rustylr_args.pop().unwrap() {
            Exp11
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant5(Exp11))
    }
    fn reduce_TableConstructor_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut FieldList =
            if let ChunkNodeEnum::Variant13(FieldList) = __rustylr_args.pop().unwrap() {
                FieldList
            } else {
                unreachable!()
            };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant12({
            let mut table = expression::ExprTable::new();
            let mut consecutive: IntType = 1;
            for field in FieldList.into_iter() {
                match field {
                    expression::TableConstructorFieldBuilder::KeyValue(k, v) => {
                        table.fields.push(expression::TableField::new(k, v));
                    }
                    expression::TableConstructorFieldBuilder::NameValue(name, v) => {
                        table
                            .fields
                            .push(expression::TableField::new(name.into(), v));
                    }
                    expression::TableConstructorFieldBuilder::Value(v) => {
                        let idx = consecutive;
                        consecutive += 1;
                        table
                            .fields
                            .push(expression::TableField::new(idx.into(), v));
                    }
                }
            }
            table
        }))
    }
    fn reduce_FieldList1_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut FieldList1 =
            if let ChunkNodeEnum::Variant13(FieldList1) = __rustylr_args.pop().unwrap() {
                FieldList1
            } else {
                unreachable!()
            };
        __rustylr_args.pop();
        let mut Field = if let ChunkNodeEnum::Variant14(Field) = __rustylr_args.pop().unwrap() {
            Field
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant13({
            FieldList1.push(Field);
            FieldList1
        }))
    }
    fn reduce_FieldList1_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Field = if let ChunkNodeEnum::Variant14(Field) = __rustylr_args.pop().unwrap() {
            Field
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant13({ vec![Field] }))
    }
    fn reduce_FieldList_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut FieldList1 =
            if let ChunkNodeEnum::Variant13(FieldList1) = __rustylr_args.pop().unwrap() {
                FieldList1
            } else {
                unreachable!()
            };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant13({ FieldList1 }))
    }
    fn reduce_FieldList_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant13({ vec![] }))
    }
    fn reduce_Field_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut k = if let ChunkNodeEnum::Variant5(k) = __rustylr_args.pop().unwrap() {
            k
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        __rustylr_args.pop();
        let mut v = if let ChunkNodeEnum::Variant5(v) = __rustylr_args.pop().unwrap() {
            v
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant14({
            expression::TableConstructorFieldBuilder::KeyValue(k, v)
        }))
    }
    fn reduce_Field_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut Exp = if let ChunkNodeEnum::Variant5(Exp) = __rustylr_args.pop().unwrap() {
            Exp
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant14({
            let name = ident.token_type.into_ident().unwrap();
            expression::TableConstructorFieldBuilder::NameValue(name, Exp)
        }))
    }
    fn reduce_Field_2(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Exp = if let ChunkNodeEnum::Variant5(Exp) = __rustylr_args.pop().unwrap() {
            Exp
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant14({
            expression::TableConstructorFieldBuilder::Value(Exp)
        }))
    }
    fn reduce_FieldSep_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(ChunkNodeEnum::NonTerminals)
    }
    fn reduce_FieldSep_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(ChunkNodeEnum::NonTerminals)
    }
    fn reduce_FunctionDef_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut FuncBody = if let ChunkNodeEnum::Variant15(FuncBody) = __rustylr_args.pop().unwrap()
        {
            FuncBody
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant15(FuncBody))
    }
    fn reduce_FuncBody_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut ParList = if let ChunkNodeEnum::Variant26(ParList) = __rustylr_args.pop().unwrap() {
            ParList
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        let mut Block = if let ChunkNodeEnum::Variant2(Block) = __rustylr_args.pop().unwrap() {
            Block
        } else {
            unreachable!()
        };
        __rustylr_args.pop();
        Ok(ChunkNodeEnum::Variant15({
            expression::ExprFunction::new(ParList, Block)
        }))
    }
    fn reduce_FuncName1_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut FuncName1 =
            if let ChunkNodeEnum::Variant8(FuncName1) = __rustylr_args.pop().unwrap() {
                FuncName1
            } else {
                unreachable!()
            };
        let mut dot = if let ChunkNodeEnum::Terminals(dot) = __rustylr_args.pop().unwrap() {
            dot
        } else {
            unreachable!()
        };
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant8({
            FuncName1.push(ident.token_type.into_ident().unwrap());
            FuncName1
        }))
    }
    fn reduce_FuncName1_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant8({
            vec![ident.token_type.into_ident().unwrap()]
        }))
    }
    fn reduce_FuncName_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut FuncName1 =
            if let ChunkNodeEnum::Variant8(FuncName1) = __rustylr_args.pop().unwrap() {
                FuncName1
            } else {
                unreachable!()
            };
        __rustylr_args.pop();
        let mut ident = if let ChunkNodeEnum::Terminals(ident) = __rustylr_args.pop().unwrap() {
            ident
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant16({
            statement::FunctionName::new(FuncName1, Some(ident.token_type.into_ident().unwrap()))
        }))
    }
    fn reduce_FuncName_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut FuncName1 =
            if let ChunkNodeEnum::Variant8(FuncName1) = __rustylr_args.pop().unwrap() {
                FuncName1
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant16({
            statement::FunctionName::new(FuncName1, None)
        }))
    }
    fn reduce_ParList_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut NameList = if let ChunkNodeEnum::Variant8(NameList) = __rustylr_args.pop().unwrap()
        {
            NameList
        } else {
            unreachable!()
        };
        let mut var = if let ChunkNodeEnum::Variant25(var) = __rustylr_args.pop().unwrap() {
            var
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant17({
            expression::ParameterList::new(NameList, var.is_some())
        }))
    }
    fn reduce_ParList_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut dotdotdot =
            if let ChunkNodeEnum::Terminals(dotdotdot) = __rustylr_args.pop().unwrap() {
                dotdotdot
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant17({
            expression::ParameterList::new(Vec::new(), true)
        }))
    }
    fn reduce__Statement_Plus39_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut A = if let ChunkNodeEnum::Variant3(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant18({ vec![A] }))
    }
    fn reduce__Statement_Plus39_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Ap = if let ChunkNodeEnum::Variant18(Ap) = __rustylr_args.pop().unwrap() {
            Ap
        } else {
            unreachable!()
        };
        let mut A = if let ChunkNodeEnum::Variant3(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant18({
            Ap.push(A);
            Ap
        }))
    }
    fn reduce__Statement_Star40_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Ap = if let ChunkNodeEnum::Variant18(Ap) = __rustylr_args.pop().unwrap() {
            Ap
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant18({ Ap }))
    }
    fn reduce__Statement_Star40_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant18({ vec![] }))
    }
    fn reduce__ReturnStatement_Question41_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut A = if let ChunkNodeEnum::Variant4(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant19({ Some(A) }))
    }
    fn reduce__ReturnStatement_Question41_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant19({ None }))
    }
    fn reduce__Group42_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut __rustylr_group_elem1 =
            if let ChunkNodeEnum::Variant5(__rustylr_group_elem1) = __rustylr_args.pop().unwrap() {
                __rustylr_group_elem1
            } else {
                unreachable!()
            };
        __rustylr_args.pop();
        let mut __rustylr_group_elem3 =
            if let ChunkNodeEnum::Variant2(__rustylr_group_elem3) = __rustylr_args.pop().unwrap() {
                __rustylr_group_elem3
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant20((
            __rustylr_group_elem1,
            __rustylr_group_elem3,
        )))
    }
    fn reduce___Group42_Plus43_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut A = if let ChunkNodeEnum::Variant20(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant21({ vec![A] }))
    }
    fn reduce___Group42_Plus43_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Ap = if let ChunkNodeEnum::Variant21(Ap) = __rustylr_args.pop().unwrap() {
            Ap
        } else {
            unreachable!()
        };
        let mut A = if let ChunkNodeEnum::Variant20(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant21({
            Ap.push(A);
            Ap
        }))
    }
    fn reduce___Group42_Star44_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut Ap = if let ChunkNodeEnum::Variant21(Ap) = __rustylr_args.pop().unwrap() {
            Ap
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant21({ Ap }))
    }
    fn reduce___Group42_Star44_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant21({ vec![] }))
    }
    fn reduce__Group45_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut __rustylr_group_elem1 =
            if let ChunkNodeEnum::Variant2(__rustylr_group_elem1) = __rustylr_args.pop().unwrap() {
                __rustylr_group_elem1
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant2(__rustylr_group_elem1))
    }
    fn reduce___Group45_Question46_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut A = if let ChunkNodeEnum::Variant2(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant22({ Some(A) }))
    }
    fn reduce___Group45_Question46_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant22({ None }))
    }
    fn reduce__Group47_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut __rustylr_group_elem1 =
            if let ChunkNodeEnum::Variant5(__rustylr_group_elem1) = __rustylr_args.pop().unwrap() {
                __rustylr_group_elem1
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant5(__rustylr_group_elem1))
    }
    fn reduce___Group47_Question48_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut A = if let ChunkNodeEnum::Variant5(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant23({ Some(A) }))
    }
    fn reduce___Group47_Question48_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant23({ None }))
    }
    fn reduce__Group49_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut __rustylr_group_elem1 =
            if let ChunkNodeEnum::Variant7(__rustylr_group_elem1) = __rustylr_args.pop().unwrap() {
                __rustylr_group_elem1
            } else {
                unreachable!()
            };
        Ok(ChunkNodeEnum::Variant7(__rustylr_group_elem1))
    }
    fn reduce___Group49_Question50_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut A = if let ChunkNodeEnum::Variant7(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant24({ Some(A) }))
    }
    fn reduce___Group49_Question50_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant24({ None }))
    }
    fn reduce__semicolon_Question51_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut A = if let ChunkNodeEnum::Terminals(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant25({ Some(A) }))
    }
    fn reduce__semicolon_Question51_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant25({ None }))
    }
    fn reduce__FieldSep_Question52_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(ChunkNodeEnum::NonTerminals)
    }
    fn reduce__FieldSep_Question52_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(ChunkNodeEnum::NonTerminals)
    }
    fn reduce__ParList_Question53_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut A = if let ChunkNodeEnum::Variant17(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant26({ Some(A) }))
    }
    fn reduce__ParList_Question53_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant26({ None }))
    }
    fn reduce__Group54_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.pop();
        let mut __rustylr_group_elem1 = if let ChunkNodeEnum::Terminals(__rustylr_group_elem1) =
            __rustylr_args.pop().unwrap()
        {
            __rustylr_group_elem1
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Terminals(__rustylr_group_elem1))
    }
    fn reduce___Group54_Question55_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        let mut A = if let ChunkNodeEnum::Terminals(A) = __rustylr_args.pop().unwrap() {
            A
        } else {
            unreachable!()
        };
        Ok(ChunkNodeEnum::Variant25({ Some(A) }))
    }
    fn reduce___Group54_Question55_1(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        Ok(ChunkNodeEnum::Variant25({ None }))
    }
    fn reduce_Augmented_0(
        __rustylr_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Token,
        data: &mut (),
    ) -> Result<ChunkNodeEnum, ::rusty_lr::DefaultReduceActionError> {
        __rustylr_args.clear();
        Ok(ChunkNodeEnum::NonTerminals)
    }
}
#[allow(
    unused_braces,
    unused_parens,
    non_snake_case,
    non_camel_case_types,
    unused_variables
)]
impl ::rusty_lr::glr::NodeData for ChunkNodeEnum {
    type Term = Token;
    type NonTerm = ChunkNonTerminals;
    type ReduceActionError = ::rusty_lr::DefaultReduceActionError;
    type UserData = ();
    type StartType = statement::Block;
    fn new_term(term: Token) -> Self {
        ChunkNodeEnum::Terminals(term)
    }
    fn new_nonterm(
        rule_index: usize,
        reduce_args: &mut Vec<Self>,
        shift: &mut bool,
        lookahead: &Self::Term,
        user_data: &mut Self::UserData,
    ) -> Result<Self, Self::ReduceActionError> {
        match rule_index {
            0usize => Self::reduce_Chunk_0(reduce_args, shift, lookahead, user_data),
            1usize => Self::reduce_Block_0(reduce_args, shift, lookahead, user_data),
            2usize => Self::reduce_Statement_0(reduce_args, shift, lookahead, user_data),
            3usize => Self::reduce_Statement_1(reduce_args, shift, lookahead, user_data),
            4usize => Self::reduce_Statement_2(reduce_args, shift, lookahead, user_data),
            5usize => Self::reduce_Statement_3(reduce_args, shift, lookahead, user_data),
            6usize => Self::reduce_Statement_4(reduce_args, shift, lookahead, user_data),
            7usize => Self::reduce_Statement_5(reduce_args, shift, lookahead, user_data),
            8usize => Self::reduce_Statement_6(reduce_args, shift, lookahead, user_data),
            9usize => Self::reduce_Statement_7(reduce_args, shift, lookahead, user_data),
            10usize => Self::reduce_Statement_8(reduce_args, shift, lookahead, user_data),
            11usize => Self::reduce_Statement_9(reduce_args, shift, lookahead, user_data),
            12usize => Self::reduce_Statement_10(reduce_args, shift, lookahead, user_data),
            13usize => Self::reduce_Statement_11(reduce_args, shift, lookahead, user_data),
            14usize => Self::reduce_Statement_12(reduce_args, shift, lookahead, user_data),
            15usize => Self::reduce_Statement_13(reduce_args, shift, lookahead, user_data),
            16usize => Self::reduce_Statement_14(reduce_args, shift, lookahead, user_data),
            17usize => Self::reduce_ReturnStatement_0(reduce_args, shift, lookahead, user_data),
            18usize => Self::reduce_Var_0(reduce_args, shift, lookahead, user_data),
            19usize => Self::reduce_Var_1(reduce_args, shift, lookahead, user_data),
            20usize => Self::reduce_Var_2(reduce_args, shift, lookahead, user_data),
            21usize => Self::reduce_PrefixExp_0(reduce_args, shift, lookahead, user_data),
            22usize => Self::reduce_PrefixExp_1(reduce_args, shift, lookahead, user_data),
            23usize => Self::reduce_PrefixExp_2(reduce_args, shift, lookahead, user_data),
            24usize => Self::reduce_FunctionCall_0(reduce_args, shift, lookahead, user_data),
            25usize => Self::reduce_FunctionCall_1(reduce_args, shift, lookahead, user_data),
            26usize => Self::reduce_Args_0(reduce_args, shift, lookahead, user_data),
            27usize => Self::reduce_Args_1(reduce_args, shift, lookahead, user_data),
            28usize => Self::reduce_Args_2(reduce_args, shift, lookahead, user_data),
            29usize => Self::reduce_VarList_0(reduce_args, shift, lookahead, user_data),
            30usize => Self::reduce_VarList_1(reduce_args, shift, lookahead, user_data),
            31usize => Self::reduce_ExpList1_0(reduce_args, shift, lookahead, user_data),
            32usize => Self::reduce_ExpList1_1(reduce_args, shift, lookahead, user_data),
            33usize => Self::reduce_ExpList0_0(reduce_args, shift, lookahead, user_data),
            34usize => Self::reduce_ExpList0_1(reduce_args, shift, lookahead, user_data),
            35usize => Self::reduce_NameList_0(reduce_args, shift, lookahead, user_data),
            36usize => Self::reduce_NameList_1(reduce_args, shift, lookahead, user_data),
            37usize => Self::reduce_AttName_0(reduce_args, shift, lookahead, user_data),
            38usize => Self::reduce_AttNameList_0(reduce_args, shift, lookahead, user_data),
            39usize => Self::reduce_AttNameList_1(reduce_args, shift, lookahead, user_data),
            40usize => Self::reduce_Attrib_0(reduce_args, shift, lookahead, user_data),
            41usize => Self::reduce_Attrib_1(reduce_args, shift, lookahead, user_data),
            42usize => Self::reduce_Exp_0(reduce_args, shift, lookahead, user_data),
            43usize => Self::reduce_Exp0_0(reduce_args, shift, lookahead, user_data),
            44usize => Self::reduce_Exp0_1(reduce_args, shift, lookahead, user_data),
            45usize => Self::reduce_Exp0_2(reduce_args, shift, lookahead, user_data),
            46usize => Self::reduce_Exp0_3(reduce_args, shift, lookahead, user_data),
            47usize => Self::reduce_Exp0_4(reduce_args, shift, lookahead, user_data),
            48usize => Self::reduce_Exp0_5(reduce_args, shift, lookahead, user_data),
            49usize => Self::reduce_Exp0_6(reduce_args, shift, lookahead, user_data),
            50usize => Self::reduce_Exp0_7(reduce_args, shift, lookahead, user_data),
            51usize => Self::reduce_Exp1_0(reduce_args, shift, lookahead, user_data),
            52usize => Self::reduce_Exp1_1(reduce_args, shift, lookahead, user_data),
            53usize => Self::reduce_Exp2_0(reduce_args, shift, lookahead, user_data),
            54usize => Self::reduce_Exp2_1(reduce_args, shift, lookahead, user_data),
            55usize => Self::reduce_Exp2_2(reduce_args, shift, lookahead, user_data),
            56usize => Self::reduce_Exp2_3(reduce_args, shift, lookahead, user_data),
            57usize => Self::reduce_Exp2_4(reduce_args, shift, lookahead, user_data),
            58usize => Self::reduce_Exp3_0(reduce_args, shift, lookahead, user_data),
            59usize => Self::reduce_Exp3_1(reduce_args, shift, lookahead, user_data),
            60usize => Self::reduce_Exp3_2(reduce_args, shift, lookahead, user_data),
            61usize => Self::reduce_Exp3_3(reduce_args, shift, lookahead, user_data),
            62usize => Self::reduce_Exp3_4(reduce_args, shift, lookahead, user_data),
            63usize => Self::reduce_Exp4_0(reduce_args, shift, lookahead, user_data),
            64usize => Self::reduce_Exp4_1(reduce_args, shift, lookahead, user_data),
            65usize => Self::reduce_Exp4_2(reduce_args, shift, lookahead, user_data),
            66usize => Self::reduce_Exp5_0(reduce_args, shift, lookahead, user_data),
            67usize => Self::reduce_Exp5_1(reduce_args, shift, lookahead, user_data),
            68usize => Self::reduce_Exp6_0(reduce_args, shift, lookahead, user_data),
            69usize => Self::reduce_Exp6_1(reduce_args, shift, lookahead, user_data),
            70usize => Self::reduce_Exp6_2(reduce_args, shift, lookahead, user_data),
            71usize => Self::reduce_Exp7_0(reduce_args, shift, lookahead, user_data),
            72usize => Self::reduce_Exp7_1(reduce_args, shift, lookahead, user_data),
            73usize => Self::reduce_Exp8_0(reduce_args, shift, lookahead, user_data),
            74usize => Self::reduce_Exp8_1(reduce_args, shift, lookahead, user_data),
            75usize => Self::reduce_Exp9_0(reduce_args, shift, lookahead, user_data),
            76usize => Self::reduce_Exp9_1(reduce_args, shift, lookahead, user_data),
            77usize => Self::reduce_Exp10_0(reduce_args, shift, lookahead, user_data),
            78usize => Self::reduce_Exp10_1(reduce_args, shift, lookahead, user_data),
            79usize => Self::reduce_Exp10_2(reduce_args, shift, lookahead, user_data),
            80usize => Self::reduce_Exp10_3(reduce_args, shift, lookahead, user_data),
            81usize => Self::reduce_Exp10_4(reduce_args, shift, lookahead, user_data),
            82usize => Self::reduce_Exp10_5(reduce_args, shift, lookahead, user_data),
            83usize => Self::reduce_Exp10_6(reduce_args, shift, lookahead, user_data),
            84usize => Self::reduce_Exp11_0(reduce_args, shift, lookahead, user_data),
            85usize => Self::reduce_Exp11_1(reduce_args, shift, lookahead, user_data),
            86usize => Self::reduce_Exp12_0(reduce_args, shift, lookahead, user_data),
            87usize => Self::reduce_Exp12_1(reduce_args, shift, lookahead, user_data),
            88usize => Self::reduce_TableConstructor_0(reduce_args, shift, lookahead, user_data),
            89usize => Self::reduce_FieldList1_0(reduce_args, shift, lookahead, user_data),
            90usize => Self::reduce_FieldList1_1(reduce_args, shift, lookahead, user_data),
            91usize => Self::reduce_FieldList_0(reduce_args, shift, lookahead, user_data),
            92usize => Self::reduce_FieldList_1(reduce_args, shift, lookahead, user_data),
            93usize => Self::reduce_Field_0(reduce_args, shift, lookahead, user_data),
            94usize => Self::reduce_Field_1(reduce_args, shift, lookahead, user_data),
            95usize => Self::reduce_Field_2(reduce_args, shift, lookahead, user_data),
            96usize => Self::reduce_FieldSep_0(reduce_args, shift, lookahead, user_data),
            97usize => Self::reduce_FieldSep_1(reduce_args, shift, lookahead, user_data),
            98usize => Self::reduce_FunctionDef_0(reduce_args, shift, lookahead, user_data),
            99usize => Self::reduce_FuncBody_0(reduce_args, shift, lookahead, user_data),
            100usize => Self::reduce_FuncName1_0(reduce_args, shift, lookahead, user_data),
            101usize => Self::reduce_FuncName1_1(reduce_args, shift, lookahead, user_data),
            102usize => Self::reduce_FuncName_0(reduce_args, shift, lookahead, user_data),
            103usize => Self::reduce_FuncName_1(reduce_args, shift, lookahead, user_data),
            104usize => Self::reduce_ParList_0(reduce_args, shift, lookahead, user_data),
            105usize => Self::reduce_ParList_1(reduce_args, shift, lookahead, user_data),
            106usize => Self::reduce__Statement_Plus39_0(reduce_args, shift, lookahead, user_data),
            107usize => Self::reduce__Statement_Plus39_1(reduce_args, shift, lookahead, user_data),
            108usize => Self::reduce__Statement_Star40_0(reduce_args, shift, lookahead, user_data),
            109usize => Self::reduce__Statement_Star40_1(reduce_args, shift, lookahead, user_data),
            110usize => {
                Self::reduce__ReturnStatement_Question41_0(reduce_args, shift, lookahead, user_data)
            }
            111usize => {
                Self::reduce__ReturnStatement_Question41_1(reduce_args, shift, lookahead, user_data)
            }
            112usize => Self::reduce__Group42_0(reduce_args, shift, lookahead, user_data),
            113usize => Self::reduce___Group42_Plus43_0(reduce_args, shift, lookahead, user_data),
            114usize => Self::reduce___Group42_Plus43_1(reduce_args, shift, lookahead, user_data),
            115usize => Self::reduce___Group42_Star44_0(reduce_args, shift, lookahead, user_data),
            116usize => Self::reduce___Group42_Star44_1(reduce_args, shift, lookahead, user_data),
            117usize => Self::reduce__Group45_0(reduce_args, shift, lookahead, user_data),
            118usize => {
                Self::reduce___Group45_Question46_0(reduce_args, shift, lookahead, user_data)
            }
            119usize => {
                Self::reduce___Group45_Question46_1(reduce_args, shift, lookahead, user_data)
            }
            120usize => Self::reduce__Group47_0(reduce_args, shift, lookahead, user_data),
            121usize => {
                Self::reduce___Group47_Question48_0(reduce_args, shift, lookahead, user_data)
            }
            122usize => {
                Self::reduce___Group47_Question48_1(reduce_args, shift, lookahead, user_data)
            }
            123usize => Self::reduce__Group49_0(reduce_args, shift, lookahead, user_data),
            124usize => {
                Self::reduce___Group49_Question50_0(reduce_args, shift, lookahead, user_data)
            }
            125usize => {
                Self::reduce___Group49_Question50_1(reduce_args, shift, lookahead, user_data)
            }
            126usize => {
                Self::reduce__semicolon_Question51_0(reduce_args, shift, lookahead, user_data)
            }
            127usize => {
                Self::reduce__semicolon_Question51_1(reduce_args, shift, lookahead, user_data)
            }
            128usize => {
                Self::reduce__FieldSep_Question52_0(reduce_args, shift, lookahead, user_data)
            }
            129usize => {
                Self::reduce__FieldSep_Question52_1(reduce_args, shift, lookahead, user_data)
            }
            130usize => {
                Self::reduce__ParList_Question53_0(reduce_args, shift, lookahead, user_data)
            }
            131usize => {
                Self::reduce__ParList_Question53_1(reduce_args, shift, lookahead, user_data)
            }
            132usize => Self::reduce__Group54_0(reduce_args, shift, lookahead, user_data),
            133usize => {
                Self::reduce___Group54_Question55_0(reduce_args, shift, lookahead, user_data)
            }
            134usize => {
                Self::reduce___Group54_Question55_1(reduce_args, shift, lookahead, user_data)
            }
            135usize => Self::reduce_Augmented_0(reduce_args, shift, lookahead, user_data),
            _ => {
                unreachable!("Invalid Rule: {}", rule_index);
            }
        }
    }
    fn into_start(self) -> Self::StartType {
        match self {
            ChunkNodeEnum::Variant2(start) => start,
            _ => unreachable!(),
        }
    }
}
#[doc = r" struct that holds parser data, DFA tables"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
pub struct ChunkParser {
    #[doc = r" production rules"]
    pub rules: Vec<ChunkRule>,
    #[doc = r" states"]
    pub states: Vec<ChunkState>,
}
impl ::rusty_lr::glr::Parser for ChunkParser {
    type Term = Token;
    type NonTerm = ChunkNonTerminals;
    fn get_rules(&self) -> &[ChunkRule] {
        &self.rules
    }
    fn get_states(&self) -> &[ChunkState] {
        &self.states
    }
}
#[doc = r" Parser is holding DFA state tables and production rules"]
#[allow(
    unused_braces,
    unused_parens,
    unused_variables,
    non_snake_case,
    unused_mut
)]
impl ChunkParser {
    #[doc = r" Create new parser instance."]
    #[doc = r" Parser can be reused with different context, for multiple parsing."]
    pub fn new() -> Self {
        let __rustylr_terminals: Vec<Token> = vec![
            Token::new_type(TokenType::Ident("".to_string())),
            Token::new_type(TokenType::String("".to_string())),
            Token::new_type(TokenType::Numeric(IntOrFloat::Int(0))),
            Token::new_type(TokenType::Nil),
            Token::new_type(TokenType::Bool(false)),
            Token::new_type(TokenType::Plus),
            Token::new_type(TokenType::Minus),
            Token::new_type(TokenType::Asterisk),
            Token::new_type(TokenType::Slash),
            Token::new_type(TokenType::Percent),
            Token::new_type(TokenType::Caret),
            Token::new_type(TokenType::Hash),
            Token::new_type(TokenType::Ampersand),
            Token::new_type(TokenType::Tilde),
            Token::new_type(TokenType::Pipe),
            Token::new_type(TokenType::LessLess),
            Token::new_type(TokenType::GreaterGreater),
            Token::new_type(TokenType::SlashSlash),
            Token::new_type(TokenType::EqualEqual),
            Token::new_type(TokenType::TildeEqual),
            Token::new_type(TokenType::LessEqual),
            Token::new_type(TokenType::GreaterEqual),
            Token::new_type(TokenType::Less),
            Token::new_type(TokenType::Greater),
            Token::new_type(TokenType::Equal),
            Token::new_type(TokenType::LParen),
            Token::new_type(TokenType::RParen),
            Token::new_type(TokenType::LBrace),
            Token::new_type(TokenType::RBrace),
            Token::new_type(TokenType::LBracket),
            Token::new_type(TokenType::RBracket),
            Token::new_type(TokenType::ColonColon),
            Token::new_type(TokenType::Semicolon),
            Token::new_type(TokenType::Colon),
            Token::new_type(TokenType::Comma),
            Token::new_type(TokenType::Dot),
            Token::new_type(TokenType::DotDot),
            Token::new_type(TokenType::DotDotDot),
            Token::new_type(TokenType::And),
            Token::new_type(TokenType::Break),
            Token::new_type(TokenType::Do),
            Token::new_type(TokenType::Else),
            Token::new_type(TokenType::Elseif),
            Token::new_type(TokenType::End),
            Token::new_type(TokenType::For),
            Token::new_type(TokenType::Function),
            Token::new_type(TokenType::Goto),
            Token::new_type(TokenType::If),
            Token::new_type(TokenType::In),
            Token::new_type(TokenType::Local),
            Token::new_type(TokenType::Not),
            Token::new_type(TokenType::Or),
            Token::new_type(TokenType::Repeat),
            Token::new_type(TokenType::Return),
            Token::new_type(TokenType::Then),
            Token::new_type(TokenType::Until),
            Token::new_type(TokenType::While),
            Token::new_type(TokenType::Eof),
        ];
        const RUSTYLR_RULES_TOKENS: &[&[::rusty_lr::Token<u8, ChunkNonTerminals>]] = &[
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Block)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::_Statement_Star40),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::_ReturnStatement_Question41),
            ],
            &[::rusty_lr::Token::Term(32)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::VarList),
                ::rusty_lr::Token::Term(24),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::ExpList1),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::FunctionCall)],
            &[
                ::rusty_lr::Token::Term(31),
                ::rusty_lr::Token::Term(0),
                ::rusty_lr::Token::Term(31),
            ],
            &[::rusty_lr::Token::Term(39)],
            &[::rusty_lr::Token::Term(46), ::rusty_lr::Token::Term(0)],
            &[
                ::rusty_lr::Token::Term(40),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Block),
                ::rusty_lr::Token::Term(43),
            ],
            &[
                ::rusty_lr::Token::Term(56),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
                ::rusty_lr::Token::Term(40),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Block),
                ::rusty_lr::Token::Term(43),
            ],
            &[
                ::rusty_lr::Token::Term(52),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Block),
                ::rusty_lr::Token::Term(55),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
            ],
            &[
                ::rusty_lr::Token::Term(47),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
                ::rusty_lr::Token::Term(54),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Block),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::__Group42_Star44),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::__Group45_Question46),
                ::rusty_lr::Token::Term(43),
            ],
            &[
                ::rusty_lr::Token::Term(44),
                ::rusty_lr::Token::Term(0),
                ::rusty_lr::Token::Term(24),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
                ::rusty_lr::Token::Term(34),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::__Group47_Question48),
                ::rusty_lr::Token::Term(40),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Block),
                ::rusty_lr::Token::Term(43),
            ],
            &[
                ::rusty_lr::Token::Term(44),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::NameList),
                ::rusty_lr::Token::Term(48),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::ExpList1),
                ::rusty_lr::Token::Term(40),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Block),
                ::rusty_lr::Token::Term(43),
            ],
            &[
                ::rusty_lr::Token::Term(45),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::FuncName),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::FuncBody),
            ],
            &[
                ::rusty_lr::Token::Term(49),
                ::rusty_lr::Token::Term(45),
                ::rusty_lr::Token::Term(0),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::FuncBody),
            ],
            &[
                ::rusty_lr::Token::Term(49),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::AttNameList),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::__Group49_Question50),
            ],
            &[
                ::rusty_lr::Token::Term(53),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::ExpList0),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::_semicolon_Question51),
            ],
            &[::rusty_lr::Token::Term(0)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::PrefixExp),
                ::rusty_lr::Token::Term(29),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
                ::rusty_lr::Token::Term(30),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::PrefixExp),
                ::rusty_lr::Token::Term(35),
                ::rusty_lr::Token::Term(0),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Var)],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::FunctionCall)],
            &[
                ::rusty_lr::Token::Term(25),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
                ::rusty_lr::Token::Term(26),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::PrefixExp),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Args),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::PrefixExp),
                ::rusty_lr::Token::Term(33),
                ::rusty_lr::Token::Term(0),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Args),
            ],
            &[
                ::rusty_lr::Token::Term(25),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::ExpList0),
                ::rusty_lr::Token::Term(26),
            ],
            &[::rusty_lr::Token::NonTerm(
                ChunkNonTerminals::TableConstructor,
            )],
            &[::rusty_lr::Token::Term(1)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::VarList),
                ::rusty_lr::Token::Term(34),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Var),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Var)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::ExpList1),
                ::rusty_lr::Token::Term(34),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp)],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::ExpList1)],
            &[],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::NameList),
                ::rusty_lr::Token::Term(34),
                ::rusty_lr::Token::Term(0),
            ],
            &[::rusty_lr::Token::Term(0)],
            &[
                ::rusty_lr::Token::Term(0),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Attrib),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::AttNameList),
                ::rusty_lr::Token::Term(34),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::AttName),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::AttName)],
            &[
                ::rusty_lr::Token::Term(22),
                ::rusty_lr::Token::Term(0),
                ::rusty_lr::Token::Term(23),
            ],
            &[],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp12)],
            &[::rusty_lr::Token::Term(2)],
            &[::rusty_lr::Token::Term(3)],
            &[::rusty_lr::Token::Term(1)],
            &[::rusty_lr::Token::Term(4)],
            &[::rusty_lr::Token::Term(37)],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::FunctionDef)],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::PrefixExp)],
            &[::rusty_lr::Token::NonTerm(
                ChunkNonTerminals::TableConstructor,
            )],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp0),
                ::rusty_lr::Token::Term(10),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp1),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp0)],
            &[
                ::rusty_lr::Token::Term(50),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp2),
            ],
            &[
                ::rusty_lr::Token::Term(11),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp2),
            ],
            &[
                ::rusty_lr::Token::Term(6),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp2),
            ],
            &[
                ::rusty_lr::Token::Term(13),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp2),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp1)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp3),
                ::rusty_lr::Token::Term(7),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp2),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp3),
                ::rusty_lr::Token::Term(8),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp2),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp3),
                ::rusty_lr::Token::Term(17),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp2),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp3),
                ::rusty_lr::Token::Term(9),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp2),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp2)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp4),
                ::rusty_lr::Token::Term(5),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp3),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp4),
                ::rusty_lr::Token::Term(6),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp3),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp3)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp4),
                ::rusty_lr::Token::Term(36),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp5),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp4)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp6),
                ::rusty_lr::Token::Term(15),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp5),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp6),
                ::rusty_lr::Token::Term(16),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp5),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp5)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp7),
                ::rusty_lr::Token::Term(12),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp6),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp6)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp8),
                ::rusty_lr::Token::Term(13),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp7),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp7)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp9),
                ::rusty_lr::Token::Term(14),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp8),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp8)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp10),
                ::rusty_lr::Token::Term(22),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp9),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp10),
                ::rusty_lr::Token::Term(20),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp9),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp10),
                ::rusty_lr::Token::Term(23),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp9),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp10),
                ::rusty_lr::Token::Term(21),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp9),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp10),
                ::rusty_lr::Token::Term(19),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp9),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp10),
                ::rusty_lr::Token::Term(18),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp9),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp9)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp11),
                ::rusty_lr::Token::Term(38),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp10),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp10)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp12),
                ::rusty_lr::Token::Term(51),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp11),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp11)],
            &[
                ::rusty_lr::Token::Term(27),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::FieldList),
                ::rusty_lr::Token::Term(28),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::FieldList1),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::FieldSep),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Field),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Field)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::FieldList1),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::_FieldSep_Question52),
            ],
            &[],
            &[
                ::rusty_lr::Token::Term(29),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
                ::rusty_lr::Token::Term(30),
                ::rusty_lr::Token::Term(24),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
            ],
            &[
                ::rusty_lr::Token::Term(0),
                ::rusty_lr::Token::Term(24),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp)],
            &[::rusty_lr::Token::Term(34)],
            &[::rusty_lr::Token::Term(32)],
            &[
                ::rusty_lr::Token::Term(45),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::FuncBody),
            ],
            &[
                ::rusty_lr::Token::Term(25),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::_ParList_Question53),
                ::rusty_lr::Token::Term(26),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Block),
                ::rusty_lr::Token::Term(43),
            ],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::FuncName1),
                ::rusty_lr::Token::Term(35),
                ::rusty_lr::Token::Term(0),
            ],
            &[::rusty_lr::Token::Term(0)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::FuncName1),
                ::rusty_lr::Token::Term(33),
                ::rusty_lr::Token::Term(0),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::FuncName1)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::NameList),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::__Group54_Question55),
            ],
            &[::rusty_lr::Token::Term(37)],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::Statement)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::_Statement_Plus39),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Statement),
            ],
            &[::rusty_lr::Token::NonTerm(
                ChunkNonTerminals::_Statement_Plus39,
            )],
            &[],
            &[::rusty_lr::Token::NonTerm(
                ChunkNonTerminals::ReturnStatement,
            )],
            &[],
            &[
                ::rusty_lr::Token::Term(42),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
                ::rusty_lr::Token::Term(54),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Block),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::_Group42)],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::__Group42_Plus43),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::_Group42),
            ],
            &[::rusty_lr::Token::NonTerm(
                ChunkNonTerminals::__Group42_Plus43,
            )],
            &[],
            &[
                ::rusty_lr::Token::Term(41),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Block),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::_Group45)],
            &[],
            &[
                ::rusty_lr::Token::Term(34),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Exp),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::_Group47)],
            &[],
            &[
                ::rusty_lr::Token::Term(24),
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::ExpList1),
            ],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::_Group49)],
            &[],
            &[::rusty_lr::Token::Term(32)],
            &[],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::FieldSep)],
            &[],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::ParList)],
            &[],
            &[::rusty_lr::Token::Term(34), ::rusty_lr::Token::Term(37)],
            &[::rusty_lr::Token::NonTerm(ChunkNonTerminals::_Group54)],
            &[],
            &[
                ::rusty_lr::Token::NonTerm(ChunkNonTerminals::Chunk),
                ::rusty_lr::Token::Term(57),
            ],
        ];
        const RUSTYLR_RULES_NAME: &[ChunkNonTerminals] = &[
            ChunkNonTerminals::Chunk,
            ChunkNonTerminals::Block,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::Statement,
            ChunkNonTerminals::ReturnStatement,
            ChunkNonTerminals::Var,
            ChunkNonTerminals::Var,
            ChunkNonTerminals::Var,
            ChunkNonTerminals::PrefixExp,
            ChunkNonTerminals::PrefixExp,
            ChunkNonTerminals::PrefixExp,
            ChunkNonTerminals::FunctionCall,
            ChunkNonTerminals::FunctionCall,
            ChunkNonTerminals::Args,
            ChunkNonTerminals::Args,
            ChunkNonTerminals::Args,
            ChunkNonTerminals::VarList,
            ChunkNonTerminals::VarList,
            ChunkNonTerminals::ExpList1,
            ChunkNonTerminals::ExpList1,
            ChunkNonTerminals::ExpList0,
            ChunkNonTerminals::ExpList0,
            ChunkNonTerminals::NameList,
            ChunkNonTerminals::NameList,
            ChunkNonTerminals::AttName,
            ChunkNonTerminals::AttNameList,
            ChunkNonTerminals::AttNameList,
            ChunkNonTerminals::Attrib,
            ChunkNonTerminals::Attrib,
            ChunkNonTerminals::Exp,
            ChunkNonTerminals::Exp0,
            ChunkNonTerminals::Exp0,
            ChunkNonTerminals::Exp0,
            ChunkNonTerminals::Exp0,
            ChunkNonTerminals::Exp0,
            ChunkNonTerminals::Exp0,
            ChunkNonTerminals::Exp0,
            ChunkNonTerminals::Exp0,
            ChunkNonTerminals::Exp1,
            ChunkNonTerminals::Exp1,
            ChunkNonTerminals::Exp2,
            ChunkNonTerminals::Exp2,
            ChunkNonTerminals::Exp2,
            ChunkNonTerminals::Exp2,
            ChunkNonTerminals::Exp2,
            ChunkNonTerminals::Exp3,
            ChunkNonTerminals::Exp3,
            ChunkNonTerminals::Exp3,
            ChunkNonTerminals::Exp3,
            ChunkNonTerminals::Exp3,
            ChunkNonTerminals::Exp4,
            ChunkNonTerminals::Exp4,
            ChunkNonTerminals::Exp4,
            ChunkNonTerminals::Exp5,
            ChunkNonTerminals::Exp5,
            ChunkNonTerminals::Exp6,
            ChunkNonTerminals::Exp6,
            ChunkNonTerminals::Exp6,
            ChunkNonTerminals::Exp7,
            ChunkNonTerminals::Exp7,
            ChunkNonTerminals::Exp8,
            ChunkNonTerminals::Exp8,
            ChunkNonTerminals::Exp9,
            ChunkNonTerminals::Exp9,
            ChunkNonTerminals::Exp10,
            ChunkNonTerminals::Exp10,
            ChunkNonTerminals::Exp10,
            ChunkNonTerminals::Exp10,
            ChunkNonTerminals::Exp10,
            ChunkNonTerminals::Exp10,
            ChunkNonTerminals::Exp10,
            ChunkNonTerminals::Exp11,
            ChunkNonTerminals::Exp11,
            ChunkNonTerminals::Exp12,
            ChunkNonTerminals::Exp12,
            ChunkNonTerminals::TableConstructor,
            ChunkNonTerminals::FieldList1,
            ChunkNonTerminals::FieldList1,
            ChunkNonTerminals::FieldList,
            ChunkNonTerminals::FieldList,
            ChunkNonTerminals::Field,
            ChunkNonTerminals::Field,
            ChunkNonTerminals::Field,
            ChunkNonTerminals::FieldSep,
            ChunkNonTerminals::FieldSep,
            ChunkNonTerminals::FunctionDef,
            ChunkNonTerminals::FuncBody,
            ChunkNonTerminals::FuncName1,
            ChunkNonTerminals::FuncName1,
            ChunkNonTerminals::FuncName,
            ChunkNonTerminals::FuncName,
            ChunkNonTerminals::ParList,
            ChunkNonTerminals::ParList,
            ChunkNonTerminals::_Statement_Plus39,
            ChunkNonTerminals::_Statement_Plus39,
            ChunkNonTerminals::_Statement_Star40,
            ChunkNonTerminals::_Statement_Star40,
            ChunkNonTerminals::_ReturnStatement_Question41,
            ChunkNonTerminals::_ReturnStatement_Question41,
            ChunkNonTerminals::_Group42,
            ChunkNonTerminals::__Group42_Plus43,
            ChunkNonTerminals::__Group42_Plus43,
            ChunkNonTerminals::__Group42_Star44,
            ChunkNonTerminals::__Group42_Star44,
            ChunkNonTerminals::_Group45,
            ChunkNonTerminals::__Group45_Question46,
            ChunkNonTerminals::__Group45_Question46,
            ChunkNonTerminals::_Group47,
            ChunkNonTerminals::__Group47_Question48,
            ChunkNonTerminals::__Group47_Question48,
            ChunkNonTerminals::_Group49,
            ChunkNonTerminals::__Group49_Question50,
            ChunkNonTerminals::__Group49_Question50,
            ChunkNonTerminals::_semicolon_Question51,
            ChunkNonTerminals::_semicolon_Question51,
            ChunkNonTerminals::_FieldSep_Question52,
            ChunkNonTerminals::_FieldSep_Question52,
            ChunkNonTerminals::_ParList_Question53,
            ChunkNonTerminals::_ParList_Question53,
            ChunkNonTerminals::_Group54,
            ChunkNonTerminals::__Group54_Question55,
            ChunkNonTerminals::__Group54_Question55,
            ChunkNonTerminals::Augmented,
        ];
        let rules: Vec<ChunkRule> = RUSTYLR_RULES_NAME
            .iter()
            .zip(RUSTYLR_RULES_TOKENS.iter())
            .map(|(name, tokens)| ChunkRule {
                name: *name,
                rule: tokens
                    .iter()
                    .map(|token| match token {
                        ::rusty_lr::Token::Term(term) => {
                            ::rusty_lr::Token::Term(__rustylr_terminals[*term as usize].clone())
                        }
                        ::rusty_lr::Token::NonTerm(nonterm) => ::rusty_lr::Token::NonTerm(*nonterm),
                    })
                    .collect(),
            })
            .collect();
        const RUSTYLR_REDUCE_TERMINALS_CACHE: &[&[u8]] = &[
            &[53, 57],
            &[
                0, 1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25,
                26, 27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47,
                49, 51, 52, 53, 54, 55, 56, 57,
            ],
            &[
                0, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28,
                30, 31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55,
                56, 57,
            ],
            &[28],
            &[
                1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 27, 28,
                29, 32, 33, 34, 35, 36, 38, 51,
            ],
            &[26],
            &[26, 34],
            &[26, 34, 48],
            &[43, 53],
            &[
                0, 25, 31, 32, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 55, 56, 57,
            ],
            &[34, 48],
            &[25, 33, 35],
            &[25],
            &[
                0, 1, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26,
                27, 28, 29, 30, 31, 32, 33, 34, 35, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49,
                51, 52, 53, 54, 55, 56, 57,
            ],
            &[
                0, 5, 6, 7, 8, 9, 10, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 26, 28, 30,
                31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56,
                57,
            ],
            &[28, 32, 34],
            &[
                0, 5, 6, 7, 8, 9, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30,
                31, 32, 34, 36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56,
                57,
            ],
            &[26, 32, 41, 42, 43, 55, 57],
            &[
                0, 24, 25, 31, 32, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 55, 56, 57,
            ],
            &[53, 55],
            &[
                0, 5, 6, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 34,
                36, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57,
            ],
            &[
                0, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 34, 38, 39,
                40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57,
            ],
            &[
                0, 25, 26, 31, 32, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 55, 56, 57,
            ],
            &[
                0, 12, 13, 14, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 34, 38, 39, 40, 41,
                42, 43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57,
            ],
            &[
                0, 13, 14, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 34, 38, 39, 40, 41, 42,
                43, 44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57,
            ],
            &[
                0, 14, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 34, 38, 39, 40, 41, 42, 43,
                44, 45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57,
            ],
            &[
                0, 18, 19, 20, 21, 22, 23, 25, 26, 28, 30, 31, 32, 34, 38, 39, 40, 41, 42, 43, 44,
                45, 46, 47, 49, 51, 52, 53, 54, 55, 56, 57,
            ],
            &[
                0, 25, 26, 28, 30, 31, 32, 34, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52,
                53, 54, 55, 56, 57,
            ],
            &[
                0, 25, 26, 28, 30, 31, 32, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 51, 52, 53,
                54, 55, 56, 57,
            ],
            &[
                0, 25, 26, 28, 30, 31, 32, 34, 39, 40, 41, 42, 43, 44, 45, 46, 47, 49, 52, 53, 54,
                55, 56, 57,
            ],
            &[0, 1, 2, 3, 4, 6, 11, 13, 25, 27, 28, 29, 37, 45, 50],
            &[1, 25, 27, 29, 33, 35],
            &[24, 34],
            &[41, 42, 43, 53, 55, 57],
            &[41, 42, 43, 55, 57],
            &[32, 41, 42, 43, 55, 57],
            &[41, 42, 43, 53],
            &[40],
            &[41, 43],
            &[41, 42, 43],
            &[43],
            &[57],
        ];
        const RUSTYLR_RULESET_SHIFTED0_CACHE: &[&[u8]] = &[
            &[
                0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23,
                24, 25, 29, 30, 106, 107, 108, 109, 135,
            ],
            &[],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
                76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 57, 88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
                76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 89, 90, 91, 92, 93, 94, 95, 98,
            ],
            &[99],
            &[35, 36, 104, 105, 130, 131],
            &[132, 133, 134],
            &[
                1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24,
                25, 29, 30, 106, 107, 108, 109,
            ],
            &[35, 36],
            &[100, 101, 102, 103],
            &[26, 27, 28, 88],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 33, 34, 42, 43, 44, 45, 46, 47, 48, 49, 50,
                51, 52, 53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71,
                72, 73, 74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 88, 98,
            ],
            &[37, 38, 39],
            &[40, 41],
            &[123, 124, 125],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 31, 32, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52,
                53, 54, 55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73,
                74, 75, 76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 57, 58, 59, 60, 61, 62, 88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
                88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
                77, 78, 79, 80, 81, 82, 83, 88, 98,
            ],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54, 55,
                56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75, 76,
                77, 78, 79, 80, 81, 82, 83, 84, 85, 88, 98,
            ],
            &[96, 97, 128, 129],
            &[
                18, 19, 20, 21, 22, 23, 24, 25, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54,
                55, 56, 57, 58, 59, 60, 61, 62, 63, 64, 65, 66, 67, 68, 69, 70, 71, 72, 73, 74, 75,
                76, 77, 78, 79, 80, 81, 82, 83, 84, 85, 86, 87, 88, 93, 94, 95, 98,
            ],
            &[18, 19, 20, 21, 22, 23, 24, 25],
            &[
                2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 18, 19, 20, 21, 22, 23, 24, 25,
                29, 30,
            ],
            &[17, 110, 111],
            &[126, 127],
            &[120, 121, 122],
            &[37],
            &[112, 113, 114, 115, 116],
            &[112],
            &[117, 118, 119],
        ];
        const RUSTYLR_SHIFT_TERM_MAP: &[&[(u8, u8)]] = &[
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[],
            &[],
            &[],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[
                (0, 11),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (29, 36),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(24, 12)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[(25, 15)],
            &[(0, 16), (37, 17)],
            &[],
            &[],
            &[(34, 19)],
            &[(0, 20), (37, 21)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(26, 26)],
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[(0, 28)],
            &[(31, 29)],
            &[],
            &[],
            &[],
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[(0, 34)],
            &[(24, 35)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(0, 39)],
            &[],
            &[(33, 41), (35, 43)],
            &[(0, 42)],
            &[],
            &[(0, 44)],
            &[],
            &[(25, 15)],
            &[],
            &[(0, 48)],
            &[],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[(1, 52), (25, 53), (27, 10), (29, 109), (33, 116), (35, 120)],
            &[],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[],
            &[(10, 57)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
            ],
            &[(34, 59)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(0, 61), (45, 66)],
            &[(22, 62)],
            &[(0, 63)],
            &[(23, 64)],
            &[],
            &[],
            &[(0, 67)],
            &[(25, 15)],
            &[],
            &[],
            &[(24, 71), (34, 194)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(26, 75)],
            &[],
            &[],
            &[],
            &[(7, 79), (8, 83), (9, 85), (17, 87)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[],
            &[],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[(5, 90), (6, 126), (36, 128)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(26, 92)],
            &[],
            &[],
            &[],
            &[(15, 96), (16, 131)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(12, 98)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(13, 100)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(14, 102)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[
                (18, 104),
                (19, 137),
                (20, 139),
                (21, 141),
                (22, 143),
                (23, 145),
            ],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(38, 106)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(51, 108)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(32, 111), (34, 112)],
            &[],
            &[],
            &[
                (0, 11),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (29, 36),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(30, 115)],
            &[],
            &[(0, 117)],
            &[(1, 52), (25, 53), (27, 10)],
            &[],
            &[],
            &[(0, 121)],
            &[],
            &[],
            &[],
            &[],
            &[(7, 79), (8, 83), (9, 85), (17, 87)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(7, 79), (8, 83), (9, 85), (17, 87)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[(15, 96), (16, 131)],
            &[(12, 98)],
            &[(13, 100)],
            &[(14, 102)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(14, 102)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(14, 102)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(14, 102)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(14, 102)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(14, 102)],
            &[
                (18, 104),
                (19, 137),
                (20, 139),
                (21, 141),
                (22, 143),
                (23, 145),
            ],
            &[(38, 106)],
            &[],
            &[],
            &[(28, 152)],
            &[],
            &[],
            &[(43, 155)],
            &[],
            &[],
            &[],
            &[(1, 52), (25, 53), (27, 10), (29, 109), (33, 116), (35, 120)],
            &[],
            &[(24, 161), (34, 164)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(34, 59)],
            &[],
            &[(0, 1), (25, 2)],
            &[],
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[],
            &[(53, 169)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[(32, 172)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(40, 180)],
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[(54, 182)],
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[(43, 184)],
            &[],
            &[(34, 186)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(34, 188)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[],
            &[(40, 192)],
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[(34, 59)],
            &[(0, 61)],
            &[],
            &[],
            &[],
            &[(55, 199)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[(43, 202)],
            &[],
            &[(43, 204)],
            &[],
            &[(34, 206), (48, 207)],
            &[(0, 20)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(34, 59), (40, 209)],
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[(43, 211)],
            &[],
            &[(42, 213)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[(54, 215)],
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[],
            &[],
            &[(42, 213)],
            &[],
            &[(41, 221)],
            &[
                (0, 1),
                (25, 2),
                (31, 27),
                (32, 30),
                (39, 31),
                (40, 32),
                (44, 33),
                (45, 38),
                (46, 47),
                (47, 49),
                (49, 60),
                (52, 72),
                (56, 73),
            ],
            &[],
            &[],
            &[(43, 225)],
            &[],
            &[(30, 227)],
            &[(24, 228)],
            &[
                (0, 1),
                (1, 3),
                (2, 4),
                (3, 5),
                (4, 6),
                (6, 7),
                (11, 8),
                (13, 9),
                (25, 2),
                (27, 10),
                (37, 13),
                (45, 14),
                (50, 37),
            ],
            &[],
            &[],
            &[(57, 232)],
            &[],
            &[],
        ];
        const RUSTYLR_SHIFT_NONTERM_MAP: &[&[(ChunkNonTerminals, u8)]] = &[
            &[
                (ChunkNonTerminals::Block, 233),
                (ChunkNonTerminals::Chunk, 231),
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 156),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
                (ChunkNonTerminals::_Statement_Plus39, 166),
                (ChunkNonTerminals::_Statement_Star40, 168),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp, 74),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 178),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 177),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 176),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::Exp, 55),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::Field, 153),
                (ChunkNonTerminals::FieldList, 151),
                (ChunkNonTerminals::FieldList1, 110),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp, 230),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[(ChunkNonTerminals::FuncBody, 170)],
            &[
                (ChunkNonTerminals::NameList, 18),
                (ChunkNonTerminals::ParList, 24),
                (ChunkNonTerminals::_ParList_Question53, 25),
            ],
            &[],
            &[],
            &[
                (ChunkNonTerminals::_Group54, 22),
                (ChunkNonTerminals::__Group54_Question55, 23),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Block, 154),
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 156),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
                (ChunkNonTerminals::_Statement_Plus39, 166),
                (ChunkNonTerminals::_Statement_Star40, 168),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Block, 183),
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 156),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
                (ChunkNonTerminals::_Statement_Plus39, 166),
                (ChunkNonTerminals::_Statement_Star40, 168),
            ],
            &[(ChunkNonTerminals::NameList, 205)],
            &[],
            &[
                (ChunkNonTerminals::Exp, 185),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::Exp, 226),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 124),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::FuncName, 45),
                (ChunkNonTerminals::FuncName1, 40),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(ChunkNonTerminals::FuncBody, 46)],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp, 181),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Args, 122),
                (ChunkNonTerminals::TableConstructor, 119),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp, 93),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::ExpList0, 91),
                (ChunkNonTerminals::ExpList1, 58),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 123),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp, 163),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::AttName, 69),
                (ChunkNonTerminals::AttNameList, 70),
            ],
            &[(ChunkNonTerminals::Attrib, 65)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[(ChunkNonTerminals::FuncBody, 68)],
            &[],
            &[],
            &[
                (ChunkNonTerminals::_Group49, 196),
                (ChunkNonTerminals::__Group49_Question50, 197),
            ],
            &[
                (ChunkNonTerminals::Exp, 93),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::ExpList1, 193),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::Block, 198),
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 156),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
                (ChunkNonTerminals::_Statement_Plus39, 166),
                (ChunkNonTerminals::_Statement_Star40, 168),
            ],
            &[
                (ChunkNonTerminals::Exp, 179),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 80),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 84),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 86),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 88),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 125),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 130),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 133),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 134),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 135),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 136),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 147),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 148),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::Exp, 114),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::FieldSep, 113),
                (ChunkNonTerminals::_FieldSep_Question52, 150),
            ],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp, 55),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::Field, 149),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Args, 118),
                (ChunkNonTerminals::TableConstructor, 119),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 127),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 129),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 132),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 138),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 140),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 142),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 144),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 146),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Args, 122),
                (ChunkNonTerminals::TableConstructor, 119),
            ],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp, 93),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::ExpList1, 162),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Var, 165),
            ],
            &[],
            &[
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 167),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
            ],
            &[],
            &[
                (ChunkNonTerminals::ReturnStatement, 174),
                (ChunkNonTerminals::_ReturnStatement_Question41, 175),
            ],
            &[
                (ChunkNonTerminals::Exp, 93),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::ExpList0, 171),
                (ChunkNonTerminals::ExpList1, 58),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[(ChunkNonTerminals::_semicolon_Question51, 173)],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Block, 201),
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 156),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
                (ChunkNonTerminals::_Statement_Plus39, 166),
                (ChunkNonTerminals::_Statement_Star40, 168),
            ],
            &[],
            &[
                (ChunkNonTerminals::Block, 212),
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 156),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
                (ChunkNonTerminals::_Statement_Plus39, 166),
                (ChunkNonTerminals::_Statement_Star40, 168),
            ],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp, 187),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[
                (ChunkNonTerminals::_Group47, 190),
                (ChunkNonTerminals::__Group47_Question48, 191),
            ],
            &[
                (ChunkNonTerminals::Exp, 189),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Block, 203),
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 156),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
                (ChunkNonTerminals::_Statement_Plus39, 166),
                (ChunkNonTerminals::_Statement_Star40, 168),
            ],
            &[],
            &[(ChunkNonTerminals::AttName, 195)],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp, 200),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp, 93),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::ExpList1, 208),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Block, 210),
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 156),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
                (ChunkNonTerminals::_Statement_Plus39, 166),
                (ChunkNonTerminals::_Statement_Star40, 168),
            ],
            &[],
            &[],
            &[
                (ChunkNonTerminals::_Group42, 217),
                (ChunkNonTerminals::__Group42_Plus43, 218),
                (ChunkNonTerminals::__Group42_Star44, 220),
            ],
            &[
                (ChunkNonTerminals::Exp, 214),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[
                (ChunkNonTerminals::Block, 216),
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 156),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
                (ChunkNonTerminals::_Statement_Plus39, 166),
                (ChunkNonTerminals::_Statement_Star40, 168),
            ],
            &[],
            &[],
            &[(ChunkNonTerminals::_Group42, 219)],
            &[],
            &[
                (ChunkNonTerminals::_Group45, 223),
                (ChunkNonTerminals::__Group45_Question46, 224),
            ],
            &[
                (ChunkNonTerminals::Block, 222),
                (ChunkNonTerminals::FunctionCall, 159),
                (ChunkNonTerminals::PrefixExp, 158),
                (ChunkNonTerminals::Statement, 156),
                (ChunkNonTerminals::Var, 157),
                (ChunkNonTerminals::VarList, 160),
                (ChunkNonTerminals::_Statement_Plus39, 166),
                (ChunkNonTerminals::_Statement_Star40, 168),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[],
            &[
                (ChunkNonTerminals::Exp, 229),
                (ChunkNonTerminals::Exp0, 56),
                (ChunkNonTerminals::Exp1, 76),
                (ChunkNonTerminals::Exp10, 103),
                (ChunkNonTerminals::Exp11, 105),
                (ChunkNonTerminals::Exp12, 107),
                (ChunkNonTerminals::Exp2, 77),
                (ChunkNonTerminals::Exp3, 78),
                (ChunkNonTerminals::Exp4, 89),
                (ChunkNonTerminals::Exp5, 94),
                (ChunkNonTerminals::Exp6, 95),
                (ChunkNonTerminals::Exp7, 97),
                (ChunkNonTerminals::Exp8, 99),
                (ChunkNonTerminals::Exp9, 101),
                (ChunkNonTerminals::FunctionCall, 54),
                (ChunkNonTerminals::FunctionDef, 82),
                (ChunkNonTerminals::PrefixExp, 51),
                (ChunkNonTerminals::TableConstructor, 81),
                (ChunkNonTerminals::Var, 50),
            ],
            &[],
            &[],
            &[],
            &[],
            &[],
        ];
        const RUSTYLR_REDUCE_MAP: &[&[(u8, u8)]] = &[
            &[(0, 109)],
            &[(1, 18)],
            &[],
            &[(2, 45)],
            &[(2, 43)],
            &[(2, 44)],
            &[(2, 46)],
            &[],
            &[],
            &[],
            &[(3, 92)],
            &[(4, 18)],
            &[],
            &[(2, 47)],
            &[],
            &[(5, 131)],
            &[(6, 36)],
            &[(5, 105)],
            &[(5, 134)],
            &[],
            &[(7, 35)],
            &[(5, 132)],
            &[(5, 133)],
            &[(5, 104)],
            &[(5, 130)],
            &[],
            &[(8, 109)],
            &[],
            &[],
            &[(9, 5)],
            &[(9, 2)],
            &[(9, 6)],
            &[(8, 109)],
            &[],
            &[(10, 36)],
            &[],
            &[],
            &[],
            &[],
            &[(11, 101)],
            &[(12, 103)],
            &[],
            &[(12, 102)],
            &[],
            &[(11, 100)],
            &[],
            &[(9, 14)],
            &[],
            &[(9, 7)],
            &[],
            &[(13, 21)],
            &[(14, 49)],
            &[(13, 28)],
            &[(5, 34)],
            &[(13, 22)],
            &[(15, 95)],
            &[(16, 52)],
            &[],
            &[(17, 33)],
            &[],
            &[],
            &[(18, 41)],
            &[],
            &[],
            &[(18, 40)],
            &[(18, 37)],
            &[],
            &[],
            &[(9, 15)],
            &[(18, 39)],
            &[(9, 125)],
            &[],
            &[(19, 109)],
            &[],
            &[],
            &[(13, 23)],
            &[(16, 57)],
            &[(16, 62)],
            &[(20, 65)],
            &[],
            &[(16, 58)],
            &[(2, 50)],
            &[(2, 48)],
            &[],
            &[(16, 59)],
            &[],
            &[(16, 61)],
            &[],
            &[(16, 60)],
            &[(21, 67)],
            &[],
            &[],
            &[(13, 26)],
            &[(22, 32)],
            &[(21, 70)],
            &[(23, 72)],
            &[],
            &[(24, 74)],
            &[],
            &[(25, 76)],
            &[],
            &[(26, 83)],
            &[],
            &[(27, 85)],
            &[],
            &[(28, 87)],
            &[],
            &[(29, 42)],
            &[],
            &[],
            &[(3, 129)],
            &[(30, 97)],
            &[(30, 96)],
            &[(3, 128)],
            &[],
            &[(1, 19)],
            &[],
            &[],
            &[(13, 25)],
            &[(13, 27)],
            &[],
            &[(1, 20)],
            &[(13, 24)],
            &[(16, 51)],
            &[(16, 53)],
            &[(20, 63)],
            &[],
            &[(20, 64)],
            &[],
            &[(21, 66)],
            &[(21, 68)],
            &[],
            &[(21, 69)],
            &[(23, 71)],
            &[(24, 73)],
            &[(25, 75)],
            &[(26, 82)],
            &[],
            &[(26, 81)],
            &[],
            &[(26, 78)],
            &[],
            &[(26, 80)],
            &[],
            &[(26, 77)],
            &[],
            &[(26, 79)],
            &[(27, 84)],
            &[(28, 86)],
            &[(15, 89)],
            &[(3, 91)],
            &[],
            &[(13, 88)],
            &[(15, 90)],
            &[],
            &[(2, 99)],
            &[(9, 106)],
            &[(31, 21), (32, 30)],
            &[],
            &[(9, 4), (31, 22)],
            &[],
            &[],
            &[(9, 3)],
            &[(22, 31)],
            &[],
            &[(31, 21), (32, 29)],
            &[(33, 108)],
            &[(9, 107)],
            &[(34, 111)],
            &[(35, 34)],
            &[(2, 98)],
            &[(34, 127)],
            &[(34, 126)],
            &[(34, 17)],
            &[(34, 110)],
            &[(34, 1)],
            &[(16, 56)],
            &[(16, 54)],
            &[(16, 55)],
            &[],
            &[(8, 109)],
            &[],
            &[(36, 109)],
            &[],
            &[(9, 8)],
            &[],
            &[],
            &[(37, 122)],
            &[],
            &[(37, 120)],
            &[(37, 121)],
            &[],
            &[(8, 109)],
            &[(9, 123)],
            &[],
            &[(18, 38)],
            &[(9, 124)],
            &[(9, 16)],
            &[],
            &[],
            &[(9, 10)],
            &[],
            &[(9, 9)],
            &[],
            &[(9, 12)],
            &[],
            &[],
            &[],
            &[],
            &[(8, 109)],
            &[],
            &[(9, 13)],
            &[(38, 116)],
            &[],
            &[],
            &[(36, 109)],
            &[(39, 112)],
            &[(39, 113)],
            &[(38, 115)],
            &[(39, 114)],
            &[(40, 119)],
            &[(8, 109)],
            &[(40, 117)],
            &[(40, 118)],
            &[],
            &[(9, 11)],
            &[],
            &[],
            &[],
            &[(15, 93)],
            &[(15, 94)],
            &[],
            &[],
            &[(41, 0)],
        ];
        const RUSTYLR_RULESET_MAP: &[&[(u8, u8)]] = &[
            &[],
            &[(18, 1)],
            &[(23, 1)],
            &[(45, 1)],
            &[(43, 1)],
            &[(44, 1)],
            &[(46, 1)],
            &[(55, 1)],
            &[(54, 1)],
            &[(56, 1)],
            &[(88, 1)],
            &[(18, 1), (94, 1)],
            &[(94, 2)],
            &[(47, 1)],
            &[(98, 1)],
            &[(99, 1)],
            &[(36, 1)],
            &[(105, 1)],
            &[(35, 1), (104, 1)],
            &[(35, 2), (132, 1)],
            &[(35, 3)],
            &[(132, 2)],
            &[(133, 1)],
            &[(104, 2)],
            &[(130, 1)],
            &[(99, 2)],
            &[(99, 3)],
            &[(5, 1)],
            &[(5, 2)],
            &[(5, 3)],
            &[(2, 1)],
            &[(6, 1)],
            &[(8, 1)],
            &[(12, 1), (13, 1)],
            &[(12, 2), (36, 1)],
            &[(12, 3)],
            &[(93, 1)],
            &[(53, 1)],
            &[(14, 1)],
            &[(101, 1)],
            &[(100, 1), (102, 1), (103, 1)],
            &[(102, 2)],
            &[(102, 3)],
            &[(100, 2)],
            &[(100, 3)],
            &[(14, 2)],
            &[(14, 3)],
            &[(7, 1)],
            &[(7, 2)],
            &[(11, 1)],
            &[(21, 1)],
            &[(19, 1), (20, 1), (24, 1), (25, 1), (49, 1)],
            &[(28, 1)],
            &[(26, 1)],
            &[(22, 1)],
            &[(95, 1)],
            &[(51, 1), (52, 1)],
            &[(51, 2)],
            &[(31, 1), (33, 1)],
            &[(31, 2)],
            &[(15, 1), (16, 1)],
            &[(37, 1)],
            &[(40, 1)],
            &[(40, 2)],
            &[(40, 3)],
            &[(37, 2)],
            &[(15, 2)],
            &[(15, 3)],
            &[(15, 4)],
            &[(39, 1)],
            &[(16, 2), (38, 1)],
            &[(123, 1)],
            &[(10, 1)],
            &[(9, 1)],
            &[(23, 2)],
            &[(23, 3)],
            &[(57, 1)],
            &[(62, 1)],
            &[(58, 1), (59, 1), (60, 1), (61, 1), (65, 1)],
            &[(58, 2)],
            &[(58, 3)],
            &[(50, 1)],
            &[(48, 1)],
            &[(59, 2)],
            &[(59, 3)],
            &[(61, 2)],
            &[(61, 3)],
            &[(60, 2)],
            &[(60, 3)],
            &[(63, 1), (64, 1), (66, 1), (67, 1)],
            &[(63, 2)],
            &[(26, 2)],
            &[(26, 3)],
            &[(32, 1)],
            &[(70, 1)],
            &[(68, 1), (69, 1), (72, 1)],
            &[(68, 2)],
            &[(71, 1), (74, 1)],
            &[(71, 2)],
            &[(73, 1), (76, 1)],
            &[(73, 2)],
            &[(75, 1), (83, 1)],
            &[(75, 2)],
            &[
                (77, 1),
                (78, 1),
                (79, 1),
                (80, 1),
                (81, 1),
                (82, 1),
                (85, 1),
            ],
            &[(82, 2)],
            &[(84, 1), (87, 1)],
            &[(84, 2)],
            &[(42, 1), (86, 1)],
            &[(86, 2)],
            &[(19, 2)],
            &[(89, 1), (91, 1)],
            &[(97, 1)],
            &[(96, 1)],
            &[(89, 2), (128, 1)],
            &[(19, 3)],
            &[(19, 4)],
            &[(25, 2)],
            &[(25, 3)],
            &[(25, 4)],
            &[(27, 1)],
            &[(20, 2)],
            &[(20, 3)],
            &[(24, 2)],
            &[(51, 3)],
            &[(53, 2)],
            &[(58, 1), (59, 1), (60, 1), (61, 1), (63, 3)],
            &[(64, 2)],
            &[(58, 1), (59, 1), (60, 1), (61, 1), (64, 3)],
            &[(66, 2)],
            &[(66, 3)],
            &[(68, 3)],
            &[(69, 2)],
            &[(69, 3)],
            &[(68, 1), (69, 1), (71, 3)],
            &[(71, 1), (73, 3)],
            &[(73, 1), (75, 3)],
            &[(75, 1), (82, 3)],
            &[(81, 2)],
            &[(75, 1), (81, 3)],
            &[(78, 2)],
            &[(75, 1), (78, 3)],
            &[(80, 2)],
            &[(75, 1), (80, 3)],
            &[(77, 2)],
            &[(75, 1), (77, 3)],
            &[(79, 2)],
            &[(75, 1), (79, 3)],
            &[
                (77, 1),
                (78, 1),
                (79, 1),
                (80, 1),
                (81, 1),
                (82, 1),
                (84, 3),
            ],
            &[(84, 1), (86, 3)],
            &[(89, 3)],
            &[(91, 2)],
            &[(88, 2)],
            &[(88, 3)],
            &[(90, 1)],
            &[(99, 4)],
            &[(99, 5)],
            &[(106, 1)],
            &[(21, 1), (30, 1)],
            &[(19, 1), (20, 1), (24, 1), (25, 1)],
            &[(4, 1), (22, 1)],
            &[(3, 1), (29, 1)],
            &[(3, 2)],
            &[(3, 3), (31, 1)],
            &[(31, 3)],
            &[(29, 2)],
            &[(21, 1), (29, 3)],
            &[(107, 1), (108, 1)],
            &[(107, 2)],
            &[(1, 1)],
            &[(17, 1)],
            &[(98, 2)],
            &[(17, 2)],
            &[(126, 1)],
            &[(17, 3)],
            &[(110, 1)],
            &[(1, 2)],
            &[(56, 2)],
            &[(54, 2)],
            &[(55, 2)],
            &[(9, 2)],
            &[(9, 3)],
            &[(11, 2)],
            &[(11, 3)],
            &[(8, 2)],
            &[(8, 3)],
            &[(12, 4)],
            &[(12, 5)],
            &[(12, 6)],
            &[(120, 1)],
            &[(120, 2)],
            &[(121, 1)],
            &[(12, 7)],
            &[(12, 8)],
            &[(31, 1), (123, 2)],
            &[(38, 2)],
            &[(38, 3)],
            &[(124, 1)],
            &[(16, 3)],
            &[(10, 2)],
            &[(10, 3)],
            &[(10, 4)],
            &[(9, 4)],
            &[(9, 5)],
            &[(12, 9)],
            &[(12, 10)],
            &[(13, 2), (35, 1)],
            &[(35, 2)],
            &[(13, 3)],
            &[(13, 4), (31, 1)],
            &[(13, 5)],
            &[(13, 6)],
            &[(13, 7)],
            &[(11, 4)],
            &[(112, 1)],
            &[(112, 2)],
            &[(112, 3)],
            &[(112, 4)],
            &[(113, 1)],
            &[(114, 1), (115, 1)],
            &[(114, 2)],
            &[(11, 5)],
            &[(117, 1)],
            &[(117, 2)],
            &[(118, 1)],
            &[(11, 6)],
            &[(11, 7)],
            &[(93, 2)],
            &[(93, 3)],
            &[(93, 4)],
            &[(93, 5)],
            &[(94, 3)],
            &[(135, 1)],
            &[(135, 2)],
            &[(0, 1)],
        ];
        const RUSTYLR_RULESET_SHIFTED0_MAP: &[u8] = &[
            0, 1, 2, 1, 1, 1, 1, 3, 3, 3, 4, 1, 2, 1, 5, 6, 1, 1, 7, 1, 1, 1, 1, 1, 1, 1, 8, 1, 1,
            1, 1, 1, 8, 9, 1, 2, 2, 3, 10, 1, 1, 1, 1, 1, 1, 5, 1, 1, 1, 2, 1, 11, 1, 12, 1, 1, 1,
            13, 1, 2, 14, 15, 1, 1, 1, 1, 1, 5, 1, 1, 16, 17, 8, 2, 1, 1, 1, 1, 1, 3, 1, 1, 1, 3,
            1, 3, 1, 3, 1, 1, 18, 1, 1, 1, 1, 1, 19, 1, 20, 1, 21, 1, 22, 1, 23, 1, 24, 1, 25, 2,
            26, 1, 1, 27, 1, 1, 1, 11, 1, 1, 1, 1, 1, 1, 1, 1, 18, 1, 19, 1, 1, 19, 1, 1, 1, 1, 1,
            23, 1, 23, 1, 23, 1, 23, 1, 23, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 11, 1, 1, 17, 1, 1,
            28, 1, 29, 1, 30, 12, 1, 31, 1, 1, 1, 1, 1, 1, 1, 1, 8, 1, 8, 1, 1, 1, 2, 32, 2, 1, 1,
            1, 8, 1, 33, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1, 1, 1, 17, 1, 8, 1, 1, 34, 2, 1, 8, 1, 1, 35,
            1, 36, 8, 1, 1, 1, 1, 1, 1, 2, 1, 1, 1, 1, 1,
        ];
        let states: Vec<ChunkState> = RUSTYLR_SHIFT_TERM_MAP
            .iter()
            .zip(
                RUSTYLR_SHIFT_NONTERM_MAP.iter().zip(
                    RUSTYLR_REDUCE_MAP.iter().zip(
                        RUSTYLR_RULESET_MAP
                            .iter()
                            .zip(RUSTYLR_RULESET_SHIFTED0_MAP.iter()),
                    ),
                ),
            )
            .map(
                |(
                    shift_goto_map_term,
                    (shift_goto_map_nonterm, (reduce_map_, (ruleset, ruleset0_id))),
                )| {
                    let mut reduce_map = ::rusty_lr::HashMap::default();
                    for (terminal_set_id, ruleid) in reduce_map_.iter() {
                        for term in RUSTYLR_REDUCE_TERMINALS_CACHE[*terminal_set_id as usize].iter()
                        {
                            reduce_map
                                .entry(__rustylr_terminals[*term as usize].clone())
                                .or_insert_with(Vec::new)
                                .push(*ruleid as usize);
                        }
                    }
                    let mut ruleset: Vec<::rusty_lr::ShiftedRuleRef> = ruleset
                        .iter()
                        .map(|(ruleid, shifted)| ::rusty_lr::ShiftedRuleRef {
                            rule: *ruleid as usize,
                            shifted: *shifted as usize,
                        })
                        .collect();
                    ruleset.extend(
                        RUSTYLR_RULESET_SHIFTED0_CACHE[*ruleset0_id as usize]
                            .iter()
                            .map(|ruleid| ::rusty_lr::ShiftedRuleRef {
                                rule: *ruleid as usize,
                                shifted: 0,
                            }),
                    );
                    ChunkState {
                        shift_goto_map_term: shift_goto_map_term
                            .iter()
                            .map(|(term_idx, goto)| {
                                (
                                    __rustylr_terminals[*term_idx as usize].clone(),
                                    *goto as usize,
                                )
                            })
                            .collect(),
                        shift_goto_map_nonterm: shift_goto_map_nonterm
                            .iter()
                            .map(|(nonterm, goto)| (*nonterm, *goto as usize))
                            .collect(),
                        reduce_map,
                        ruleset,
                    }
                },
            )
            .collect();
        Self { rules, states }
    }
}
// ==============================Generated Codes End===============================
